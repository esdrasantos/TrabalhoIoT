
AmostraSensores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000500c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800525c  0800525c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800525c  0800525c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005264  08005264  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005264  08005264  00015264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800526c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000070  080052dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  080052dc  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010042  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002649  00000000  00000000  000300e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e78  00000000  00000000  00032730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  000335a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002334a  00000000  00000000  000342c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf0a  00000000  00000000  00057612  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4544  00000000  00000000  0006451c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138a60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e14  00000000  00000000  00138adc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080051c4 	.word	0x080051c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080051c4 	.word	0x080051c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80005d2:	4b28      	ldr	r3, [pc, #160]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <MX_ADC1_Init+0xb8>)
 80005d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80005e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f2:	4b20      	ldr	r3, [pc, #128]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <MX_ADC1_Init+0xbc>)
 8000604:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC1_Init+0xb4>)
 800060e:	2202      	movs	r2, #2
 8000610:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000614:	2201      	movs	r2, #1
 8000616:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_ADC1_Init+0xb4>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000620:	4814      	ldr	r0, [pc, #80]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000622:	f000 fd59 	bl	80010d8 <HAL_ADC_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800062c:	f000 f9cc 	bl	80009c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000630:	2300      	movs	r3, #0
 8000632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000634:	2301      	movs	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000642:	f000 ffe7 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800064c:	f000 f9bc 	bl	80009c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000650:	2301      	movs	r3, #1
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xb4>)
 800065e:	f000 ffd9 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000668:	f000 f9ae 	bl	80009c8 <Error_Handler>
  }

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000098 	.word	0x20000098
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a31      	ldr	r2, [pc, #196]	; (8000764 <HAL_ADC_MspInit+0xe4>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d15c      	bne.n	800075c <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b30      	ldr	r3, [pc, #192]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	4a2f      	ldr	r2, [pc, #188]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6453      	str	r3, [r2, #68]	; 0x44
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b29      	ldr	r3, [pc, #164]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a28      	ldr	r2, [pc, #160]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006da:	2303      	movs	r3, #3
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	481f      	ldr	r0, [pc, #124]	; (800076c <HAL_ADC_MspInit+0xec>)
 80006ee:	f001 feed 	bl	80024cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 80006f4:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <HAL_ADC_MspInit+0xf4>)
 80006f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 800070c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000710:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000730:	480f      	ldr	r0, [pc, #60]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000732:	f001 fb3b 	bl	8001dac <HAL_DMA_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800073c:	f000 f944 	bl	80009c8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000744:	639a      	str	r2, [r3, #56]	; 0x38
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	2012      	movs	r0, #18
 8000752:	f001 faf4 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000756:	2012      	movs	r0, #18
 8000758:	f001 fb0d 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40012000 	.word	0x40012000
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000
 8000770:	200000e0 	.word	0x200000e0
 8000774:	40026410 	.word	0x40026410

08000778 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_DMA_Init+0x5c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_DMA_Init+0x5c>)
 8000788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_DMA_Init+0x5c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2038      	movs	r0, #56	; 0x38
 80007a0:	f001 facd 	bl	8001d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007a4:	2038      	movs	r0, #56	; 0x38
 80007a6:	f001 fae6 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	203a      	movs	r0, #58	; 0x3a
 80007b0:	f001 fac5 	bl	8001d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007b4:	203a      	movs	r0, #58	; 0x3a
 80007b6:	f001 fade 	bl	8001d76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2046      	movs	r0, #70	; 0x46
 80007c0:	f001 fabd 	bl	8001d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80007c4:	2046      	movs	r0, #70	; 0x46
 80007c6:	f001 fad6 	bl	8001d76 <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_GPIO_Init+0x30>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <MX_GPIO_Init+0x30>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_GPIO_Init+0x30>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 fbf0 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f826 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f7ff ffde 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800081c:	f7ff ffac 	bl	8000778 <MX_DMA_Init>
  MX_TIM10_Init();
 8000820:	f000 fa06 	bl	8000c30 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000824:	f000 fa96 	bl	8000d54 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000828:	f7ff feca 	bl	80005c0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800082c:	f000 f9b2 	bl	8000b94 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000830:	f000 fa66 	bl	8000d00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000834:	4806      	ldr	r0, [pc, #24]	; (8000850 <main+0x44>)
 8000836:	f002 fccc 	bl	80031d2 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1, &pData, bufferSize); //! Armazena o dado recebido pela serial
 800083a:	2201      	movs	r2, #1
 800083c:	4905      	ldr	r1, [pc, #20]	; (8000854 <main+0x48>)
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <main+0x4c>)
 8000840:	f003 f956 	bl	8003af0 <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, NumberOfConversions); //!Inicia a memória DMA para armazenar os valores da sequência de conversão de 3 canais do AD
 8000844:	2202      	movs	r2, #2
 8000846:	4905      	ldr	r1, [pc, #20]	; (800085c <main+0x50>)
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <main+0x54>)
 800084a:	f000 fdc9 	bl	80013e0 <HAL_ADC_Start_DMA>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800084e:	e7fe      	b.n	800084e <main+0x42>
 8000850:	20000318 	.word	0x20000318
 8000854:	20000140 	.word	0x20000140
 8000858:	20000418 	.word	0x20000418
 800085c:	200002d4 	.word	0x200002d4
 8000860:	20000098 	.word	0x20000098

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2234      	movs	r2, #52	; 0x34
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f004 f884 	bl	8004980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b23      	ldr	r3, [pc, #140]	; (800091c <SystemClock_Config+0xb8>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a22      	ldr	r2, [pc, #136]	; (800091c <SystemClock_Config+0xb8>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b20      	ldr	r3, [pc, #128]	; (800091c <SystemClock_Config+0xb8>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <SystemClock_Config+0xbc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <SystemClock_Config+0xbc>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <SystemClock_Config+0xbc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 f9f5 	bl	8002cc8 <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008e4:	f000 f870 	bl	80009c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e8:	230f      	movs	r3, #15
 80008ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f001 ff74 	bl	80027f0 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800090e:	f000 f85b 	bl	80009c8 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3750      	adds	r7, #80	; 0x50
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	/* Em teoria, os valores de CCR1 ficam na ordem correta da conversão dos canais, o valor convertido é armazenado no vetor e a posicao de memoria eh incrementada a cada leitura*/
	// HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length);

	if(htim->Instance == TIM2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000934:	d104      	bne.n	8000940 <HAL_TIM_PeriodElapsedCallback+0x1c>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, NumberOfConversions); //!Inicia a memória DMA para armazenar os valores da sequência de conversão de 3 canais do AD
 8000936:	2202      	movs	r2, #2
 8000938:	4903      	ldr	r1, [pc, #12]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800093a:	4804      	ldr	r0, [pc, #16]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800093c:	f000 fd50 	bl	80013e0 <HAL_ADC_Start_DMA>

}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200002d4 	.word	0x200002d4
 800094c:	20000098 	.word	0x20000098

08000950 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af02      	add	r7, sp, #8
 8000956:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_UART_RxCpltCallback+0x60>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d121      	bne.n	80009a6 <HAL_UART_RxCpltCallback+0x56>
	{
		//HAL_UART_Receive_IT(&huart1, &pData, bufferSize); //! Armazena o dado recebido pela serial
		if(pData == 'r')
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_UART_RxCpltCallback+0x64>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b72      	cmp	r3, #114	; 0x72
 8000968:	d118      	bne.n	800099c <HAL_UART_RxCpltCallback+0x4c>
		{
			snprintf(msg,TAM_MSG,"{\"umidade\": \"%lu\", \"luminosidade\": \"%lu\"}",adc_values[0],adc_values[1]);
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <HAL_UART_RxCpltCallback+0x68>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_UART_RxCpltCallback+0x68>)
 8000972:	785b      	ldrb	r3, [r3, #1]
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	4613      	mov	r3, r2
 8000978:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_UART_RxCpltCallback+0x6c>)
 800097a:	2164      	movs	r1, #100	; 0x64
 800097c:	4810      	ldr	r0, [pc, #64]	; (80009c0 <HAL_UART_RxCpltCallback+0x70>)
 800097e:	f004 f807 	bl	8004990 <sniprintf>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)msg, strlen(msg));
 8000982:	480f      	ldr	r0, [pc, #60]	; (80009c0 <HAL_UART_RxCpltCallback+0x70>)
 8000984:	f7ff fc44 	bl	8000210 <strlen>
 8000988:	4603      	mov	r3, r0
 800098a:	b29b      	uxth	r3, r3
 800098c:	461a      	mov	r2, r3
 800098e:	490c      	ldr	r1, [pc, #48]	; (80009c0 <HAL_UART_RxCpltCallback+0x70>)
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <HAL_UART_RxCpltCallback+0x74>)
 8000992:	f003 f841 	bl	8003a18 <HAL_UART_Transmit_DMA>
			pData = 0;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <HAL_UART_RxCpltCallback+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_DMA(&huart1, &pData, bufferSize); //! Armazena o dado recebido pela serial
 800099c:	2201      	movs	r2, #1
 800099e:	4905      	ldr	r1, [pc, #20]	; (80009b4 <HAL_UART_RxCpltCallback+0x64>)
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <HAL_UART_RxCpltCallback+0x74>)
 80009a2:	f003 f8a5 	bl	8003af0 <HAL_UART_Receive_DMA>
	}

}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40011000 	.word	0x40011000
 80009b4:	20000140 	.word	0x20000140
 80009b8:	200002d4 	.word	0x200002d4
 80009bc:	080051dc 	.word	0x080051dc
 80009c0:	20000144 	.word	0x20000144
 80009c4:	20000418 	.word	0x20000418

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 fb0c 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <ADC_IRQHandler+0x10>)
 8000a8a:	f000 fb68 	bl	800115e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000098 	.word	0x20000098

08000a98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a9e:	f002 fbbc 	bl	800321a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200002d8 	.word	0x200002d8

08000aac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <TIM2_IRQHandler+0x10>)
 8000ab2:	f002 fbb2 	bl	800321a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000318 	.word	0x20000318

08000ac0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <USART1_IRQHandler+0x10>)
 8000ac6:	f003 f893 	bl	8003bf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000418 	.word	0x20000418

08000ad4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <DMA2_Stream0_IRQHandler+0x10>)
 8000ada:	f001 fa8f 	bl	8001ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000e0 	.word	0x200000e0

08000ae8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <DMA2_Stream2_IRQHandler+0x10>)
 8000aee:	f001 fa85 	bl	8001ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200003b8 	.word	0x200003b8

08000afc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <DMA2_Stream7_IRQHandler+0x10>)
 8000b02:	f001 fa7b 	bl	8001ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000358 	.word	0x20000358

08000b10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <_sbrk+0x50>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x16>
		heap_end = &end;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <_sbrk+0x50>)
 8000b22:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <_sbrk+0x54>)
 8000b24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <_sbrk+0x50>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <_sbrk+0x50>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	466a      	mov	r2, sp
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d907      	bls.n	8000b4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b3a:	f003 fef7 	bl	800492c <__errno>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	230c      	movs	r3, #12
 8000b42:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	e006      	b.n	8000b58 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <_sbrk+0x50>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <_sbrk+0x50>)
 8000b54:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000008c 	.word	0x2000008c
 8000b64:	200004a0 	.word	0x200004a0

08000b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <SystemInit+0x28>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <SystemInit+0x28>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SystemInit+0x28>)
 8000b7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b82:	609a      	str	r2, [r3, #8]
#endif
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bba:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000bbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bc8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000bcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bda:	4814      	ldr	r0, [pc, #80]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bdc:	f002 face 	bl	800317c <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000be6:	f7ff feef 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000bf8:	f002 fc17 	bl	800342a <HAL_TIM_ConfigClockSource>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c02:	f7ff fee1 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_TIM2_Init+0x98>)
 8000c14:	f002 fe22 	bl	800385c <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c1e:	f7ff fed3 	bl	80009c8 <Error_Handler>
  }

}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000318 	.word	0x20000318

08000c30 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_TIM10_Init+0x40>)
 8000c36:	4a0f      	ldr	r2, [pc, #60]	; (8000c74 <MX_TIM10_Init+0x44>)
 8000c38:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_TIM10_Init+0x40>)
 8000c3c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000c40:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_TIM10_Init+0x40>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_TIM10_Init+0x40>)
 8000c4a:	2263      	movs	r2, #99	; 0x63
 8000c4c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_TIM10_Init+0x40>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_TIM10_Init+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_TIM10_Init+0x40>)
 8000c5c:	f002 fa8e 	bl	800317c <HAL_TIM_Base_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000c66:	f7ff feaf 	bl	80009c8 <Error_Handler>
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200002d8 	.word	0x200002d8
 8000c74:	40014400 	.word	0x40014400

08000c78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c88:	d116      	bne.n	8000cb8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <HAL_TIM_Base_MspInit+0x80>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <HAL_TIM_Base_MspInit+0x80>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_TIM_Base_MspInit+0x80>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2100      	movs	r1, #0
 8000caa:	201c      	movs	r0, #28
 8000cac:	f001 f847 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cb0:	201c      	movs	r0, #28
 8000cb2:	f001 f860 	bl	8001d76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8000cb6:	e01a      	b.n	8000cee <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM10)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <HAL_TIM_Base_MspInit+0x84>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d115      	bne.n	8000cee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_TIM_Base_MspInit+0x80>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <HAL_TIM_Base_MspInit+0x80>)
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_TIM_Base_MspInit+0x80>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2019      	movs	r0, #25
 8000ce4:	f001 f82b 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ce8:	2019      	movs	r0, #25
 8000cea:	f001 f844 	bl	8001d76 <HAL_NVIC_EnableIRQ>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40014400 	.word	0x40014400

08000d00 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <MX_USART1_UART_Init+0x50>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_USART1_UART_Init+0x4c>)
 8000d38:	f002 fe20 	bl	800397c <HAL_UART_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d42:	f7ff fe41 	bl	80009c8 <Error_Handler>
  }

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000418 	.word	0x20000418
 8000d50:	40011000 	.word	0x40011000

08000d54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <MX_USART2_UART_Init+0x50>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	f002 fdf6 	bl	800397c <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d96:	f7ff fe17 	bl	80009c8 <Error_Handler>
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000458 	.word	0x20000458
 8000da4:	40004400 	.word	0x40004400

08000da8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	; 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a6e      	ldr	r2, [pc, #440]	; (8000f80 <HAL_UART_MspInit+0x1d8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	f040 80a4 	bne.w	8000f14 <HAL_UART_MspInit+0x16c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	4b6c      	ldr	r3, [pc, #432]	; (8000f84 <HAL_UART_MspInit+0x1dc>)
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	4a6b      	ldr	r2, [pc, #428]	; (8000f84 <HAL_UART_MspInit+0x1dc>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6453      	str	r3, [r2, #68]	; 0x44
 8000ddc:	4b69      	ldr	r3, [pc, #420]	; (8000f84 <HAL_UART_MspInit+0x1dc>)
 8000dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	4b65      	ldr	r3, [pc, #404]	; (8000f84 <HAL_UART_MspInit+0x1dc>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	4a64      	ldr	r2, [pc, #400]	; (8000f84 <HAL_UART_MspInit+0x1dc>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	6313      	str	r3, [r2, #48]	; 0x30
 8000df8:	4b62      	ldr	r3, [pc, #392]	; (8000f84 <HAL_UART_MspInit+0x1dc>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e04:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e16:	2307      	movs	r3, #7
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4859      	ldr	r0, [pc, #356]	; (8000f88 <HAL_UART_MspInit+0x1e0>)
 8000e22:	f001 fb53 	bl	80024cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000e26:	4b59      	ldr	r3, [pc, #356]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e28:	4a59      	ldr	r2, [pc, #356]	; (8000f90 <HAL_UART_MspInit+0x1e8>)
 8000e2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000e2c:	4b57      	ldr	r3, [pc, #348]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e32:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e34:	4b55      	ldr	r3, [pc, #340]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3a:	4b54      	ldr	r3, [pc, #336]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e40:	4b52      	ldr	r3, [pc, #328]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e46:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e48:	4b50      	ldr	r3, [pc, #320]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e4e:	4b4f      	ldr	r3, [pc, #316]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e54:	4b4d      	ldr	r3, [pc, #308]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e60:	4b4a      	ldr	r3, [pc, #296]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e62:	2204      	movs	r2, #4
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e66:	4b49      	ldr	r3, [pc, #292]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e68:	2203      	movs	r2, #3
 8000e6a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e6c:	4b47      	ldr	r3, [pc, #284]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e72:	4b46      	ldr	r3, [pc, #280]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e78:	4844      	ldr	r0, [pc, #272]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e7a:	f000 ff97 	bl	8001dac <HAL_DMA_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8000e84:	f7ff fda0 	bl	80009c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a40      	ldr	r2, [pc, #256]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000e8e:	4a3f      	ldr	r2, [pc, #252]	; (8000f8c <HAL_UART_MspInit+0x1e4>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000e94:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000e96:	4a40      	ldr	r2, [pc, #256]	; (8000f98 <HAL_UART_MspInit+0x1f0>)
 8000e98:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000e9a:	4b3e      	ldr	r3, [pc, #248]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000e9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ea0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000ea4:	2240      	movs	r2, #64	; 0x40
 8000ea6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea8:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eae:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000eb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb6:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ebc:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ec8:	4b32      	ldr	r3, [pc, #200]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000eda:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ee6:	482b      	ldr	r0, [pc, #172]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000ee8:	f000 ff60 	bl	8001dac <HAL_DMA_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8000ef2:	f7ff fd69 	bl	80009c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000efa:	631a      	str	r2, [r3, #48]	; 0x30
 8000efc:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <HAL_UART_MspInit+0x1ec>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2025      	movs	r0, #37	; 0x25
 8000f08:	f000 ff19 	bl	8001d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f0c:	2025      	movs	r0, #37	; 0x25
 8000f0e:	f000 ff32 	bl	8001d76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f12:	e030      	b.n	8000f76 <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==USART2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a20      	ldr	r2, [pc, #128]	; (8000f9c <HAL_UART_MspInit+0x1f4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12b      	bne.n	8000f76 <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_UART_MspInit+0x1dc>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_UART_MspInit+0x1dc>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_UART_MspInit+0x1dc>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_UART_MspInit+0x1dc>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_UART_MspInit+0x1dc>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_MspInit+0x1dc>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f56:	230c      	movs	r3, #12
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f66:	2307      	movs	r3, #7
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <HAL_UART_MspInit+0x1e0>)
 8000f72:	f001 faab 	bl	80024cc <HAL_GPIO_Init>
}
 8000f76:	bf00      	nop
 8000f78:	3730      	adds	r7, #48	; 0x30
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40011000 	.word	0x40011000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	200003b8 	.word	0x200003b8
 8000f90:	40026440 	.word	0x40026440
 8000f94:	20000358 	.word	0x20000358
 8000f98:	400264b8 	.word	0x400264b8
 8000f9c:	40004400 	.word	0x40004400

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa6:	e003      	b.n	8000fb0 <LoopCopyDataInit>

08000fa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000faa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fae:	3104      	adds	r1, #4

08000fb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb8:	d3f6      	bcc.n	8000fa8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fbc:	e002      	b.n	8000fc4 <LoopFillZerobss>

08000fbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fc0:	f842 3b04 	str.w	r3, [r2], #4

08000fc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc8:	d3f9      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fca:	f7ff fdcd 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f003 fcb3 	bl	8004938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fc1b 	bl	800080c <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fdc:	0800526c 	.word	0x0800526c
  ldr  r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000fe8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000fec:	200004a0 	.word	0x200004a0

08000ff0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <CAN1_RX0_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 fe83 	bl	8001d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fcd6 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fe9b 	bl	8001d92 <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 fe63 	bl	8001d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000000 	.word	0x20000000
 8001090:	20000008 	.word	0x20000008
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000498 	.word	0x20000498

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000498 	.word	0x20000498

080010d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e033      	b.n	8001156 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fac2 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	2b00      	cmp	r3, #0
 8001114:	d118      	bne.n	8001148 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800111e:	f023 0302 	bic.w	r3, r3, #2
 8001122:	f043 0202 	orr.w	r2, r3, #2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fba4 	bl	8001878 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f023 0303 	bic.w	r3, r3, #3
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
 8001146:	e001      	b.n	800114c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b02      	cmp	r3, #2
 800117a:	bf0c      	ite	eq
 800117c:	2301      	moveq	r3, #1
 800117e:	2300      	movne	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	2b20      	cmp	r3, #32
 8001190:	bf0c      	ite	eq
 8001192:	2301      	moveq	r3, #1
 8001194:	2300      	movne	r3, #0
 8001196:	b2db      	uxtb	r3, r3
 8001198:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d049      	beq.n	8001234 <HAL_ADC_IRQHandler+0xd6>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d046      	beq.n	8001234 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d105      	bne.n	80011be <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d12b      	bne.n	8001224 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d127      	bne.n	8001224 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d119      	bne.n	8001224 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0220 	bic.w	r2, r2, #32
 80011fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d105      	bne.n	8001224 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f043 0201 	orr.w	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f000 f9cd 	bl	80015c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f06f 0212 	mvn.w	r2, #18
 8001232:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf0c      	ite	eq
 8001242:	2301      	moveq	r3, #1
 8001244:	2300      	movne	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001254:	2b80      	cmp	r3, #128	; 0x80
 8001256:	bf0c      	ite	eq
 8001258:	2301      	moveq	r3, #1
 800125a:	2300      	movne	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d057      	beq.n	8001316 <HAL_ADC_IRQHandler+0x1b8>
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d054      	beq.n	8001316 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	2b00      	cmp	r3, #0
 8001276:	d105      	bne.n	8001284 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d139      	bne.n	8001306 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001298:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d12b      	bne.n	8001306 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d124      	bne.n	8001306 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d11d      	bne.n	8001306 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d119      	bne.n	8001306 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d105      	bne.n	8001306 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 fc34 	bl	8001b74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f06f 020c 	mvn.w	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b01      	cmp	r3, #1
 8001322:	bf0c      	ite	eq
 8001324:	2301      	moveq	r3, #1
 8001326:	2300      	movne	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001336:	2b40      	cmp	r3, #64	; 0x40
 8001338:	bf0c      	ite	eq
 800133a:	2301      	moveq	r3, #1
 800133c:	2300      	movne	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d017      	beq.n	8001378 <HAL_ADC_IRQHandler+0x21a>
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d014      	beq.n	8001378 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10d      	bne.n	8001378 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f93f 	bl	80015ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f06f 0201 	mvn.w	r2, #1
 8001376:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	2b20      	cmp	r3, #32
 8001384:	bf0c      	ite	eq
 8001386:	2301      	moveq	r3, #1
 8001388:	2300      	movne	r3, #0
 800138a:	b2db      	uxtb	r3, r3
 800138c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800139c:	bf0c      	ite	eq
 800139e:	2301      	moveq	r3, #1
 80013a0:	2300      	movne	r3, #0
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d015      	beq.n	80013d8 <HAL_ADC_IRQHandler+0x27a>
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d012      	beq.n	80013d8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f043 0202 	orr.w	r2, r3, #2
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f06f 0220 	mvn.w	r2, #32
 80013c6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f919 	bl	8001600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f06f 0220 	mvn.w	r2, #32
 80013d6:	601a      	str	r2, [r3, #0]
  }
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_ADC_Start_DMA+0x1e>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e0cc      	b.n	8001598 <HAL_ADC_Start_DMA+0x1b8>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b01      	cmp	r3, #1
 8001412:	d018      	beq.n	8001446 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001424:	4b5e      	ldr	r3, [pc, #376]	; (80015a0 <HAL_ADC_Start_DMA+0x1c0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a5e      	ldr	r2, [pc, #376]	; (80015a4 <HAL_ADC_Start_DMA+0x1c4>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	0c9a      	lsrs	r2, r3, #18
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001438:	e002      	b.n	8001440 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	3b01      	subs	r3, #1
 800143e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b01      	cmp	r3, #1
 8001452:	f040 80a0 	bne.w	8001596 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001474:	2b00      	cmp	r3, #0
 8001476:	d007      	beq.n	8001488 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001480:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001494:	d106      	bne.n	80014a4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f023 0206 	bic.w	r2, r3, #6
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44
 80014a2:	e002      	b.n	80014aa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b2:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <HAL_ADC_Start_DMA+0x1c8>)
 80014b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ba:	4a3c      	ldr	r2, [pc, #240]	; (80015ac <HAL_ADC_Start_DMA+0x1cc>)
 80014bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c2:	4a3b      	ldr	r2, [pc, #236]	; (80015b0 <HAL_ADC_Start_DMA+0x1d0>)
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ca:	4a3a      	ldr	r2, [pc, #232]	; (80015b4 <HAL_ADC_Start_DMA+0x1d4>)
 80014cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	334c      	adds	r3, #76	; 0x4c
 8001502:	4619      	mov	r1, r3
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f000 fcfe 	bl	8001f08 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	2b00      	cmp	r3, #0
 8001516:	d12a      	bne.n	800156e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a26      	ldr	r2, [pc, #152]	; (80015b8 <HAL_ADC_Start_DMA+0x1d8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d015      	beq.n	800154e <HAL_ADC_Start_DMA+0x16e>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a25      	ldr	r2, [pc, #148]	; (80015bc <HAL_ADC_Start_DMA+0x1dc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d105      	bne.n	8001538 <HAL_ADC_Start_DMA+0x158>
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <HAL_ADC_Start_DMA+0x1c8>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 031f 	and.w	r3, r3, #31
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00a      	beq.n	800154e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a20      	ldr	r2, [pc, #128]	; (80015c0 <HAL_ADC_Start_DMA+0x1e0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d129      	bne.n	8001596 <HAL_ADC_Start_DMA+0x1b6>
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_ADC_Start_DMA+0x1c8>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 031f 	and.w	r3, r3, #31
 800154a:	2b0f      	cmp	r3, #15
 800154c:	d823      	bhi.n	8001596 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d11c      	bne.n	8001596 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	e013      	b.n	8001596 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_ADC_Start_DMA+0x1d8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d10e      	bne.n	8001596 <HAL_ADC_Start_DMA+0x1b6>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d107      	bne.n	8001596 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001594:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000000 	.word	0x20000000
 80015a4:	431bde83 	.word	0x431bde83
 80015a8:	40012300 	.word	0x40012300
 80015ac:	08001a71 	.word	0x08001a71
 80015b0:	08001b2b 	.word	0x08001b2b
 80015b4:	08001b47 	.word	0x08001b47
 80015b8:	40012000 	.word	0x40012000
 80015bc:	40012100 	.word	0x40012100
 80015c0:	40012200 	.word	0x40012200

080015c4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x1c>
 800162c:	2302      	movs	r3, #2
 800162e:	e113      	b.n	8001858 <HAL_ADC_ConfigChannel+0x244>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b09      	cmp	r3, #9
 800163e:	d925      	bls.n	800168c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68d9      	ldr	r1, [r3, #12]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	3b1e      	subs	r3, #30
 8001656:	2207      	movs	r2, #7
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43da      	mvns	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	400a      	ands	r2, r1
 8001664:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68d9      	ldr	r1, [r3, #12]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	4618      	mov	r0, r3
 8001678:	4603      	mov	r3, r0
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4403      	add	r3, r0
 800167e:	3b1e      	subs	r3, #30
 8001680:	409a      	lsls	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	e022      	b.n	80016d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6919      	ldr	r1, [r3, #16]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	2207      	movs	r2, #7
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	400a      	ands	r2, r1
 80016ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6919      	ldr	r1, [r3, #16]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4403      	add	r3, r0
 80016c8:	409a      	lsls	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d824      	bhi.n	8001724 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	3b05      	subs	r3, #5
 80016ec:	221f      	movs	r2, #31
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	400a      	ands	r2, r1
 80016fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	4618      	mov	r0, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b05      	subs	r3, #5
 8001716:	fa00 f203 	lsl.w	r2, r0, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
 8001722:	e04c      	b.n	80017be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b0c      	cmp	r3, #12
 800172a:	d824      	bhi.n	8001776 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b23      	subs	r3, #35	; 0x23
 800173e:	221f      	movs	r2, #31
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43da      	mvns	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	400a      	ands	r2, r1
 800174c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	4618      	mov	r0, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	3b23      	subs	r3, #35	; 0x23
 8001768:	fa00 f203 	lsl.w	r2, r0, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
 8001774:	e023      	b.n	80017be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b41      	subs	r3, #65	; 0x41
 8001788:	221f      	movs	r2, #31
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	400a      	ands	r2, r1
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	3b41      	subs	r3, #65	; 0x41
 80017b2:	fa00 f203 	lsl.w	r2, r0, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017be:	4b29      	ldr	r3, [pc, #164]	; (8001864 <HAL_ADC_ConfigChannel+0x250>)
 80017c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a28      	ldr	r2, [pc, #160]	; (8001868 <HAL_ADC_ConfigChannel+0x254>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d10f      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x1d8>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b12      	cmp	r3, #18
 80017d2:	d10b      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <HAL_ADC_ConfigChannel+0x254>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d12b      	bne.n	800184e <HAL_ADC_ConfigChannel+0x23a>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <HAL_ADC_ConfigChannel+0x258>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d003      	beq.n	8001808 <HAL_ADC_ConfigChannel+0x1f4>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b11      	cmp	r3, #17
 8001806:	d122      	bne.n	800184e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a11      	ldr	r2, [pc, #68]	; (800186c <HAL_ADC_ConfigChannel+0x258>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d111      	bne.n	800184e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_ADC_ConfigChannel+0x25c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a11      	ldr	r2, [pc, #68]	; (8001874 <HAL_ADC_ConfigChannel+0x260>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	0c9a      	lsrs	r2, r3, #18
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001840:	e002      	b.n	8001848 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3b01      	subs	r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f9      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40012300 	.word	0x40012300
 8001868:	40012000 	.word	0x40012000
 800186c:	10000012 	.word	0x10000012
 8001870:	20000000 	.word	0x20000000
 8001874:	431bde83 	.word	0x431bde83

08001878 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001880:	4b79      	ldr	r3, [pc, #484]	; (8001a68 <ADC_Init+0x1f0>)
 8001882:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	431a      	orrs	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	021a      	lsls	r2, r3, #8
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6899      	ldr	r1, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	4a58      	ldr	r2, [pc, #352]	; (8001a6c <ADC_Init+0x1f4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d022      	beq.n	8001956 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800191e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6899      	ldr	r1, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6899      	ldr	r1, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	e00f      	b.n	8001976 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001974:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0202 	bic.w	r2, r2, #2
 8001984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7e1b      	ldrb	r3, [r3, #24]
 8001990:	005a      	lsls	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d01b      	beq.n	80019dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	3b01      	subs	r3, #1
 80019d0:	035a      	lsls	r2, r3, #13
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	e007      	b.n	80019ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	051a      	lsls	r2, r3, #20
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6899      	ldr	r1, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a2e:	025a      	lsls	r2, r3, #9
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6899      	ldr	r1, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	029a      	lsls	r2, r3, #10
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	609a      	str	r2, [r3, #8]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	40012300 	.word	0x40012300
 8001a6c:	0f000001 	.word	0x0f000001

08001a70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d13c      	bne.n	8001b04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d12b      	bne.n	8001afc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d127      	bne.n	8001afc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d006      	beq.n	8001ac8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d119      	bne.n	8001afc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0220 	bic.w	r2, r2, #32
 8001ad6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f043 0201 	orr.w	r2, r3, #1
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f7ff fd61 	bl	80015c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b02:	e00e      	b.n	8001b22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f7ff fd75 	bl	8001600 <HAL_ADC_ErrorCallback>
}
 8001b16:	e004      	b.n	8001b22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	4798      	blx	r3
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b36:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f7ff fd4d 	bl	80015d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b52:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2240      	movs	r2, #64	; 0x40
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f043 0204 	orr.w	r2, r3, #4
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f7ff fd4a 	bl	8001600 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bba:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	60d3      	str	r3, [r2, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db0b      	blt.n	8001c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4907      	ldr	r1, [pc, #28]	; (8001c24 <__NVIC_EnableIRQ+0x38>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	; (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	; (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	; 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf4:	d301      	bcc.n	8001cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00f      	b.n	8001d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <SysTick_Config+0x40>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d02:	210f      	movs	r1, #15
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f7ff ff8e 	bl	8001c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <SysTick_Config+0x40>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SysTick_Config+0x40>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff29 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d50:	f7ff ff3e 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	6978      	ldr	r0, [r7, #20]
 8001d5c:	f7ff ff8e 	bl	8001c7c <NVIC_EncodePriority>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff5d 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff31 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffa2 	bl	8001ce4 <SysTick_Config>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001db8:	f7ff f982 	bl	80010c0 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e099      	b.n	8001efc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de8:	e00f      	b.n	8001e0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dea:	f7ff f969 	bl	80010c0 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b05      	cmp	r3, #5
 8001df6:	d908      	bls.n	8001e0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2203      	movs	r2, #3
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e078      	b.n	8001efc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e8      	bne.n	8001dea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_DMA_Init+0x158>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d107      	bne.n	8001e74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f023 0307 	bic.w	r3, r3, #7
 8001e8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d117      	bne.n	8001ece <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00e      	beq.n	8001ece <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 fa91 	bl	80023d8 <DMA_CheckFifoParam>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2240      	movs	r2, #64	; 0x40
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e016      	b.n	8001efc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fa48 	bl	800236c <DMA_CalcBaseAndBitshift>
 8001edc:	4603      	mov	r3, r0
 8001ede:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee4:	223f      	movs	r2, #63	; 0x3f
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	f010803f 	.word	0xf010803f

08001f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_DMA_Start_IT+0x26>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e040      	b.n	8001fb0 <HAL_DMA_Start_IT+0xa8>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d12f      	bne.n	8001fa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2202      	movs	r2, #2
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 f9da 	bl	8002310 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	223f      	movs	r2, #63	; 0x3f
 8001f62:	409a      	lsls	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0216 	orr.w	r2, r2, #22
 8001f76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0208 	orr.w	r2, r2, #8
 8001f8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e005      	b.n	8001fae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
 8001fac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d004      	beq.n	8001fd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00c      	b.n	8001ff0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2205      	movs	r2, #5
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0201 	bic.w	r2, r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002008:	4b92      	ldr	r3, [pc, #584]	; (8002254 <HAL_DMA_IRQHandler+0x258>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a92      	ldr	r2, [pc, #584]	; (8002258 <HAL_DMA_IRQHandler+0x25c>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0a9b      	lsrs	r3, r3, #10
 8002014:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	2208      	movs	r2, #8
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d01a      	beq.n	8002068 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0204 	bic.w	r2, r2, #4
 800204e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	2208      	movs	r2, #8
 8002056:	409a      	lsls	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002060:	f043 0201 	orr.w	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	2201      	movs	r2, #1
 800206e:	409a      	lsls	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d012      	beq.n	800209e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	2201      	movs	r2, #1
 800208c:	409a      	lsls	r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	f043 0202 	orr.w	r2, r3, #2
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	2204      	movs	r2, #4
 80020a4:	409a      	lsls	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d012      	beq.n	80020d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00b      	beq.n	80020d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	2204      	movs	r2, #4
 80020c2:	409a      	lsls	r2, r3
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	f043 0204 	orr.w	r2, r3, #4
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	2210      	movs	r2, #16
 80020da:	409a      	lsls	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d043      	beq.n	800216c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d03c      	beq.n	800216c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f6:	2210      	movs	r2, #16
 80020f8:	409a      	lsls	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d018      	beq.n	800213e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d024      	beq.n	800216c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
 800212a:	e01f      	b.n	800216c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01b      	beq.n	800216c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
 800213c:	e016      	b.n	800216c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d107      	bne.n	800215c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0208 	bic.w	r2, r2, #8
 800215a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	2220      	movs	r2, #32
 8002172:	409a      	lsls	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 808e 	beq.w	800229a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 8086 	beq.w	800229a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	2220      	movs	r2, #32
 8002194:	409a      	lsls	r2, r3
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d136      	bne.n	8002214 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0216 	bic.w	r2, r2, #22
 80021b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <HAL_DMA_IRQHandler+0x1da>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0208 	bic.w	r2, r2, #8
 80021e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	223f      	movs	r2, #63	; 0x3f
 80021ec:	409a      	lsls	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002206:	2b00      	cmp	r3, #0
 8002208:	d07d      	beq.n	8002306 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
        }
        return;
 8002212:	e078      	b.n	8002306 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d01c      	beq.n	800225c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d108      	bne.n	8002242 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	2b00      	cmp	r3, #0
 8002236:	d030      	beq.n	800229a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
 8002240:	e02b      	b.n	800229a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d027      	beq.n	800229a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
 8002252:	e022      	b.n	800229a <HAL_DMA_IRQHandler+0x29e>
 8002254:	20000000 	.word	0x20000000
 8002258:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0210 	bic.w	r2, r2, #16
 8002278:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d032      	beq.n	8002308 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d022      	beq.n	80022f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2205      	movs	r2, #5
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0201 	bic.w	r2, r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d307      	bcc.n	80022e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f2      	bne.n	80022c6 <HAL_DMA_IRQHandler+0x2ca>
 80022e0:	e000      	b.n	80022e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
 8002304:	e000      	b.n	8002308 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002306:	bf00      	nop
    }
  }
}
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop

08002310 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800232c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b40      	cmp	r3, #64	; 0x40
 800233c:	d108      	bne.n	8002350 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800234e:	e007      	b.n	8002360 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	3b10      	subs	r3, #16
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <DMA_CalcBaseAndBitshift+0x64>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002386:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d909      	bls.n	80023ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023a2:	f023 0303 	bic.w	r3, r3, #3
 80023a6:	1d1a      	adds	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	659a      	str	r2, [r3, #88]	; 0x58
 80023ac:	e007      	b.n	80023be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023b6:	f023 0303 	bic.w	r3, r3, #3
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	aaaaaaab 	.word	0xaaaaaaab
 80023d4:	08005220 	.word	0x08005220

080023d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d11f      	bne.n	8002432 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d855      	bhi.n	80024a4 <DMA_CheckFifoParam+0xcc>
 80023f8:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <DMA_CheckFifoParam+0x28>)
 80023fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fe:	bf00      	nop
 8002400:	08002411 	.word	0x08002411
 8002404:	08002423 	.word	0x08002423
 8002408:	08002411 	.word	0x08002411
 800240c:	080024a5 	.word	0x080024a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d045      	beq.n	80024a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002420:	e042      	b.n	80024a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800242a:	d13f      	bne.n	80024ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002430:	e03c      	b.n	80024ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243a:	d121      	bne.n	8002480 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b03      	cmp	r3, #3
 8002440:	d836      	bhi.n	80024b0 <DMA_CheckFifoParam+0xd8>
 8002442:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <DMA_CheckFifoParam+0x70>)
 8002444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002448:	08002459 	.word	0x08002459
 800244c:	0800245f 	.word	0x0800245f
 8002450:	08002459 	.word	0x08002459
 8002454:	08002471 	.word	0x08002471
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
      break;
 800245c:	e02f      	b.n	80024be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d024      	beq.n	80024b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246e:	e021      	b.n	80024b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002478:	d11e      	bne.n	80024b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800247e:	e01b      	b.n	80024b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d902      	bls.n	800248c <DMA_CheckFifoParam+0xb4>
 8002486:	2b03      	cmp	r3, #3
 8002488:	d003      	beq.n	8002492 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800248a:	e018      	b.n	80024be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
      break;
 8002490:	e015      	b.n	80024be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00e      	beq.n	80024bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
      break;
 80024a2:	e00b      	b.n	80024bc <DMA_CheckFifoParam+0xe4>
      break;
 80024a4:	bf00      	nop
 80024a6:	e00a      	b.n	80024be <DMA_CheckFifoParam+0xe6>
      break;
 80024a8:	bf00      	nop
 80024aa:	e008      	b.n	80024be <DMA_CheckFifoParam+0xe6>
      break;
 80024ac:	bf00      	nop
 80024ae:	e006      	b.n	80024be <DMA_CheckFifoParam+0xe6>
      break;
 80024b0:	bf00      	nop
 80024b2:	e004      	b.n	80024be <DMA_CheckFifoParam+0xe6>
      break;
 80024b4:	bf00      	nop
 80024b6:	e002      	b.n	80024be <DMA_CheckFifoParam+0xe6>
      break;   
 80024b8:	bf00      	nop
 80024ba:	e000      	b.n	80024be <DMA_CheckFifoParam+0xe6>
      break;
 80024bc:	bf00      	nop
    }
  } 
  
  return status; 
 80024be:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	; 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e165      	b.n	80027b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e8:	2201      	movs	r2, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	429a      	cmp	r2, r3
 8002502:	f040 8154 	bne.w	80027ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d00b      	beq.n	8002526 <HAL_GPIO_Init+0x5a>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d007      	beq.n	8002526 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800251a:	2b11      	cmp	r3, #17
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b12      	cmp	r3, #18
 8002524:	d130      	bne.n	8002588 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 0201 	and.w	r2, r3, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0xfc>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b12      	cmp	r3, #18
 80025c6:	d123      	bne.n	8002610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	08da      	lsrs	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3208      	adds	r2, #8
 80025d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	220f      	movs	r2, #15
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	08da      	lsrs	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3208      	adds	r2, #8
 800260a:	69b9      	ldr	r1, [r7, #24]
 800260c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0203 	and.w	r2, r3, #3
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80ae 	beq.w	80027ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b5c      	ldr	r3, [pc, #368]	; (80027c8 <HAL_GPIO_Init+0x2fc>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	4a5b      	ldr	r2, [pc, #364]	; (80027c8 <HAL_GPIO_Init+0x2fc>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002660:	6453      	str	r3, [r2, #68]	; 0x44
 8002662:	4b59      	ldr	r3, [pc, #356]	; (80027c8 <HAL_GPIO_Init+0x2fc>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800266e:	4a57      	ldr	r2, [pc, #348]	; (80027cc <HAL_GPIO_Init+0x300>)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	220f      	movs	r2, #15
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4e      	ldr	r2, [pc, #312]	; (80027d0 <HAL_GPIO_Init+0x304>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d025      	beq.n	80026e6 <HAL_GPIO_Init+0x21a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4d      	ldr	r2, [pc, #308]	; (80027d4 <HAL_GPIO_Init+0x308>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d01f      	beq.n	80026e2 <HAL_GPIO_Init+0x216>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4c      	ldr	r2, [pc, #304]	; (80027d8 <HAL_GPIO_Init+0x30c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d019      	beq.n	80026de <HAL_GPIO_Init+0x212>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4b      	ldr	r2, [pc, #300]	; (80027dc <HAL_GPIO_Init+0x310>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d013      	beq.n	80026da <HAL_GPIO_Init+0x20e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4a      	ldr	r2, [pc, #296]	; (80027e0 <HAL_GPIO_Init+0x314>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00d      	beq.n	80026d6 <HAL_GPIO_Init+0x20a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a49      	ldr	r2, [pc, #292]	; (80027e4 <HAL_GPIO_Init+0x318>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d007      	beq.n	80026d2 <HAL_GPIO_Init+0x206>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a48      	ldr	r2, [pc, #288]	; (80027e8 <HAL_GPIO_Init+0x31c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d101      	bne.n	80026ce <HAL_GPIO_Init+0x202>
 80026ca:	2306      	movs	r3, #6
 80026cc:	e00c      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026ce:	2307      	movs	r3, #7
 80026d0:	e00a      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026d2:	2305      	movs	r3, #5
 80026d4:	e008      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026d6:	2304      	movs	r3, #4
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026da:	2303      	movs	r3, #3
 80026dc:	e004      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026de:	2302      	movs	r3, #2
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_GPIO_Init+0x21c>
 80026e6:	2300      	movs	r3, #0
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	f002 0203 	and.w	r2, r2, #3
 80026ee:	0092      	lsls	r2, r2, #2
 80026f0:	4093      	lsls	r3, r2
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f8:	4934      	ldr	r1, [pc, #208]	; (80027cc <HAL_GPIO_Init+0x300>)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	3302      	adds	r3, #2
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002706:	4b39      	ldr	r3, [pc, #228]	; (80027ec <HAL_GPIO_Init+0x320>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272a:	4a30      	ldr	r2, [pc, #192]	; (80027ec <HAL_GPIO_Init+0x320>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002730:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <HAL_GPIO_Init+0x320>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <HAL_GPIO_Init+0x320>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_GPIO_Init+0x320>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277e:	4a1b      	ldr	r2, [pc, #108]	; (80027ec <HAL_GPIO_Init+0x320>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_GPIO_Init+0x320>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a8:	4a10      	ldr	r2, [pc, #64]	; (80027ec <HAL_GPIO_Init+0x320>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3301      	adds	r3, #1
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	f67f ae96 	bls.w	80024e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027bc:	bf00      	nop
 80027be:	3724      	adds	r7, #36	; 0x24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40013800 	.word	0x40013800
 80027d0:	40020000 	.word	0x40020000
 80027d4:	40020400 	.word	0x40020400
 80027d8:	40020800 	.word	0x40020800
 80027dc:	40020c00 	.word	0x40020c00
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40021400 	.word	0x40021400
 80027e8:	40021800 	.word	0x40021800
 80027ec:	40013c00 	.word	0x40013c00

080027f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0cc      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002804:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d90c      	bls.n	800282c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b63      	ldr	r3, [pc, #396]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0b8      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002844:	4b59      	ldr	r3, [pc, #356]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a58      	ldr	r2, [pc, #352]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800284e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800285c:	4b53      	ldr	r3, [pc, #332]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a52      	ldr	r2, [pc, #328]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b50      	ldr	r3, [pc, #320]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	494d      	ldr	r1, [pc, #308]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d044      	beq.n	8002910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d119      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e07f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e06f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028be:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e067      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4934      	ldr	r1, [pc, #208]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e0:	f7fe fbee 	bl	80010c0 <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7fe fbea 	bl	80010c0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e04f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d20c      	bcs.n	8002938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e032      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4916      	ldr	r1, [pc, #88]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	490e      	ldr	r1, [pc, #56]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002976:	f000 f855 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 800297a:	4601      	mov	r1, r0
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	5cd3      	ldrb	r3, [r2, r3]
 800298a:	fa21 f303 	lsr.w	r3, r1, r3
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fb4e 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023c00 	.word	0x40023c00
 80029ac:	40023800 	.word	0x40023800
 80029b0:	08005208 	.word	0x08005208
 80029b4:	20000000 	.word	0x20000000
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000000 	.word	0x20000000

080029d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029d8:	f7ff fff0 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 80029dc:	4601      	mov	r1, r0
 80029de:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	0a9b      	lsrs	r3, r3, #10
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ea:	5cd3      	ldrb	r3, [r2, r3]
 80029ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800
 80029f8:	08005218 	.word	0x08005218

080029fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a00:	f7ff ffdc 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 8002a04:	4601      	mov	r1, r0
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0b5b      	lsrs	r3, r3, #13
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4a03      	ldr	r2, [pc, #12]	; (8002a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a12:	5cd3      	ldrb	r3, [r2, r3]
 8002a14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	08005218 	.word	0x08005218

08002a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a3e:	4b9f      	ldr	r3, [pc, #636]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x298>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	f200 8130 	bhi.w	8002cac <HAL_RCC_GetSysClockFreq+0x288>
 8002a4c:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <HAL_RCC_GetSysClockFreq+0x30>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002a89 	.word	0x08002a89
 8002a58:	08002cad 	.word	0x08002cad
 8002a5c:	08002cad 	.word	0x08002cad
 8002a60:	08002cad 	.word	0x08002cad
 8002a64:	08002a8f 	.word	0x08002a8f
 8002a68:	08002cad 	.word	0x08002cad
 8002a6c:	08002cad 	.word	0x08002cad
 8002a70:	08002cad 	.word	0x08002cad
 8002a74:	08002a95 	.word	0x08002a95
 8002a78:	08002cad 	.word	0x08002cad
 8002a7c:	08002cad 	.word	0x08002cad
 8002a80:	08002cad 	.word	0x08002cad
 8002a84:	08002ba3 	.word	0x08002ba3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b8d      	ldr	r3, [pc, #564]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002a8a:	613b      	str	r3, [r7, #16]
       break;
 8002a8c:	e111      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a8e:	4b8d      	ldr	r3, [pc, #564]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002a90:	613b      	str	r3, [r7, #16]
      break;
 8002a92:	e10e      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a94:	4b89      	ldr	r3, [pc, #548]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x298>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a9c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a9e:	4b87      	ldr	r3, [pc, #540]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x298>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d023      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aaa:	4b84      	ldr	r3, [pc, #528]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x298>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	099b      	lsrs	r3, r3, #6
 8002ab0:	f04f 0400 	mov.w	r4, #0
 8002ab4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	ea03 0501 	and.w	r5, r3, r1
 8002ac0:	ea04 0602 	and.w	r6, r4, r2
 8002ac4:	4a7f      	ldr	r2, [pc, #508]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002ac6:	fb02 f106 	mul.w	r1, r2, r6
 8002aca:	2200      	movs	r2, #0
 8002acc:	fb02 f205 	mul.w	r2, r2, r5
 8002ad0:	440a      	add	r2, r1
 8002ad2:	497c      	ldr	r1, [pc, #496]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002ad4:	fba5 0101 	umull	r0, r1, r5, r1
 8002ad8:	1853      	adds	r3, r2, r1
 8002ada:	4619      	mov	r1, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f04f 0400 	mov.w	r4, #0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	f7fd fbeb 	bl	80002c0 <__aeabi_uldivmod>
 8002aea:	4603      	mov	r3, r0
 8002aec:	460c      	mov	r4, r1
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e049      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af2:	4b72      	ldr	r3, [pc, #456]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x298>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	f04f 0400 	mov.w	r4, #0
 8002afc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	ea03 0501 	and.w	r5, r3, r1
 8002b08:	ea04 0602 	and.w	r6, r4, r2
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	4632      	mov	r2, r6
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	f04f 0400 	mov.w	r4, #0
 8002b18:	0154      	lsls	r4, r2, #5
 8002b1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b1e:	014b      	lsls	r3, r1, #5
 8002b20:	4619      	mov	r1, r3
 8002b22:	4622      	mov	r2, r4
 8002b24:	1b49      	subs	r1, r1, r5
 8002b26:	eb62 0206 	sbc.w	r2, r2, r6
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	f04f 0400 	mov.w	r4, #0
 8002b32:	0194      	lsls	r4, r2, #6
 8002b34:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b38:	018b      	lsls	r3, r1, #6
 8002b3a:	1a5b      	subs	r3, r3, r1
 8002b3c:	eb64 0402 	sbc.w	r4, r4, r2
 8002b40:	f04f 0100 	mov.w	r1, #0
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	00e2      	lsls	r2, r4, #3
 8002b4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b4e:	00d9      	lsls	r1, r3, #3
 8002b50:	460b      	mov	r3, r1
 8002b52:	4614      	mov	r4, r2
 8002b54:	195b      	adds	r3, r3, r5
 8002b56:	eb44 0406 	adc.w	r4, r4, r6
 8002b5a:	f04f 0100 	mov.w	r1, #0
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	02a2      	lsls	r2, r4, #10
 8002b64:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b68:	0299      	lsls	r1, r3, #10
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4614      	mov	r4, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	4621      	mov	r1, r4
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f04f 0400 	mov.w	r4, #0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	f7fd fba0 	bl	80002c0 <__aeabi_uldivmod>
 8002b80:	4603      	mov	r3, r0
 8002b82:	460c      	mov	r4, r1
 8002b84:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b86:	4b4d      	ldr	r3, [pc, #308]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x298>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	0c1b      	lsrs	r3, r3, #16
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	3301      	adds	r3, #1
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	613b      	str	r3, [r7, #16]
      break;
 8002ba0:	e087      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba2:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x298>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002baa:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x298>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d023      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb8:	4b40      	ldr	r3, [pc, #256]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x298>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	099b      	lsrs	r3, r3, #6
 8002bbe:	f04f 0400 	mov.w	r4, #0
 8002bc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	ea03 0501 	and.w	r5, r3, r1
 8002bce:	ea04 0602 	and.w	r6, r4, r2
 8002bd2:	4a3c      	ldr	r2, [pc, #240]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002bd4:	fb02 f106 	mul.w	r1, r2, r6
 8002bd8:	2200      	movs	r2, #0
 8002bda:	fb02 f205 	mul.w	r2, r2, r5
 8002bde:	440a      	add	r2, r1
 8002be0:	4938      	ldr	r1, [pc, #224]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002be2:	fba5 0101 	umull	r0, r1, r5, r1
 8002be6:	1853      	adds	r3, r2, r1
 8002be8:	4619      	mov	r1, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f04f 0400 	mov.w	r4, #0
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	f7fd fb64 	bl	80002c0 <__aeabi_uldivmod>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e049      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c00:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x298>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	f04f 0400 	mov.w	r4, #0
 8002c0a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	ea03 0501 	and.w	r5, r3, r1
 8002c16:	ea04 0602 	and.w	r6, r4, r2
 8002c1a:	4629      	mov	r1, r5
 8002c1c:	4632      	mov	r2, r6
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	f04f 0400 	mov.w	r4, #0
 8002c26:	0154      	lsls	r4, r2, #5
 8002c28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c2c:	014b      	lsls	r3, r1, #5
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4622      	mov	r2, r4
 8002c32:	1b49      	subs	r1, r1, r5
 8002c34:	eb62 0206 	sbc.w	r2, r2, r6
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	f04f 0400 	mov.w	r4, #0
 8002c40:	0194      	lsls	r4, r2, #6
 8002c42:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c46:	018b      	lsls	r3, r1, #6
 8002c48:	1a5b      	subs	r3, r3, r1
 8002c4a:	eb64 0402 	sbc.w	r4, r4, r2
 8002c4e:	f04f 0100 	mov.w	r1, #0
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	00e2      	lsls	r2, r4, #3
 8002c58:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c5c:	00d9      	lsls	r1, r3, #3
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4614      	mov	r4, r2
 8002c62:	195b      	adds	r3, r3, r5
 8002c64:	eb44 0406 	adc.w	r4, r4, r6
 8002c68:	f04f 0100 	mov.w	r1, #0
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	02a2      	lsls	r2, r4, #10
 8002c72:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c76:	0299      	lsls	r1, r3, #10
 8002c78:	460b      	mov	r3, r1
 8002c7a:	4614      	mov	r4, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	4621      	mov	r1, r4
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f04f 0400 	mov.w	r4, #0
 8002c86:	461a      	mov	r2, r3
 8002c88:	4623      	mov	r3, r4
 8002c8a:	f7fd fb19 	bl	80002c0 <__aeabi_uldivmod>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	460c      	mov	r4, r1
 8002c92:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x298>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	0f1b      	lsrs	r3, r3, #28
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	613b      	str	r3, [r7, #16]
      break;
 8002caa:	e002      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002cae:	613b      	str	r3, [r7, #16]
      break;
 8002cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb2:	693b      	ldr	r3, [r7, #16]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	017d7840 	.word	0x017d7840

08002cc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8083 	beq.w	8002de8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ce2:	4b95      	ldr	r3, [pc, #596]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d019      	beq.n	8002d22 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cee:	4b92      	ldr	r3, [pc, #584]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d106      	bne.n	8002d08 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cfa:	4b8f      	ldr	r3, [pc, #572]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d06:	d00c      	beq.n	8002d22 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d08:	4b8b      	ldr	r3, [pc, #556]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d112      	bne.n	8002d3a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d14:	4b88      	ldr	r3, [pc, #544]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d20:	d10b      	bne.n	8002d3a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d22:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d05b      	beq.n	8002de6 <HAL_RCC_OscConfig+0x11e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d157      	bne.n	8002de6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e216      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x8a>
 8002d44:	4b7c      	ldr	r3, [pc, #496]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a7b      	ldr	r2, [pc, #492]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	e01d      	b.n	8002d8e <HAL_RCC_OscConfig+0xc6>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCC_OscConfig+0xae>
 8002d5c:	4b76      	ldr	r3, [pc, #472]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a75      	ldr	r2, [pc, #468]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b73      	ldr	r3, [pc, #460]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a72      	ldr	r2, [pc, #456]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	e00b      	b.n	8002d8e <HAL_RCC_OscConfig+0xc6>
 8002d76:	4b70      	ldr	r3, [pc, #448]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6f      	ldr	r2, [pc, #444]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b6d      	ldr	r3, [pc, #436]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6c      	ldr	r2, [pc, #432]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d013      	beq.n	8002dbe <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7fe f993 	bl	80010c0 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9e:	f7fe f98f 	bl	80010c0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b64      	cmp	r3, #100	; 0x64
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e1db      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db0:	4b61      	ldr	r3, [pc, #388]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0xd6>
 8002dbc:	e014      	b.n	8002de8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fe f97f 	bl	80010c0 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc6:	f7fe f97b 	bl	80010c0 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b64      	cmp	r3, #100	; 0x64
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e1c7      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd8:	4b57      	ldr	r3, [pc, #348]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0xfe>
 8002de4:	e000      	b.n	8002de8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d06f      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002df4:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d017      	beq.n	8002e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e00:	4b4d      	ldr	r3, [pc, #308]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d105      	bne.n	8002e18 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e0c:	4b4a      	ldr	r3, [pc, #296]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e18:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d11c      	bne.n	8002e5e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e24:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d116      	bne.n	8002e5e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e30:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_OscConfig+0x180>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e18f      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4938      	ldr	r1, [pc, #224]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5c:	e03a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d020      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e66:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7fe f928 	bl	80010c0 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e74:	f7fe f924 	bl	80010c0 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e170      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e86:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e92:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4925      	ldr	r1, [pc, #148]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
 8002ea6:	e015      	b.n	8002ed4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <HAL_RCC_OscConfig+0x274>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eae:	f7fe f907 	bl	80010c0 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7fe f903 	bl	80010c0 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e14f      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d037      	beq.n	8002f50 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d016      	beq.n	8002f16 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_RCC_OscConfig+0x278>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eee:	f7fe f8e7 	bl	80010c0 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef6:	f7fe f8e3 	bl	80010c0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e12f      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x22e>
 8002f14:	e01c      	b.n	8002f50 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_RCC_OscConfig+0x278>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe f8d0 	bl	80010c0 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f22:	e00f      	b.n	8002f44 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f24:	f7fe f8cc 	bl	80010c0 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d908      	bls.n	8002f44 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e118      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	42470000 	.word	0x42470000
 8002f40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f44:	4b8a      	ldr	r3, [pc, #552]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8002f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e9      	bne.n	8002f24 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8097 	beq.w	800308c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f62:	4b83      	ldr	r3, [pc, #524]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10f      	bne.n	8002f8e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b7f      	ldr	r3, [pc, #508]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a7e      	ldr	r2, [pc, #504]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b7c      	ldr	r3, [pc, #496]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8e:	4b79      	ldr	r3, [pc, #484]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d118      	bne.n	8002fcc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f9a:	4b76      	ldr	r3, [pc, #472]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a75      	ldr	r2, [pc, #468]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa6:	f7fe f88b 	bl	80010c0 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fae:	f7fe f887 	bl	80010c0 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e0d3      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc0:	4b6c      	ldr	r3, [pc, #432]	; (8003174 <HAL_RCC_OscConfig+0x4ac>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d106      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x31a>
 8002fd4:	4b66      	ldr	r3, [pc, #408]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8002fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd8:	4a65      	ldr	r2, [pc, #404]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe0:	e01c      	b.n	800301c <HAL_RCC_OscConfig+0x354>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCC_OscConfig+0x33c>
 8002fea:	4b61      	ldr	r3, [pc, #388]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	4a60      	ldr	r2, [pc, #384]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff6:	4b5e      	ldr	r3, [pc, #376]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	4a5d      	ldr	r2, [pc, #372]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6713      	str	r3, [r2, #112]	; 0x70
 8003002:	e00b      	b.n	800301c <HAL_RCC_OscConfig+0x354>
 8003004:	4b5a      	ldr	r3, [pc, #360]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	4a59      	ldr	r2, [pc, #356]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	6713      	str	r3, [r2, #112]	; 0x70
 8003010:	4b57      	ldr	r3, [pc, #348]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	4a56      	ldr	r2, [pc, #344]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8003016:	f023 0304 	bic.w	r3, r3, #4
 800301a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d015      	beq.n	8003050 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7fe f84c 	bl	80010c0 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302a:	e00a      	b.n	8003042 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302c:	f7fe f848 	bl	80010c0 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	f241 3288 	movw	r2, #5000	; 0x1388
 800303a:	4293      	cmp	r3, r2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e092      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003042:	4b4b      	ldr	r3, [pc, #300]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0ee      	beq.n	800302c <HAL_RCC_OscConfig+0x364>
 800304e:	e014      	b.n	800307a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fe f836 	bl	80010c0 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003056:	e00a      	b.n	800306e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003058:	f7fe f832 	bl	80010c0 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e07c      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800306e:	4b40      	ldr	r3, [pc, #256]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1ee      	bne.n	8003058 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307a:	7dfb      	ldrb	r3, [r7, #23]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d105      	bne.n	800308c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003080:	4b3b      	ldr	r3, [pc, #236]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	4a3a      	ldr	r2, [pc, #232]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8003086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d068      	beq.n	8003166 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b08      	cmp	r3, #8
 800309e:	d060      	beq.n	8003162 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d145      	bne.n	8003134 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b33      	ldr	r3, [pc, #204]	; (8003178 <HAL_RCC_OscConfig+0x4b0>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ae:	f7fe f807 	bl	80010c0 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b6:	f7fe f803 	bl	80010c0 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e04f      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c8:	4b29      	ldr	r3, [pc, #164]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f0      	bne.n	80030b6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	019b      	lsls	r3, r3, #6
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	3b01      	subs	r3, #1
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	061b      	lsls	r3, r3, #24
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	071b      	lsls	r3, r3, #28
 8003100:	491b      	ldr	r1, [pc, #108]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003106:	4b1c      	ldr	r3, [pc, #112]	; (8003178 <HAL_RCC_OscConfig+0x4b0>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fd ffd8 	bl	80010c0 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003114:	f7fd ffd4 	bl	80010c0 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e020      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003126:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x44c>
 8003132:	e018      	b.n	8003166 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HAL_RCC_OscConfig+0x4b0>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fd ffc1 	bl	80010c0 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003142:	f7fd ffbd 	bl	80010c0 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e009      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_RCC_OscConfig+0x4a8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x47a>
 8003160:	e001      	b.n	8003166 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	40007000 	.word	0x40007000
 8003178:	42470060 	.word	0x42470060

0800317c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e01d      	b.n	80031ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd fd68 	bl	8000c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f000 fa14 	bl	80035e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b085      	sub	sp, #20
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b06      	cmp	r3, #6
 80031fa:	d007      	beq.n	800320c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b02      	cmp	r3, #2
 800322e:	d122      	bne.n	8003276 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b02      	cmp	r3, #2
 800323c:	d11b      	bne.n	8003276 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f06f 0202 	mvn.w	r2, #2
 8003246:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f9a5 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
 8003262:	e005      	b.n	8003270 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f997 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f9a8 	bl	80035c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b04      	cmp	r3, #4
 8003282:	d122      	bne.n	80032ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b04      	cmp	r3, #4
 8003290:	d11b      	bne.n	80032ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f06f 0204 	mvn.w	r2, #4
 800329a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f97b 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
 80032b6:	e005      	b.n	80032c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f96d 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f97e 	bl	80035c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d122      	bne.n	800331e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d11b      	bne.n	800331e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f06f 0208 	mvn.w	r2, #8
 80032ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2204      	movs	r2, #4
 80032f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f951 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
 800330a:	e005      	b.n	8003318 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f943 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f954 	bl	80035c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b10      	cmp	r3, #16
 800332a:	d122      	bne.n	8003372 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b10      	cmp	r3, #16
 8003338:	d11b      	bne.n	8003372 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f06f 0210 	mvn.w	r2, #16
 8003342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2208      	movs	r2, #8
 8003348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f927 	bl	80035ac <HAL_TIM_IC_CaptureCallback>
 800335e:	e005      	b.n	800336c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f919 	bl	8003598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f92a 	bl	80035c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d10e      	bne.n	800339e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d107      	bne.n	800339e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f06f 0201 	mvn.w	r2, #1
 8003396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fd fac3 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a8:	2b80      	cmp	r3, #128	; 0x80
 80033aa:	d10e      	bne.n	80033ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b6:	2b80      	cmp	r3, #128	; 0x80
 80033b8:	d107      	bne.n	80033ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 facf 	bl	8003968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d10e      	bne.n	80033f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d107      	bne.n	80033f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f8ef 	bl	80035d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b20      	cmp	r3, #32
 8003402:	d10e      	bne.n	8003422 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b20      	cmp	r3, #32
 8003410:	d107      	bne.n	8003422 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f06f 0220 	mvn.w	r2, #32
 800341a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fa99 	bl	8003954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_TIM_ConfigClockSource+0x18>
 800343e:	2302      	movs	r3, #2
 8003440:	e0a6      	b.n	8003590 <HAL_TIM_ConfigClockSource+0x166>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2202      	movs	r2, #2
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003460:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003468:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d067      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x120>
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d80b      	bhi.n	8003496 <HAL_TIM_ConfigClockSource+0x6c>
 800347e:	2b10      	cmp	r3, #16
 8003480:	d073      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x140>
 8003482:	2b10      	cmp	r3, #16
 8003484:	d802      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x62>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d06f      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800348a:	e078      	b.n	800357e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800348c:	2b20      	cmp	r3, #32
 800348e:	d06c      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x140>
 8003490:	2b30      	cmp	r3, #48	; 0x30
 8003492:	d06a      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003494:	e073      	b.n	800357e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003496:	2b70      	cmp	r3, #112	; 0x70
 8003498:	d00d      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x8c>
 800349a:	2b70      	cmp	r3, #112	; 0x70
 800349c:	d804      	bhi.n	80034a8 <HAL_TIM_ConfigClockSource+0x7e>
 800349e:	2b50      	cmp	r3, #80	; 0x50
 80034a0:	d033      	beq.n	800350a <HAL_TIM_ConfigClockSource+0xe0>
 80034a2:	2b60      	cmp	r3, #96	; 0x60
 80034a4:	d041      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80034a6:	e06a      	b.n	800357e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ac:	d066      	beq.n	800357c <HAL_TIM_ConfigClockSource+0x152>
 80034ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b2:	d017      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80034b4:	e063      	b.n	800357e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f000 f9a9 	bl	800381c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	609a      	str	r2, [r3, #8]
      break;
 80034e2:	e04c      	b.n	800357e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f000 f992 	bl	800381c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003506:	609a      	str	r2, [r3, #8]
      break;
 8003508:	e039      	b.n	800357e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	461a      	mov	r2, r3
 8003518:	f000 f906 	bl	8003728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2150      	movs	r1, #80	; 0x50
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f95f 	bl	80037e6 <TIM_ITRx_SetConfig>
      break;
 8003528:	e029      	b.n	800357e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f000 f925 	bl	8003786 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2160      	movs	r1, #96	; 0x60
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f94f 	bl	80037e6 <TIM_ITRx_SetConfig>
      break;
 8003548:	e019      	b.n	800357e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	f000 f8e6 	bl	8003728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2140      	movs	r1, #64	; 0x40
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f93f 	bl	80037e6 <TIM_ITRx_SetConfig>
      break;
 8003568:	e009      	b.n	800357e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4619      	mov	r1, r3
 8003574:	4610      	mov	r0, r2
 8003576:	f000 f936 	bl	80037e6 <TIM_ITRx_SetConfig>
      break;
 800357a:	e000      	b.n	800357e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800357c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a40      	ldr	r2, [pc, #256]	; (80036fc <TIM_Base_SetConfig+0x114>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d013      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003606:	d00f      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a3d      	ldr	r2, [pc, #244]	; (8003700 <TIM_Base_SetConfig+0x118>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00b      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a3c      	ldr	r2, [pc, #240]	; (8003704 <TIM_Base_SetConfig+0x11c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3b      	ldr	r2, [pc, #236]	; (8003708 <TIM_Base_SetConfig+0x120>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_Base_SetConfig+0x40>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a3a      	ldr	r2, [pc, #232]	; (800370c <TIM_Base_SetConfig+0x124>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d108      	bne.n	800363a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2f      	ldr	r2, [pc, #188]	; (80036fc <TIM_Base_SetConfig+0x114>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d02b      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003648:	d027      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a2c      	ldr	r2, [pc, #176]	; (8003700 <TIM_Base_SetConfig+0x118>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d023      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2b      	ldr	r2, [pc, #172]	; (8003704 <TIM_Base_SetConfig+0x11c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d01f      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2a      	ldr	r2, [pc, #168]	; (8003708 <TIM_Base_SetConfig+0x120>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01b      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a29      	ldr	r2, [pc, #164]	; (800370c <TIM_Base_SetConfig+0x124>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d017      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a28      	ldr	r2, [pc, #160]	; (8003710 <TIM_Base_SetConfig+0x128>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a27      	ldr	r2, [pc, #156]	; (8003714 <TIM_Base_SetConfig+0x12c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00f      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a26      	ldr	r2, [pc, #152]	; (8003718 <TIM_Base_SetConfig+0x130>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00b      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a25      	ldr	r2, [pc, #148]	; (800371c <TIM_Base_SetConfig+0x134>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a24      	ldr	r2, [pc, #144]	; (8003720 <TIM_Base_SetConfig+0x138>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a23      	ldr	r2, [pc, #140]	; (8003724 <TIM_Base_SetConfig+0x13c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d108      	bne.n	80036ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a0a      	ldr	r2, [pc, #40]	; (80036fc <TIM_Base_SetConfig+0x114>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_Base_SetConfig+0xf8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a0c      	ldr	r2, [pc, #48]	; (800370c <TIM_Base_SetConfig+0x124>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d103      	bne.n	80036e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	615a      	str	r2, [r3, #20]
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800
 8003708:	40000c00 	.word	0x40000c00
 800370c:	40010400 	.word	0x40010400
 8003710:	40014000 	.word	0x40014000
 8003714:	40014400 	.word	0x40014400
 8003718:	40014800 	.word	0x40014800
 800371c:	40001800 	.word	0x40001800
 8003720:	40001c00 	.word	0x40001c00
 8003724:	40002000 	.word	0x40002000

08003728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f023 0201 	bic.w	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f023 030a 	bic.w	r3, r3, #10
 8003764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	621a      	str	r2, [r3, #32]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003786:	b480      	push	{r7}
 8003788:	b087      	sub	sp, #28
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f023 0210 	bic.w	r2, r3, #16
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	031b      	lsls	r3, r3, #12
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	621a      	str	r2, [r3, #32]
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b085      	sub	sp, #20
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	f043 0307 	orr.w	r3, r3, #7
 8003808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	021a      	lsls	r2, r3, #8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	431a      	orrs	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4313      	orrs	r3, r2
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	609a      	str	r2, [r3, #8]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003870:	2302      	movs	r3, #2
 8003872:	e05a      	b.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a21      	ldr	r2, [pc, #132]	; (8003938 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d022      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d01d      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1d      	ldr	r2, [pc, #116]	; (800393c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d018      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00e      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a18      	ldr	r2, [pc, #96]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a17      	ldr	r2, [pc, #92]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a15      	ldr	r2, [pc, #84]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d10c      	bne.n	8003918 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	4313      	orrs	r3, r2
 800390e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800
 8003944:	40000c00 	.word	0x40000c00
 8003948:	40010400 	.word	0x40010400
 800394c:	40014000 	.word	0x40014000
 8003950:	40001800 	.word	0x40001800

08003954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e03f      	b.n	8003a0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd fa00 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	; 0x24
 80039ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fc37 	bl	8004234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d153      	bne.n	8003ada <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <HAL_UART_Transmit_DMA+0x26>
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e04c      	b.n	8003adc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_UART_Transmit_DMA+0x38>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e045      	b.n	8003adc <HAL_UART_Transmit_DMA+0xc4>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	88fa      	ldrh	r2, [r7, #6]
 8003a62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	88fa      	ldrh	r2, [r7, #6]
 8003a68:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2221      	movs	r2, #33	; 0x21
 8003a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	4a19      	ldr	r2, [pc, #100]	; (8003ae4 <HAL_UART_Transmit_DMA+0xcc>)
 8003a7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <HAL_UART_Transmit_DMA+0xd0>)
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	4a17      	ldr	r2, [pc, #92]	; (8003aec <HAL_UART_Transmit_DMA+0xd4>)
 8003a8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	2200      	movs	r2, #0
 8003a96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003a98:	f107 0308 	add.w	r3, r7, #8
 8003a9c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	6819      	ldr	r1, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	461a      	mov	r2, r3
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	f7fe fa2a 	bl	8001f08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003abc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ad4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	08003e41 	.word	0x08003e41
 8003ae8:	08003e93 	.word	0x08003e93
 8003aec:	08003f33 	.word	0x08003f33

08003af0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b20      	cmp	r3, #32
 8003b08:	d166      	bne.n	8003bd8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_UART_Receive_DMA+0x26>
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e05f      	b.n	8003bda <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_UART_Receive_DMA+0x38>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e058      	b.n	8003bda <HAL_UART_Receive_DMA+0xea>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	88fa      	ldrh	r2, [r7, #6]
 8003b3a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2222      	movs	r2, #34	; 0x22
 8003b46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	4a25      	ldr	r2, [pc, #148]	; (8003be4 <HAL_UART_Receive_DMA+0xf4>)
 8003b50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b56:	4a24      	ldr	r2, [pc, #144]	; (8003be8 <HAL_UART_Receive_DMA+0xf8>)
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	4a23      	ldr	r2, [pc, #140]	; (8003bec <HAL_UART_Receive_DMA+0xfc>)
 8003b60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	2200      	movs	r2, #0
 8003b68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003b6a:	f107 0308 	add.w	r3, r7, #8
 8003b6e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	f7fe f9c1 	bl	8001f08 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bb2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	08003eaf 	.word	0x08003eaf
 8003be8:	08003f17 	.word	0x08003f17
 8003bec:	08003f33 	.word	0x08003f33

08003bf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10d      	bne.n	8003c42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_UART_IRQHandler+0x52>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fa79 	bl	8004132 <UART_Receive_IT>
      return;
 8003c40:	e0d1      	b.n	8003de6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80b0 	beq.w	8003daa <HAL_UART_IRQHandler+0x1ba>
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <HAL_UART_IRQHandler+0x70>
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 80a5 	beq.w	8003daa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_UART_IRQHandler+0x90>
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	f043 0201 	orr.w	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_UART_IRQHandler+0xb0>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c98:	f043 0202 	orr.w	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_UART_IRQHandler+0xd0>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	f043 0204 	orr.w	r2, r3, #4
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00f      	beq.n	8003cea <HAL_UART_IRQHandler+0xfa>
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d104      	bne.n	8003cde <HAL_UART_IRQHandler+0xee>
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	f043 0208 	orr.w	r2, r3, #8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d078      	beq.n	8003de4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <HAL_UART_IRQHandler+0x11c>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa13 	bl	8004132 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <HAL_UART_IRQHandler+0x144>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d031      	beq.n	8003d98 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f95c 	bl	8003ff2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d123      	bne.n	8003d90 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d56:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d013      	beq.n	8003d88 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d64:	4a21      	ldr	r2, [pc, #132]	; (8003dec <HAL_UART_IRQHandler+0x1fc>)
 8003d66:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe f923 	bl	8001fb8 <HAL_DMA_Abort_IT>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d016      	beq.n	8003da6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d82:	4610      	mov	r0, r2
 8003d84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d86:	e00e      	b.n	8003da6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f84f 	bl	8003e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d8e:	e00a      	b.n	8003da6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f84b 	bl	8003e2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d96:	e006      	b.n	8003da6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f847 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003da4:	e01e      	b.n	8003de4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da6:	bf00      	nop
    return;
 8003da8:	e01c      	b.n	8003de4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x1d6>
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f949 	bl	8004056 <UART_Transmit_IT>
    return;
 8003dc4:	e00f      	b.n	8003de6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1f6>
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f991 	bl	8004102 <UART_EndTransmit_IT>
    return;
 8003de0:	bf00      	nop
 8003de2:	e000      	b.n	8003de6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003de4:	bf00      	nop
  }
}
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	0800402f 	.word	0x0800402f

08003df0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d113      	bne.n	8003e84 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e70:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e80:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e82:	e002      	b.n	8003e8a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7ff ffb3 	bl	8003df0 <HAL_UART_TxCpltCallback>
}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff ffaf 	bl	8003e04 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d11e      	bne.n	8003f08 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ede:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0201 	bic.w	r2, r2, #1
 8003eee:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efe:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7fc fd21 	bl	8000950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff ff77 	bl	8003e18 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	bf0c      	ite	eq
 8003f52:	2301      	moveq	r3, #1
 8003f54:	2300      	movne	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b21      	cmp	r3, #33	; 0x21
 8003f64:	d108      	bne.n	8003f78 <UART_DMAError+0x46>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d005      	beq.n	8003f78 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f72:	68b8      	ldr	r0, [r7, #8]
 8003f74:	f000 f827 	bl	8003fc6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f82:	2b40      	cmp	r3, #64	; 0x40
 8003f84:	bf0c      	ite	eq
 8003f86:	2301      	moveq	r3, #1
 8003f88:	2300      	movne	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b22      	cmp	r3, #34	; 0x22
 8003f98:	d108      	bne.n	8003fac <UART_DMAError+0x7a>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003fa6:	68b8      	ldr	r0, [r7, #8]
 8003fa8:	f000 f823 	bl	8003ff2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	f043 0210 	orr.w	r2, r3, #16
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fb8:	68b8      	ldr	r0, [r7, #8]
 8003fba:	f7ff ff37 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003fdc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004008:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7ff feef 	bl	8003e2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b21      	cmp	r3, #33	; 0x21
 8004068:	d144      	bne.n	80040f4 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004072:	d11a      	bne.n	80040aa <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004088:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	1c9a      	adds	r2, r3, #2
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	621a      	str	r2, [r3, #32]
 800409c:	e00e      	b.n	80040bc <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	621a      	str	r2, [r3, #32]
 80040a8:	e008      	b.n	80040bc <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	1c59      	adds	r1, r3, #1
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6211      	str	r1, [r2, #32]
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	4619      	mov	r1, r3
 80040ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10f      	bne.n	80040f0 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004118:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fe64 	bl	8003df0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b22      	cmp	r3, #34	; 0x22
 8004144:	d171      	bne.n	800422a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414e:	d123      	bne.n	8004198 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10e      	bne.n	800417c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	1c9a      	adds	r2, r3, #2
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	629a      	str	r2, [r3, #40]	; 0x28
 800417a:	e029      	b.n	80041d0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	b29b      	uxth	r3, r3
 8004184:	b2db      	uxtb	r3, r3
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	629a      	str	r2, [r3, #40]	; 0x28
 8004196:	e01b      	b.n	80041d0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6858      	ldr	r0, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	1c59      	adds	r1, r3, #1
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6291      	str	r1, [r2, #40]	; 0x28
 80041b0:	b2c2      	uxtb	r2, r0
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	e00c      	b.n	80041d0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c2:	1c58      	adds	r0, r3, #1
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	6288      	str	r0, [r1, #40]	; 0x28
 80041c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29b      	uxth	r3, r3
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4619      	mov	r1, r3
 80041de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d120      	bne.n	8004226 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0220 	bic.w	r2, r2, #32
 80041f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	695a      	ldr	r2, [r3, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7fc fb97 	bl	8000950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e002      	b.n	800422c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e000      	b.n	800422c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800422a:	2302      	movs	r3, #2
  }
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	431a      	orrs	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004276:	f023 030c 	bic.w	r3, r3, #12
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6812      	ldr	r2, [r2, #0]
 800427e:	68f9      	ldr	r1, [r7, #12]
 8004280:	430b      	orrs	r3, r1
 8004282:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a2:	f040 818b 	bne.w	80045bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4ac1      	ldr	r2, [pc, #772]	; (80045b0 <UART_SetConfig+0x37c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d005      	beq.n	80042bc <UART_SetConfig+0x88>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4abf      	ldr	r2, [pc, #764]	; (80045b4 <UART_SetConfig+0x380>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	f040 80bd 	bne.w	8004436 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042bc:	f7fe fb9e 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 80042c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	461d      	mov	r5, r3
 80042c6:	f04f 0600 	mov.w	r6, #0
 80042ca:	46a8      	mov	r8, r5
 80042cc:	46b1      	mov	r9, r6
 80042ce:	eb18 0308 	adds.w	r3, r8, r8
 80042d2:	eb49 0409 	adc.w	r4, r9, r9
 80042d6:	4698      	mov	r8, r3
 80042d8:	46a1      	mov	r9, r4
 80042da:	eb18 0805 	adds.w	r8, r8, r5
 80042de:	eb49 0906 	adc.w	r9, r9, r6
 80042e2:	f04f 0100 	mov.w	r1, #0
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042f6:	4688      	mov	r8, r1
 80042f8:	4691      	mov	r9, r2
 80042fa:	eb18 0005 	adds.w	r0, r8, r5
 80042fe:	eb49 0106 	adc.w	r1, r9, r6
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	461d      	mov	r5, r3
 8004308:	f04f 0600 	mov.w	r6, #0
 800430c:	196b      	adds	r3, r5, r5
 800430e:	eb46 0406 	adc.w	r4, r6, r6
 8004312:	461a      	mov	r2, r3
 8004314:	4623      	mov	r3, r4
 8004316:	f7fb ffd3 	bl	80002c0 <__aeabi_uldivmod>
 800431a:	4603      	mov	r3, r0
 800431c:	460c      	mov	r4, r1
 800431e:	461a      	mov	r2, r3
 8004320:	4ba5      	ldr	r3, [pc, #660]	; (80045b8 <UART_SetConfig+0x384>)
 8004322:	fba3 2302 	umull	r2, r3, r3, r2
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	461d      	mov	r5, r3
 8004330:	f04f 0600 	mov.w	r6, #0
 8004334:	46a9      	mov	r9, r5
 8004336:	46b2      	mov	sl, r6
 8004338:	eb19 0309 	adds.w	r3, r9, r9
 800433c:	eb4a 040a 	adc.w	r4, sl, sl
 8004340:	4699      	mov	r9, r3
 8004342:	46a2      	mov	sl, r4
 8004344:	eb19 0905 	adds.w	r9, r9, r5
 8004348:	eb4a 0a06 	adc.w	sl, sl, r6
 800434c:	f04f 0100 	mov.w	r1, #0
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004358:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800435c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004360:	4689      	mov	r9, r1
 8004362:	4692      	mov	sl, r2
 8004364:	eb19 0005 	adds.w	r0, r9, r5
 8004368:	eb4a 0106 	adc.w	r1, sl, r6
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	461d      	mov	r5, r3
 8004372:	f04f 0600 	mov.w	r6, #0
 8004376:	196b      	adds	r3, r5, r5
 8004378:	eb46 0406 	adc.w	r4, r6, r6
 800437c:	461a      	mov	r2, r3
 800437e:	4623      	mov	r3, r4
 8004380:	f7fb ff9e 	bl	80002c0 <__aeabi_uldivmod>
 8004384:	4603      	mov	r3, r0
 8004386:	460c      	mov	r4, r1
 8004388:	461a      	mov	r2, r3
 800438a:	4b8b      	ldr	r3, [pc, #556]	; (80045b8 <UART_SetConfig+0x384>)
 800438c:	fba3 1302 	umull	r1, r3, r3, r2
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	2164      	movs	r1, #100	; 0x64
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	3332      	adds	r3, #50	; 0x32
 800439e:	4a86      	ldr	r2, [pc, #536]	; (80045b8 <UART_SetConfig+0x384>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043ac:	4498      	add	r8, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	461d      	mov	r5, r3
 80043b2:	f04f 0600 	mov.w	r6, #0
 80043b6:	46a9      	mov	r9, r5
 80043b8:	46b2      	mov	sl, r6
 80043ba:	eb19 0309 	adds.w	r3, r9, r9
 80043be:	eb4a 040a 	adc.w	r4, sl, sl
 80043c2:	4699      	mov	r9, r3
 80043c4:	46a2      	mov	sl, r4
 80043c6:	eb19 0905 	adds.w	r9, r9, r5
 80043ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80043ce:	f04f 0100 	mov.w	r1, #0
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043e2:	4689      	mov	r9, r1
 80043e4:	4692      	mov	sl, r2
 80043e6:	eb19 0005 	adds.w	r0, r9, r5
 80043ea:	eb4a 0106 	adc.w	r1, sl, r6
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	461d      	mov	r5, r3
 80043f4:	f04f 0600 	mov.w	r6, #0
 80043f8:	196b      	adds	r3, r5, r5
 80043fa:	eb46 0406 	adc.w	r4, r6, r6
 80043fe:	461a      	mov	r2, r3
 8004400:	4623      	mov	r3, r4
 8004402:	f7fb ff5d 	bl	80002c0 <__aeabi_uldivmod>
 8004406:	4603      	mov	r3, r0
 8004408:	460c      	mov	r4, r1
 800440a:	461a      	mov	r2, r3
 800440c:	4b6a      	ldr	r3, [pc, #424]	; (80045b8 <UART_SetConfig+0x384>)
 800440e:	fba3 1302 	umull	r1, r3, r3, r2
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2164      	movs	r1, #100	; 0x64
 8004416:	fb01 f303 	mul.w	r3, r1, r3
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	3332      	adds	r3, #50	; 0x32
 8004420:	4a65      	ldr	r2, [pc, #404]	; (80045b8 <UART_SetConfig+0x384>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 0207 	and.w	r2, r3, #7
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4442      	add	r2, r8
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	e26f      	b.n	8004916 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004436:	f7fe facd 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 800443a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	461d      	mov	r5, r3
 8004440:	f04f 0600 	mov.w	r6, #0
 8004444:	46a8      	mov	r8, r5
 8004446:	46b1      	mov	r9, r6
 8004448:	eb18 0308 	adds.w	r3, r8, r8
 800444c:	eb49 0409 	adc.w	r4, r9, r9
 8004450:	4698      	mov	r8, r3
 8004452:	46a1      	mov	r9, r4
 8004454:	eb18 0805 	adds.w	r8, r8, r5
 8004458:	eb49 0906 	adc.w	r9, r9, r6
 800445c:	f04f 0100 	mov.w	r1, #0
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004468:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800446c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004470:	4688      	mov	r8, r1
 8004472:	4691      	mov	r9, r2
 8004474:	eb18 0005 	adds.w	r0, r8, r5
 8004478:	eb49 0106 	adc.w	r1, r9, r6
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	461d      	mov	r5, r3
 8004482:	f04f 0600 	mov.w	r6, #0
 8004486:	196b      	adds	r3, r5, r5
 8004488:	eb46 0406 	adc.w	r4, r6, r6
 800448c:	461a      	mov	r2, r3
 800448e:	4623      	mov	r3, r4
 8004490:	f7fb ff16 	bl	80002c0 <__aeabi_uldivmod>
 8004494:	4603      	mov	r3, r0
 8004496:	460c      	mov	r4, r1
 8004498:	461a      	mov	r2, r3
 800449a:	4b47      	ldr	r3, [pc, #284]	; (80045b8 <UART_SetConfig+0x384>)
 800449c:	fba3 2302 	umull	r2, r3, r3, r2
 80044a0:	095b      	lsrs	r3, r3, #5
 80044a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	461d      	mov	r5, r3
 80044aa:	f04f 0600 	mov.w	r6, #0
 80044ae:	46a9      	mov	r9, r5
 80044b0:	46b2      	mov	sl, r6
 80044b2:	eb19 0309 	adds.w	r3, r9, r9
 80044b6:	eb4a 040a 	adc.w	r4, sl, sl
 80044ba:	4699      	mov	r9, r3
 80044bc:	46a2      	mov	sl, r4
 80044be:	eb19 0905 	adds.w	r9, r9, r5
 80044c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044da:	4689      	mov	r9, r1
 80044dc:	4692      	mov	sl, r2
 80044de:	eb19 0005 	adds.w	r0, r9, r5
 80044e2:	eb4a 0106 	adc.w	r1, sl, r6
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	461d      	mov	r5, r3
 80044ec:	f04f 0600 	mov.w	r6, #0
 80044f0:	196b      	adds	r3, r5, r5
 80044f2:	eb46 0406 	adc.w	r4, r6, r6
 80044f6:	461a      	mov	r2, r3
 80044f8:	4623      	mov	r3, r4
 80044fa:	f7fb fee1 	bl	80002c0 <__aeabi_uldivmod>
 80044fe:	4603      	mov	r3, r0
 8004500:	460c      	mov	r4, r1
 8004502:	461a      	mov	r2, r3
 8004504:	4b2c      	ldr	r3, [pc, #176]	; (80045b8 <UART_SetConfig+0x384>)
 8004506:	fba3 1302 	umull	r1, r3, r3, r2
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2164      	movs	r1, #100	; 0x64
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	3332      	adds	r3, #50	; 0x32
 8004518:	4a27      	ldr	r2, [pc, #156]	; (80045b8 <UART_SetConfig+0x384>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004526:	4498      	add	r8, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	461d      	mov	r5, r3
 800452c:	f04f 0600 	mov.w	r6, #0
 8004530:	46a9      	mov	r9, r5
 8004532:	46b2      	mov	sl, r6
 8004534:	eb19 0309 	adds.w	r3, r9, r9
 8004538:	eb4a 040a 	adc.w	r4, sl, sl
 800453c:	4699      	mov	r9, r3
 800453e:	46a2      	mov	sl, r4
 8004540:	eb19 0905 	adds.w	r9, r9, r5
 8004544:	eb4a 0a06 	adc.w	sl, sl, r6
 8004548:	f04f 0100 	mov.w	r1, #0
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004554:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004558:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800455c:	4689      	mov	r9, r1
 800455e:	4692      	mov	sl, r2
 8004560:	eb19 0005 	adds.w	r0, r9, r5
 8004564:	eb4a 0106 	adc.w	r1, sl, r6
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	461d      	mov	r5, r3
 800456e:	f04f 0600 	mov.w	r6, #0
 8004572:	196b      	adds	r3, r5, r5
 8004574:	eb46 0406 	adc.w	r4, r6, r6
 8004578:	461a      	mov	r2, r3
 800457a:	4623      	mov	r3, r4
 800457c:	f7fb fea0 	bl	80002c0 <__aeabi_uldivmod>
 8004580:	4603      	mov	r3, r0
 8004582:	460c      	mov	r4, r1
 8004584:	461a      	mov	r2, r3
 8004586:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <UART_SetConfig+0x384>)
 8004588:	fba3 1302 	umull	r1, r3, r3, r2
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	2164      	movs	r1, #100	; 0x64
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	3332      	adds	r3, #50	; 0x32
 800459a:	4a07      	ldr	r2, [pc, #28]	; (80045b8 <UART_SetConfig+0x384>)
 800459c:	fba2 2303 	umull	r2, r3, r2, r3
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	f003 0207 	and.w	r2, r3, #7
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4442      	add	r2, r8
 80045ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80045ae:	e1b2      	b.n	8004916 <UART_SetConfig+0x6e2>
 80045b0:	40011000 	.word	0x40011000
 80045b4:	40011400 	.word	0x40011400
 80045b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4ad7      	ldr	r2, [pc, #860]	; (8004920 <UART_SetConfig+0x6ec>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d005      	beq.n	80045d2 <UART_SetConfig+0x39e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4ad6      	ldr	r2, [pc, #856]	; (8004924 <UART_SetConfig+0x6f0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	f040 80d1 	bne.w	8004774 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80045d2:	f7fe fa13 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 80045d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	469a      	mov	sl, r3
 80045dc:	f04f 0b00 	mov.w	fp, #0
 80045e0:	46d0      	mov	r8, sl
 80045e2:	46d9      	mov	r9, fp
 80045e4:	eb18 0308 	adds.w	r3, r8, r8
 80045e8:	eb49 0409 	adc.w	r4, r9, r9
 80045ec:	4698      	mov	r8, r3
 80045ee:	46a1      	mov	r9, r4
 80045f0:	eb18 080a 	adds.w	r8, r8, sl
 80045f4:	eb49 090b 	adc.w	r9, r9, fp
 80045f8:	f04f 0100 	mov.w	r1, #0
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004604:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004608:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800460c:	4688      	mov	r8, r1
 800460e:	4691      	mov	r9, r2
 8004610:	eb1a 0508 	adds.w	r5, sl, r8
 8004614:	eb4b 0609 	adc.w	r6, fp, r9
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4619      	mov	r1, r3
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	f04f 0400 	mov.w	r4, #0
 800462a:	0094      	lsls	r4, r2, #2
 800462c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004630:	008b      	lsls	r3, r1, #2
 8004632:	461a      	mov	r2, r3
 8004634:	4623      	mov	r3, r4
 8004636:	4628      	mov	r0, r5
 8004638:	4631      	mov	r1, r6
 800463a:	f7fb fe41 	bl	80002c0 <__aeabi_uldivmod>
 800463e:	4603      	mov	r3, r0
 8004640:	460c      	mov	r4, r1
 8004642:	461a      	mov	r2, r3
 8004644:	4bb8      	ldr	r3, [pc, #736]	; (8004928 <UART_SetConfig+0x6f4>)
 8004646:	fba3 2302 	umull	r2, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	469b      	mov	fp, r3
 8004654:	f04f 0c00 	mov.w	ip, #0
 8004658:	46d9      	mov	r9, fp
 800465a:	46e2      	mov	sl, ip
 800465c:	eb19 0309 	adds.w	r3, r9, r9
 8004660:	eb4a 040a 	adc.w	r4, sl, sl
 8004664:	4699      	mov	r9, r3
 8004666:	46a2      	mov	sl, r4
 8004668:	eb19 090b 	adds.w	r9, r9, fp
 800466c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004670:	f04f 0100 	mov.w	r1, #0
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800467c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004680:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004684:	4689      	mov	r9, r1
 8004686:	4692      	mov	sl, r2
 8004688:	eb1b 0509 	adds.w	r5, fp, r9
 800468c:	eb4c 060a 	adc.w	r6, ip, sl
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	4619      	mov	r1, r3
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	f04f 0400 	mov.w	r4, #0
 80046a2:	0094      	lsls	r4, r2, #2
 80046a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046a8:	008b      	lsls	r3, r1, #2
 80046aa:	461a      	mov	r2, r3
 80046ac:	4623      	mov	r3, r4
 80046ae:	4628      	mov	r0, r5
 80046b0:	4631      	mov	r1, r6
 80046b2:	f7fb fe05 	bl	80002c0 <__aeabi_uldivmod>
 80046b6:	4603      	mov	r3, r0
 80046b8:	460c      	mov	r4, r1
 80046ba:	461a      	mov	r2, r3
 80046bc:	4b9a      	ldr	r3, [pc, #616]	; (8004928 <UART_SetConfig+0x6f4>)
 80046be:	fba3 1302 	umull	r1, r3, r3, r2
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2164      	movs	r1, #100	; 0x64
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	3332      	adds	r3, #50	; 0x32
 80046d0:	4a95      	ldr	r2, [pc, #596]	; (8004928 <UART_SetConfig+0x6f4>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046dc:	4498      	add	r8, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	469b      	mov	fp, r3
 80046e2:	f04f 0c00 	mov.w	ip, #0
 80046e6:	46d9      	mov	r9, fp
 80046e8:	46e2      	mov	sl, ip
 80046ea:	eb19 0309 	adds.w	r3, r9, r9
 80046ee:	eb4a 040a 	adc.w	r4, sl, sl
 80046f2:	4699      	mov	r9, r3
 80046f4:	46a2      	mov	sl, r4
 80046f6:	eb19 090b 	adds.w	r9, r9, fp
 80046fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046fe:	f04f 0100 	mov.w	r1, #0
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800470a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800470e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004712:	4689      	mov	r9, r1
 8004714:	4692      	mov	sl, r2
 8004716:	eb1b 0509 	adds.w	r5, fp, r9
 800471a:	eb4c 060a 	adc.w	r6, ip, sl
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4619      	mov	r1, r3
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	f04f 0400 	mov.w	r4, #0
 8004730:	0094      	lsls	r4, r2, #2
 8004732:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004736:	008b      	lsls	r3, r1, #2
 8004738:	461a      	mov	r2, r3
 800473a:	4623      	mov	r3, r4
 800473c:	4628      	mov	r0, r5
 800473e:	4631      	mov	r1, r6
 8004740:	f7fb fdbe 	bl	80002c0 <__aeabi_uldivmod>
 8004744:	4603      	mov	r3, r0
 8004746:	460c      	mov	r4, r1
 8004748:	461a      	mov	r2, r3
 800474a:	4b77      	ldr	r3, [pc, #476]	; (8004928 <UART_SetConfig+0x6f4>)
 800474c:	fba3 1302 	umull	r1, r3, r3, r2
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	2164      	movs	r1, #100	; 0x64
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	3332      	adds	r3, #50	; 0x32
 800475e:	4a72      	ldr	r2, [pc, #456]	; (8004928 <UART_SetConfig+0x6f4>)
 8004760:	fba2 2303 	umull	r2, r3, r2, r3
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	f003 020f 	and.w	r2, r3, #15
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4442      	add	r2, r8
 8004770:	609a      	str	r2, [r3, #8]
 8004772:	e0d0      	b.n	8004916 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004774:	f7fe f92e 	bl	80029d4 <HAL_RCC_GetPCLK1Freq>
 8004778:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	469a      	mov	sl, r3
 800477e:	f04f 0b00 	mov.w	fp, #0
 8004782:	46d0      	mov	r8, sl
 8004784:	46d9      	mov	r9, fp
 8004786:	eb18 0308 	adds.w	r3, r8, r8
 800478a:	eb49 0409 	adc.w	r4, r9, r9
 800478e:	4698      	mov	r8, r3
 8004790:	46a1      	mov	r9, r4
 8004792:	eb18 080a 	adds.w	r8, r8, sl
 8004796:	eb49 090b 	adc.w	r9, r9, fp
 800479a:	f04f 0100 	mov.w	r1, #0
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047ae:	4688      	mov	r8, r1
 80047b0:	4691      	mov	r9, r2
 80047b2:	eb1a 0508 	adds.w	r5, sl, r8
 80047b6:	eb4b 0609 	adc.w	r6, fp, r9
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4619      	mov	r1, r3
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	f04f 0400 	mov.w	r4, #0
 80047cc:	0094      	lsls	r4, r2, #2
 80047ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047d2:	008b      	lsls	r3, r1, #2
 80047d4:	461a      	mov	r2, r3
 80047d6:	4623      	mov	r3, r4
 80047d8:	4628      	mov	r0, r5
 80047da:	4631      	mov	r1, r6
 80047dc:	f7fb fd70 	bl	80002c0 <__aeabi_uldivmod>
 80047e0:	4603      	mov	r3, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	461a      	mov	r2, r3
 80047e6:	4b50      	ldr	r3, [pc, #320]	; (8004928 <UART_SetConfig+0x6f4>)
 80047e8:	fba3 2302 	umull	r2, r3, r3, r2
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	469b      	mov	fp, r3
 80047f6:	f04f 0c00 	mov.w	ip, #0
 80047fa:	46d9      	mov	r9, fp
 80047fc:	46e2      	mov	sl, ip
 80047fe:	eb19 0309 	adds.w	r3, r9, r9
 8004802:	eb4a 040a 	adc.w	r4, sl, sl
 8004806:	4699      	mov	r9, r3
 8004808:	46a2      	mov	sl, r4
 800480a:	eb19 090b 	adds.w	r9, r9, fp
 800480e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004812:	f04f 0100 	mov.w	r1, #0
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800481e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004822:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004826:	4689      	mov	r9, r1
 8004828:	4692      	mov	sl, r2
 800482a:	eb1b 0509 	adds.w	r5, fp, r9
 800482e:	eb4c 060a 	adc.w	r6, ip, sl
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	4619      	mov	r1, r3
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	f04f 0400 	mov.w	r4, #0
 8004844:	0094      	lsls	r4, r2, #2
 8004846:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800484a:	008b      	lsls	r3, r1, #2
 800484c:	461a      	mov	r2, r3
 800484e:	4623      	mov	r3, r4
 8004850:	4628      	mov	r0, r5
 8004852:	4631      	mov	r1, r6
 8004854:	f7fb fd34 	bl	80002c0 <__aeabi_uldivmod>
 8004858:	4603      	mov	r3, r0
 800485a:	460c      	mov	r4, r1
 800485c:	461a      	mov	r2, r3
 800485e:	4b32      	ldr	r3, [pc, #200]	; (8004928 <UART_SetConfig+0x6f4>)
 8004860:	fba3 1302 	umull	r1, r3, r3, r2
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	2164      	movs	r1, #100	; 0x64
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	3332      	adds	r3, #50	; 0x32
 8004872:	4a2d      	ldr	r2, [pc, #180]	; (8004928 <UART_SetConfig+0x6f4>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487e:	4498      	add	r8, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	469b      	mov	fp, r3
 8004884:	f04f 0c00 	mov.w	ip, #0
 8004888:	46d9      	mov	r9, fp
 800488a:	46e2      	mov	sl, ip
 800488c:	eb19 0309 	adds.w	r3, r9, r9
 8004890:	eb4a 040a 	adc.w	r4, sl, sl
 8004894:	4699      	mov	r9, r3
 8004896:	46a2      	mov	sl, r4
 8004898:	eb19 090b 	adds.w	r9, r9, fp
 800489c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048a0:	f04f 0100 	mov.w	r1, #0
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048b4:	4689      	mov	r9, r1
 80048b6:	4692      	mov	sl, r2
 80048b8:	eb1b 0509 	adds.w	r5, fp, r9
 80048bc:	eb4c 060a 	adc.w	r6, ip, sl
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4619      	mov	r1, r3
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	f04f 0400 	mov.w	r4, #0
 80048d2:	0094      	lsls	r4, r2, #2
 80048d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048d8:	008b      	lsls	r3, r1, #2
 80048da:	461a      	mov	r2, r3
 80048dc:	4623      	mov	r3, r4
 80048de:	4628      	mov	r0, r5
 80048e0:	4631      	mov	r1, r6
 80048e2:	f7fb fced 	bl	80002c0 <__aeabi_uldivmod>
 80048e6:	4603      	mov	r3, r0
 80048e8:	460c      	mov	r4, r1
 80048ea:	461a      	mov	r2, r3
 80048ec:	4b0e      	ldr	r3, [pc, #56]	; (8004928 <UART_SetConfig+0x6f4>)
 80048ee:	fba3 1302 	umull	r1, r3, r3, r2
 80048f2:	095b      	lsrs	r3, r3, #5
 80048f4:	2164      	movs	r1, #100	; 0x64
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	3332      	adds	r3, #50	; 0x32
 8004900:	4a09      	ldr	r2, [pc, #36]	; (8004928 <UART_SetConfig+0x6f4>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	f003 020f 	and.w	r2, r3, #15
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4442      	add	r2, r8
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	e7ff      	b.n	8004916 <UART_SetConfig+0x6e2>
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004920:	40011000 	.word	0x40011000
 8004924:	40011400 	.word	0x40011400
 8004928:	51eb851f 	.word	0x51eb851f

0800492c <__errno>:
 800492c:	4b01      	ldr	r3, [pc, #4]	; (8004934 <__errno+0x8>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	2000000c 	.word	0x2000000c

08004938 <__libc_init_array>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	4e0d      	ldr	r6, [pc, #52]	; (8004970 <__libc_init_array+0x38>)
 800493c:	4c0d      	ldr	r4, [pc, #52]	; (8004974 <__libc_init_array+0x3c>)
 800493e:	1ba4      	subs	r4, r4, r6
 8004940:	10a4      	asrs	r4, r4, #2
 8004942:	2500      	movs	r5, #0
 8004944:	42a5      	cmp	r5, r4
 8004946:	d109      	bne.n	800495c <__libc_init_array+0x24>
 8004948:	4e0b      	ldr	r6, [pc, #44]	; (8004978 <__libc_init_array+0x40>)
 800494a:	4c0c      	ldr	r4, [pc, #48]	; (800497c <__libc_init_array+0x44>)
 800494c:	f000 fc3a 	bl	80051c4 <_init>
 8004950:	1ba4      	subs	r4, r4, r6
 8004952:	10a4      	asrs	r4, r4, #2
 8004954:	2500      	movs	r5, #0
 8004956:	42a5      	cmp	r5, r4
 8004958:	d105      	bne.n	8004966 <__libc_init_array+0x2e>
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004960:	4798      	blx	r3
 8004962:	3501      	adds	r5, #1
 8004964:	e7ee      	b.n	8004944 <__libc_init_array+0xc>
 8004966:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800496a:	4798      	blx	r3
 800496c:	3501      	adds	r5, #1
 800496e:	e7f2      	b.n	8004956 <__libc_init_array+0x1e>
 8004970:	08005264 	.word	0x08005264
 8004974:	08005264 	.word	0x08005264
 8004978:	08005264 	.word	0x08005264
 800497c:	08005268 	.word	0x08005268

08004980 <memset>:
 8004980:	4402      	add	r2, r0
 8004982:	4603      	mov	r3, r0
 8004984:	4293      	cmp	r3, r2
 8004986:	d100      	bne.n	800498a <memset+0xa>
 8004988:	4770      	bx	lr
 800498a:	f803 1b01 	strb.w	r1, [r3], #1
 800498e:	e7f9      	b.n	8004984 <memset+0x4>

08004990 <sniprintf>:
 8004990:	b40c      	push	{r2, r3}
 8004992:	b530      	push	{r4, r5, lr}
 8004994:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <sniprintf+0x64>)
 8004996:	1e0c      	subs	r4, r1, #0
 8004998:	b09d      	sub	sp, #116	; 0x74
 800499a:	681d      	ldr	r5, [r3, #0]
 800499c:	da08      	bge.n	80049b0 <sniprintf+0x20>
 800499e:	238b      	movs	r3, #139	; 0x8b
 80049a0:	602b      	str	r3, [r5, #0]
 80049a2:	f04f 30ff 	mov.w	r0, #4294967295
 80049a6:	b01d      	add	sp, #116	; 0x74
 80049a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049ac:	b002      	add	sp, #8
 80049ae:	4770      	bx	lr
 80049b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80049b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80049b8:	bf14      	ite	ne
 80049ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80049be:	4623      	moveq	r3, r4
 80049c0:	9304      	str	r3, [sp, #16]
 80049c2:	9307      	str	r3, [sp, #28]
 80049c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049c8:	9002      	str	r0, [sp, #8]
 80049ca:	9006      	str	r0, [sp, #24]
 80049cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80049d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80049d2:	ab21      	add	r3, sp, #132	; 0x84
 80049d4:	a902      	add	r1, sp, #8
 80049d6:	4628      	mov	r0, r5
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	f000 f867 	bl	8004aac <_svfiprintf_r>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	bfbc      	itt	lt
 80049e2:	238b      	movlt	r3, #139	; 0x8b
 80049e4:	602b      	strlt	r3, [r5, #0]
 80049e6:	2c00      	cmp	r4, #0
 80049e8:	d0dd      	beq.n	80049a6 <sniprintf+0x16>
 80049ea:	9b02      	ldr	r3, [sp, #8]
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e7d9      	b.n	80049a6 <sniprintf+0x16>
 80049f2:	bf00      	nop
 80049f4:	2000000c 	.word	0x2000000c

080049f8 <__ssputs_r>:
 80049f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049fc:	688e      	ldr	r6, [r1, #8]
 80049fe:	429e      	cmp	r6, r3
 8004a00:	4682      	mov	sl, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	4690      	mov	r8, r2
 8004a06:	4699      	mov	r9, r3
 8004a08:	d837      	bhi.n	8004a7a <__ssputs_r+0x82>
 8004a0a:	898a      	ldrh	r2, [r1, #12]
 8004a0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a10:	d031      	beq.n	8004a76 <__ssputs_r+0x7e>
 8004a12:	6825      	ldr	r5, [r4, #0]
 8004a14:	6909      	ldr	r1, [r1, #16]
 8004a16:	1a6f      	subs	r7, r5, r1
 8004a18:	6965      	ldr	r5, [r4, #20]
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a20:	fb95 f5f3 	sdiv	r5, r5, r3
 8004a24:	f109 0301 	add.w	r3, r9, #1
 8004a28:	443b      	add	r3, r7
 8004a2a:	429d      	cmp	r5, r3
 8004a2c:	bf38      	it	cc
 8004a2e:	461d      	movcc	r5, r3
 8004a30:	0553      	lsls	r3, r2, #21
 8004a32:	d530      	bpl.n	8004a96 <__ssputs_r+0x9e>
 8004a34:	4629      	mov	r1, r5
 8004a36:	f000 fb2b 	bl	8005090 <_malloc_r>
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	b950      	cbnz	r0, 8004a54 <__ssputs_r+0x5c>
 8004a3e:	230c      	movs	r3, #12
 8004a40:	f8ca 3000 	str.w	r3, [sl]
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a4a:	81a3      	strh	r3, [r4, #12]
 8004a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a54:	463a      	mov	r2, r7
 8004a56:	6921      	ldr	r1, [r4, #16]
 8004a58:	f000 faa8 	bl	8004fac <memcpy>
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a66:	81a3      	strh	r3, [r4, #12]
 8004a68:	6126      	str	r6, [r4, #16]
 8004a6a:	6165      	str	r5, [r4, #20]
 8004a6c:	443e      	add	r6, r7
 8004a6e:	1bed      	subs	r5, r5, r7
 8004a70:	6026      	str	r6, [r4, #0]
 8004a72:	60a5      	str	r5, [r4, #8]
 8004a74:	464e      	mov	r6, r9
 8004a76:	454e      	cmp	r6, r9
 8004a78:	d900      	bls.n	8004a7c <__ssputs_r+0x84>
 8004a7a:	464e      	mov	r6, r9
 8004a7c:	4632      	mov	r2, r6
 8004a7e:	4641      	mov	r1, r8
 8004a80:	6820      	ldr	r0, [r4, #0]
 8004a82:	f000 fa9e 	bl	8004fc2 <memmove>
 8004a86:	68a3      	ldr	r3, [r4, #8]
 8004a88:	1b9b      	subs	r3, r3, r6
 8004a8a:	60a3      	str	r3, [r4, #8]
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	441e      	add	r6, r3
 8004a90:	6026      	str	r6, [r4, #0]
 8004a92:	2000      	movs	r0, #0
 8004a94:	e7dc      	b.n	8004a50 <__ssputs_r+0x58>
 8004a96:	462a      	mov	r2, r5
 8004a98:	f000 fb54 	bl	8005144 <_realloc_r>
 8004a9c:	4606      	mov	r6, r0
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d1e2      	bne.n	8004a68 <__ssputs_r+0x70>
 8004aa2:	6921      	ldr	r1, [r4, #16]
 8004aa4:	4650      	mov	r0, sl
 8004aa6:	f000 faa5 	bl	8004ff4 <_free_r>
 8004aaa:	e7c8      	b.n	8004a3e <__ssputs_r+0x46>

08004aac <_svfiprintf_r>:
 8004aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	461d      	mov	r5, r3
 8004ab2:	898b      	ldrh	r3, [r1, #12]
 8004ab4:	061f      	lsls	r7, r3, #24
 8004ab6:	b09d      	sub	sp, #116	; 0x74
 8004ab8:	4680      	mov	r8, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	4616      	mov	r6, r2
 8004abe:	d50f      	bpl.n	8004ae0 <_svfiprintf_r+0x34>
 8004ac0:	690b      	ldr	r3, [r1, #16]
 8004ac2:	b96b      	cbnz	r3, 8004ae0 <_svfiprintf_r+0x34>
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	f000 fae3 	bl	8005090 <_malloc_r>
 8004aca:	6020      	str	r0, [r4, #0]
 8004acc:	6120      	str	r0, [r4, #16]
 8004ace:	b928      	cbnz	r0, 8004adc <_svfiprintf_r+0x30>
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	f8c8 3000 	str.w	r3, [r8]
 8004ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ada:	e0c8      	b.n	8004c6e <_svfiprintf_r+0x1c2>
 8004adc:	2340      	movs	r3, #64	; 0x40
 8004ade:	6163      	str	r3, [r4, #20]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae4:	2320      	movs	r3, #32
 8004ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004aea:	2330      	movs	r3, #48	; 0x30
 8004aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004af0:	9503      	str	r5, [sp, #12]
 8004af2:	f04f 0b01 	mov.w	fp, #1
 8004af6:	4637      	mov	r7, r6
 8004af8:	463d      	mov	r5, r7
 8004afa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004afe:	b10b      	cbz	r3, 8004b04 <_svfiprintf_r+0x58>
 8004b00:	2b25      	cmp	r3, #37	; 0x25
 8004b02:	d13e      	bne.n	8004b82 <_svfiprintf_r+0xd6>
 8004b04:	ebb7 0a06 	subs.w	sl, r7, r6
 8004b08:	d00b      	beq.n	8004b22 <_svfiprintf_r+0x76>
 8004b0a:	4653      	mov	r3, sl
 8004b0c:	4632      	mov	r2, r6
 8004b0e:	4621      	mov	r1, r4
 8004b10:	4640      	mov	r0, r8
 8004b12:	f7ff ff71 	bl	80049f8 <__ssputs_r>
 8004b16:	3001      	adds	r0, #1
 8004b18:	f000 80a4 	beq.w	8004c64 <_svfiprintf_r+0x1b8>
 8004b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1e:	4453      	add	r3, sl
 8004b20:	9309      	str	r3, [sp, #36]	; 0x24
 8004b22:	783b      	ldrb	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 809d 	beq.w	8004c64 <_svfiprintf_r+0x1b8>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b34:	9304      	str	r3, [sp, #16]
 8004b36:	9307      	str	r3, [sp, #28]
 8004b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b3e:	462f      	mov	r7, r5
 8004b40:	2205      	movs	r2, #5
 8004b42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004b46:	4850      	ldr	r0, [pc, #320]	; (8004c88 <_svfiprintf_r+0x1dc>)
 8004b48:	f7fb fb6a 	bl	8000220 <memchr>
 8004b4c:	9b04      	ldr	r3, [sp, #16]
 8004b4e:	b9d0      	cbnz	r0, 8004b86 <_svfiprintf_r+0xda>
 8004b50:	06d9      	lsls	r1, r3, #27
 8004b52:	bf44      	itt	mi
 8004b54:	2220      	movmi	r2, #32
 8004b56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b5a:	071a      	lsls	r2, r3, #28
 8004b5c:	bf44      	itt	mi
 8004b5e:	222b      	movmi	r2, #43	; 0x2b
 8004b60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b64:	782a      	ldrb	r2, [r5, #0]
 8004b66:	2a2a      	cmp	r2, #42	; 0x2a
 8004b68:	d015      	beq.n	8004b96 <_svfiprintf_r+0xea>
 8004b6a:	9a07      	ldr	r2, [sp, #28]
 8004b6c:	462f      	mov	r7, r5
 8004b6e:	2000      	movs	r0, #0
 8004b70:	250a      	movs	r5, #10
 8004b72:	4639      	mov	r1, r7
 8004b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b78:	3b30      	subs	r3, #48	; 0x30
 8004b7a:	2b09      	cmp	r3, #9
 8004b7c:	d94d      	bls.n	8004c1a <_svfiprintf_r+0x16e>
 8004b7e:	b1b8      	cbz	r0, 8004bb0 <_svfiprintf_r+0x104>
 8004b80:	e00f      	b.n	8004ba2 <_svfiprintf_r+0xf6>
 8004b82:	462f      	mov	r7, r5
 8004b84:	e7b8      	b.n	8004af8 <_svfiprintf_r+0x4c>
 8004b86:	4a40      	ldr	r2, [pc, #256]	; (8004c88 <_svfiprintf_r+0x1dc>)
 8004b88:	1a80      	subs	r0, r0, r2
 8004b8a:	fa0b f000 	lsl.w	r0, fp, r0
 8004b8e:	4318      	orrs	r0, r3
 8004b90:	9004      	str	r0, [sp, #16]
 8004b92:	463d      	mov	r5, r7
 8004b94:	e7d3      	b.n	8004b3e <_svfiprintf_r+0x92>
 8004b96:	9a03      	ldr	r2, [sp, #12]
 8004b98:	1d11      	adds	r1, r2, #4
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	9103      	str	r1, [sp, #12]
 8004b9e:	2a00      	cmp	r2, #0
 8004ba0:	db01      	blt.n	8004ba6 <_svfiprintf_r+0xfa>
 8004ba2:	9207      	str	r2, [sp, #28]
 8004ba4:	e004      	b.n	8004bb0 <_svfiprintf_r+0x104>
 8004ba6:	4252      	negs	r2, r2
 8004ba8:	f043 0302 	orr.w	r3, r3, #2
 8004bac:	9207      	str	r2, [sp, #28]
 8004bae:	9304      	str	r3, [sp, #16]
 8004bb0:	783b      	ldrb	r3, [r7, #0]
 8004bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8004bb4:	d10c      	bne.n	8004bd0 <_svfiprintf_r+0x124>
 8004bb6:	787b      	ldrb	r3, [r7, #1]
 8004bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004bba:	d133      	bne.n	8004c24 <_svfiprintf_r+0x178>
 8004bbc:	9b03      	ldr	r3, [sp, #12]
 8004bbe:	1d1a      	adds	r2, r3, #4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	9203      	str	r2, [sp, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bfb8      	it	lt
 8004bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bcc:	3702      	adds	r7, #2
 8004bce:	9305      	str	r3, [sp, #20]
 8004bd0:	4d2e      	ldr	r5, [pc, #184]	; (8004c8c <_svfiprintf_r+0x1e0>)
 8004bd2:	7839      	ldrb	r1, [r7, #0]
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f7fb fb22 	bl	8000220 <memchr>
 8004bdc:	b138      	cbz	r0, 8004bee <_svfiprintf_r+0x142>
 8004bde:	2340      	movs	r3, #64	; 0x40
 8004be0:	1b40      	subs	r0, r0, r5
 8004be2:	fa03 f000 	lsl.w	r0, r3, r0
 8004be6:	9b04      	ldr	r3, [sp, #16]
 8004be8:	4303      	orrs	r3, r0
 8004bea:	3701      	adds	r7, #1
 8004bec:	9304      	str	r3, [sp, #16]
 8004bee:	7839      	ldrb	r1, [r7, #0]
 8004bf0:	4827      	ldr	r0, [pc, #156]	; (8004c90 <_svfiprintf_r+0x1e4>)
 8004bf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bf6:	2206      	movs	r2, #6
 8004bf8:	1c7e      	adds	r6, r7, #1
 8004bfa:	f7fb fb11 	bl	8000220 <memchr>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d038      	beq.n	8004c74 <_svfiprintf_r+0x1c8>
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <_svfiprintf_r+0x1e8>)
 8004c04:	bb13      	cbnz	r3, 8004c4c <_svfiprintf_r+0x1a0>
 8004c06:	9b03      	ldr	r3, [sp, #12]
 8004c08:	3307      	adds	r3, #7
 8004c0a:	f023 0307 	bic.w	r3, r3, #7
 8004c0e:	3308      	adds	r3, #8
 8004c10:	9303      	str	r3, [sp, #12]
 8004c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c14:	444b      	add	r3, r9
 8004c16:	9309      	str	r3, [sp, #36]	; 0x24
 8004c18:	e76d      	b.n	8004af6 <_svfiprintf_r+0x4a>
 8004c1a:	fb05 3202 	mla	r2, r5, r2, r3
 8004c1e:	2001      	movs	r0, #1
 8004c20:	460f      	mov	r7, r1
 8004c22:	e7a6      	b.n	8004b72 <_svfiprintf_r+0xc6>
 8004c24:	2300      	movs	r3, #0
 8004c26:	3701      	adds	r7, #1
 8004c28:	9305      	str	r3, [sp, #20]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	250a      	movs	r5, #10
 8004c2e:	4638      	mov	r0, r7
 8004c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c34:	3a30      	subs	r2, #48	; 0x30
 8004c36:	2a09      	cmp	r2, #9
 8004c38:	d903      	bls.n	8004c42 <_svfiprintf_r+0x196>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0c8      	beq.n	8004bd0 <_svfiprintf_r+0x124>
 8004c3e:	9105      	str	r1, [sp, #20]
 8004c40:	e7c6      	b.n	8004bd0 <_svfiprintf_r+0x124>
 8004c42:	fb05 2101 	mla	r1, r5, r1, r2
 8004c46:	2301      	movs	r3, #1
 8004c48:	4607      	mov	r7, r0
 8004c4a:	e7f0      	b.n	8004c2e <_svfiprintf_r+0x182>
 8004c4c:	ab03      	add	r3, sp, #12
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	4622      	mov	r2, r4
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <_svfiprintf_r+0x1ec>)
 8004c54:	a904      	add	r1, sp, #16
 8004c56:	4640      	mov	r0, r8
 8004c58:	f3af 8000 	nop.w
 8004c5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c60:	4681      	mov	r9, r0
 8004c62:	d1d6      	bne.n	8004c12 <_svfiprintf_r+0x166>
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	065b      	lsls	r3, r3, #25
 8004c68:	f53f af35 	bmi.w	8004ad6 <_svfiprintf_r+0x2a>
 8004c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c6e:	b01d      	add	sp, #116	; 0x74
 8004c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c74:	ab03      	add	r3, sp, #12
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	4622      	mov	r2, r4
 8004c7a:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <_svfiprintf_r+0x1ec>)
 8004c7c:	a904      	add	r1, sp, #16
 8004c7e:	4640      	mov	r0, r8
 8004c80:	f000 f882 	bl	8004d88 <_printf_i>
 8004c84:	e7ea      	b.n	8004c5c <_svfiprintf_r+0x1b0>
 8004c86:	bf00      	nop
 8004c88:	08005228 	.word	0x08005228
 8004c8c:	0800522e 	.word	0x0800522e
 8004c90:	08005232 	.word	0x08005232
 8004c94:	00000000 	.word	0x00000000
 8004c98:	080049f9 	.word	0x080049f9

08004c9c <_printf_common>:
 8004c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca0:	4691      	mov	r9, r2
 8004ca2:	461f      	mov	r7, r3
 8004ca4:	688a      	ldr	r2, [r1, #8]
 8004ca6:	690b      	ldr	r3, [r1, #16]
 8004ca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cac:	4293      	cmp	r3, r2
 8004cae:	bfb8      	it	lt
 8004cb0:	4613      	movlt	r3, r2
 8004cb2:	f8c9 3000 	str.w	r3, [r9]
 8004cb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cba:	4606      	mov	r6, r0
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	b112      	cbz	r2, 8004cc6 <_printf_common+0x2a>
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f8c9 3000 	str.w	r3, [r9]
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	0699      	lsls	r1, r3, #26
 8004cca:	bf42      	ittt	mi
 8004ccc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004cd0:	3302      	addmi	r3, #2
 8004cd2:	f8c9 3000 	strmi.w	r3, [r9]
 8004cd6:	6825      	ldr	r5, [r4, #0]
 8004cd8:	f015 0506 	ands.w	r5, r5, #6
 8004cdc:	d107      	bne.n	8004cee <_printf_common+0x52>
 8004cde:	f104 0a19 	add.w	sl, r4, #25
 8004ce2:	68e3      	ldr	r3, [r4, #12]
 8004ce4:	f8d9 2000 	ldr.w	r2, [r9]
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	42ab      	cmp	r3, r5
 8004cec:	dc28      	bgt.n	8004d40 <_printf_common+0xa4>
 8004cee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004cf2:	6822      	ldr	r2, [r4, #0]
 8004cf4:	3300      	adds	r3, #0
 8004cf6:	bf18      	it	ne
 8004cf8:	2301      	movne	r3, #1
 8004cfa:	0692      	lsls	r2, r2, #26
 8004cfc:	d42d      	bmi.n	8004d5a <_printf_common+0xbe>
 8004cfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d02:	4639      	mov	r1, r7
 8004d04:	4630      	mov	r0, r6
 8004d06:	47c0      	blx	r8
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d020      	beq.n	8004d4e <_printf_common+0xb2>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	68e5      	ldr	r5, [r4, #12]
 8004d10:	f8d9 2000 	ldr.w	r2, [r9]
 8004d14:	f003 0306 	and.w	r3, r3, #6
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	bf08      	it	eq
 8004d1c:	1aad      	subeq	r5, r5, r2
 8004d1e:	68a3      	ldr	r3, [r4, #8]
 8004d20:	6922      	ldr	r2, [r4, #16]
 8004d22:	bf0c      	ite	eq
 8004d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d28:	2500      	movne	r5, #0
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	bfc4      	itt	gt
 8004d2e:	1a9b      	subgt	r3, r3, r2
 8004d30:	18ed      	addgt	r5, r5, r3
 8004d32:	f04f 0900 	mov.w	r9, #0
 8004d36:	341a      	adds	r4, #26
 8004d38:	454d      	cmp	r5, r9
 8004d3a:	d11a      	bne.n	8004d72 <_printf_common+0xd6>
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e008      	b.n	8004d52 <_printf_common+0xb6>
 8004d40:	2301      	movs	r3, #1
 8004d42:	4652      	mov	r2, sl
 8004d44:	4639      	mov	r1, r7
 8004d46:	4630      	mov	r0, r6
 8004d48:	47c0      	blx	r8
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d103      	bne.n	8004d56 <_printf_common+0xba>
 8004d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d56:	3501      	adds	r5, #1
 8004d58:	e7c3      	b.n	8004ce2 <_printf_common+0x46>
 8004d5a:	18e1      	adds	r1, r4, r3
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	2030      	movs	r0, #48	; 0x30
 8004d60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d64:	4422      	add	r2, r4
 8004d66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d6e:	3302      	adds	r3, #2
 8004d70:	e7c5      	b.n	8004cfe <_printf_common+0x62>
 8004d72:	2301      	movs	r3, #1
 8004d74:	4622      	mov	r2, r4
 8004d76:	4639      	mov	r1, r7
 8004d78:	4630      	mov	r0, r6
 8004d7a:	47c0      	blx	r8
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d0e6      	beq.n	8004d4e <_printf_common+0xb2>
 8004d80:	f109 0901 	add.w	r9, r9, #1
 8004d84:	e7d8      	b.n	8004d38 <_printf_common+0x9c>
	...

08004d88 <_printf_i>:
 8004d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d90:	460c      	mov	r4, r1
 8004d92:	7e09      	ldrb	r1, [r1, #24]
 8004d94:	b085      	sub	sp, #20
 8004d96:	296e      	cmp	r1, #110	; 0x6e
 8004d98:	4617      	mov	r7, r2
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	4698      	mov	r8, r3
 8004d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004da0:	f000 80b3 	beq.w	8004f0a <_printf_i+0x182>
 8004da4:	d822      	bhi.n	8004dec <_printf_i+0x64>
 8004da6:	2963      	cmp	r1, #99	; 0x63
 8004da8:	d036      	beq.n	8004e18 <_printf_i+0x90>
 8004daa:	d80a      	bhi.n	8004dc2 <_printf_i+0x3a>
 8004dac:	2900      	cmp	r1, #0
 8004dae:	f000 80b9 	beq.w	8004f24 <_printf_i+0x19c>
 8004db2:	2958      	cmp	r1, #88	; 0x58
 8004db4:	f000 8083 	beq.w	8004ebe <_printf_i+0x136>
 8004db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004dc0:	e032      	b.n	8004e28 <_printf_i+0xa0>
 8004dc2:	2964      	cmp	r1, #100	; 0x64
 8004dc4:	d001      	beq.n	8004dca <_printf_i+0x42>
 8004dc6:	2969      	cmp	r1, #105	; 0x69
 8004dc8:	d1f6      	bne.n	8004db8 <_printf_i+0x30>
 8004dca:	6820      	ldr	r0, [r4, #0]
 8004dcc:	6813      	ldr	r3, [r2, #0]
 8004dce:	0605      	lsls	r5, r0, #24
 8004dd0:	f103 0104 	add.w	r1, r3, #4
 8004dd4:	d52a      	bpl.n	8004e2c <_printf_i+0xa4>
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6011      	str	r1, [r2, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	da03      	bge.n	8004de6 <_printf_i+0x5e>
 8004dde:	222d      	movs	r2, #45	; 0x2d
 8004de0:	425b      	negs	r3, r3
 8004de2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004de6:	486f      	ldr	r0, [pc, #444]	; (8004fa4 <_printf_i+0x21c>)
 8004de8:	220a      	movs	r2, #10
 8004dea:	e039      	b.n	8004e60 <_printf_i+0xd8>
 8004dec:	2973      	cmp	r1, #115	; 0x73
 8004dee:	f000 809d 	beq.w	8004f2c <_printf_i+0x1a4>
 8004df2:	d808      	bhi.n	8004e06 <_printf_i+0x7e>
 8004df4:	296f      	cmp	r1, #111	; 0x6f
 8004df6:	d020      	beq.n	8004e3a <_printf_i+0xb2>
 8004df8:	2970      	cmp	r1, #112	; 0x70
 8004dfa:	d1dd      	bne.n	8004db8 <_printf_i+0x30>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	f043 0320 	orr.w	r3, r3, #32
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	e003      	b.n	8004e0e <_printf_i+0x86>
 8004e06:	2975      	cmp	r1, #117	; 0x75
 8004e08:	d017      	beq.n	8004e3a <_printf_i+0xb2>
 8004e0a:	2978      	cmp	r1, #120	; 0x78
 8004e0c:	d1d4      	bne.n	8004db8 <_printf_i+0x30>
 8004e0e:	2378      	movs	r3, #120	; 0x78
 8004e10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e14:	4864      	ldr	r0, [pc, #400]	; (8004fa8 <_printf_i+0x220>)
 8004e16:	e055      	b.n	8004ec4 <_printf_i+0x13c>
 8004e18:	6813      	ldr	r3, [r2, #0]
 8004e1a:	1d19      	adds	r1, r3, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6011      	str	r1, [r2, #0]
 8004e20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e08c      	b.n	8004f46 <_printf_i+0x1be>
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6011      	str	r1, [r2, #0]
 8004e30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e34:	bf18      	it	ne
 8004e36:	b21b      	sxthne	r3, r3
 8004e38:	e7cf      	b.n	8004dda <_printf_i+0x52>
 8004e3a:	6813      	ldr	r3, [r2, #0]
 8004e3c:	6825      	ldr	r5, [r4, #0]
 8004e3e:	1d18      	adds	r0, r3, #4
 8004e40:	6010      	str	r0, [r2, #0]
 8004e42:	0628      	lsls	r0, r5, #24
 8004e44:	d501      	bpl.n	8004e4a <_printf_i+0xc2>
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	e002      	b.n	8004e50 <_printf_i+0xc8>
 8004e4a:	0668      	lsls	r0, r5, #25
 8004e4c:	d5fb      	bpl.n	8004e46 <_printf_i+0xbe>
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	4854      	ldr	r0, [pc, #336]	; (8004fa4 <_printf_i+0x21c>)
 8004e52:	296f      	cmp	r1, #111	; 0x6f
 8004e54:	bf14      	ite	ne
 8004e56:	220a      	movne	r2, #10
 8004e58:	2208      	moveq	r2, #8
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e60:	6865      	ldr	r5, [r4, #4]
 8004e62:	60a5      	str	r5, [r4, #8]
 8004e64:	2d00      	cmp	r5, #0
 8004e66:	f2c0 8095 	blt.w	8004f94 <_printf_i+0x20c>
 8004e6a:	6821      	ldr	r1, [r4, #0]
 8004e6c:	f021 0104 	bic.w	r1, r1, #4
 8004e70:	6021      	str	r1, [r4, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d13d      	bne.n	8004ef2 <_printf_i+0x16a>
 8004e76:	2d00      	cmp	r5, #0
 8004e78:	f040 808e 	bne.w	8004f98 <_printf_i+0x210>
 8004e7c:	4665      	mov	r5, ip
 8004e7e:	2a08      	cmp	r2, #8
 8004e80:	d10b      	bne.n	8004e9a <_printf_i+0x112>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	07db      	lsls	r3, r3, #31
 8004e86:	d508      	bpl.n	8004e9a <_printf_i+0x112>
 8004e88:	6923      	ldr	r3, [r4, #16]
 8004e8a:	6862      	ldr	r2, [r4, #4]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	bfde      	ittt	le
 8004e90:	2330      	movle	r3, #48	; 0x30
 8004e92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e9a:	ebac 0305 	sub.w	r3, ip, r5
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	f8cd 8000 	str.w	r8, [sp]
 8004ea4:	463b      	mov	r3, r7
 8004ea6:	aa03      	add	r2, sp, #12
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f7ff fef6 	bl	8004c9c <_printf_common>
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d14d      	bne.n	8004f50 <_printf_i+0x1c8>
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	b005      	add	sp, #20
 8004eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ebe:	4839      	ldr	r0, [pc, #228]	; (8004fa4 <_printf_i+0x21c>)
 8004ec0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ec4:	6813      	ldr	r3, [r2, #0]
 8004ec6:	6821      	ldr	r1, [r4, #0]
 8004ec8:	1d1d      	adds	r5, r3, #4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6015      	str	r5, [r2, #0]
 8004ece:	060a      	lsls	r2, r1, #24
 8004ed0:	d50b      	bpl.n	8004eea <_printf_i+0x162>
 8004ed2:	07ca      	lsls	r2, r1, #31
 8004ed4:	bf44      	itt	mi
 8004ed6:	f041 0120 	orrmi.w	r1, r1, #32
 8004eda:	6021      	strmi	r1, [r4, #0]
 8004edc:	b91b      	cbnz	r3, 8004ee6 <_printf_i+0x15e>
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	f022 0220 	bic.w	r2, r2, #32
 8004ee4:	6022      	str	r2, [r4, #0]
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	e7b7      	b.n	8004e5a <_printf_i+0xd2>
 8004eea:	064d      	lsls	r5, r1, #25
 8004eec:	bf48      	it	mi
 8004eee:	b29b      	uxthmi	r3, r3
 8004ef0:	e7ef      	b.n	8004ed2 <_printf_i+0x14a>
 8004ef2:	4665      	mov	r5, ip
 8004ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ef8:	fb02 3311 	mls	r3, r2, r1, r3
 8004efc:	5cc3      	ldrb	r3, [r0, r3]
 8004efe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f02:	460b      	mov	r3, r1
 8004f04:	2900      	cmp	r1, #0
 8004f06:	d1f5      	bne.n	8004ef4 <_printf_i+0x16c>
 8004f08:	e7b9      	b.n	8004e7e <_printf_i+0xf6>
 8004f0a:	6813      	ldr	r3, [r2, #0]
 8004f0c:	6825      	ldr	r5, [r4, #0]
 8004f0e:	6961      	ldr	r1, [r4, #20]
 8004f10:	1d18      	adds	r0, r3, #4
 8004f12:	6010      	str	r0, [r2, #0]
 8004f14:	0628      	lsls	r0, r5, #24
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	d501      	bpl.n	8004f1e <_printf_i+0x196>
 8004f1a:	6019      	str	r1, [r3, #0]
 8004f1c:	e002      	b.n	8004f24 <_printf_i+0x19c>
 8004f1e:	066a      	lsls	r2, r5, #25
 8004f20:	d5fb      	bpl.n	8004f1a <_printf_i+0x192>
 8004f22:	8019      	strh	r1, [r3, #0]
 8004f24:	2300      	movs	r3, #0
 8004f26:	6123      	str	r3, [r4, #16]
 8004f28:	4665      	mov	r5, ip
 8004f2a:	e7b9      	b.n	8004ea0 <_printf_i+0x118>
 8004f2c:	6813      	ldr	r3, [r2, #0]
 8004f2e:	1d19      	adds	r1, r3, #4
 8004f30:	6011      	str	r1, [r2, #0]
 8004f32:	681d      	ldr	r5, [r3, #0]
 8004f34:	6862      	ldr	r2, [r4, #4]
 8004f36:	2100      	movs	r1, #0
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f7fb f971 	bl	8000220 <memchr>
 8004f3e:	b108      	cbz	r0, 8004f44 <_printf_i+0x1bc>
 8004f40:	1b40      	subs	r0, r0, r5
 8004f42:	6060      	str	r0, [r4, #4]
 8004f44:	6863      	ldr	r3, [r4, #4]
 8004f46:	6123      	str	r3, [r4, #16]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f4e:	e7a7      	b.n	8004ea0 <_printf_i+0x118>
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	462a      	mov	r2, r5
 8004f54:	4639      	mov	r1, r7
 8004f56:	4630      	mov	r0, r6
 8004f58:	47c0      	blx	r8
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d0aa      	beq.n	8004eb4 <_printf_i+0x12c>
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	079b      	lsls	r3, r3, #30
 8004f62:	d413      	bmi.n	8004f8c <_printf_i+0x204>
 8004f64:	68e0      	ldr	r0, [r4, #12]
 8004f66:	9b03      	ldr	r3, [sp, #12]
 8004f68:	4298      	cmp	r0, r3
 8004f6a:	bfb8      	it	lt
 8004f6c:	4618      	movlt	r0, r3
 8004f6e:	e7a3      	b.n	8004eb8 <_printf_i+0x130>
 8004f70:	2301      	movs	r3, #1
 8004f72:	464a      	mov	r2, r9
 8004f74:	4639      	mov	r1, r7
 8004f76:	4630      	mov	r0, r6
 8004f78:	47c0      	blx	r8
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d09a      	beq.n	8004eb4 <_printf_i+0x12c>
 8004f7e:	3501      	adds	r5, #1
 8004f80:	68e3      	ldr	r3, [r4, #12]
 8004f82:	9a03      	ldr	r2, [sp, #12]
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	42ab      	cmp	r3, r5
 8004f88:	dcf2      	bgt.n	8004f70 <_printf_i+0x1e8>
 8004f8a:	e7eb      	b.n	8004f64 <_printf_i+0x1dc>
 8004f8c:	2500      	movs	r5, #0
 8004f8e:	f104 0919 	add.w	r9, r4, #25
 8004f92:	e7f5      	b.n	8004f80 <_printf_i+0x1f8>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1ac      	bne.n	8004ef2 <_printf_i+0x16a>
 8004f98:	7803      	ldrb	r3, [r0, #0]
 8004f9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa2:	e76c      	b.n	8004e7e <_printf_i+0xf6>
 8004fa4:	08005239 	.word	0x08005239
 8004fa8:	0800524a 	.word	0x0800524a

08004fac <memcpy>:
 8004fac:	b510      	push	{r4, lr}
 8004fae:	1e43      	subs	r3, r0, #1
 8004fb0:	440a      	add	r2, r1
 8004fb2:	4291      	cmp	r1, r2
 8004fb4:	d100      	bne.n	8004fb8 <memcpy+0xc>
 8004fb6:	bd10      	pop	{r4, pc}
 8004fb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fc0:	e7f7      	b.n	8004fb2 <memcpy+0x6>

08004fc2 <memmove>:
 8004fc2:	4288      	cmp	r0, r1
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	eb01 0302 	add.w	r3, r1, r2
 8004fca:	d807      	bhi.n	8004fdc <memmove+0x1a>
 8004fcc:	1e42      	subs	r2, r0, #1
 8004fce:	4299      	cmp	r1, r3
 8004fd0:	d00a      	beq.n	8004fe8 <memmove+0x26>
 8004fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fd6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004fda:	e7f8      	b.n	8004fce <memmove+0xc>
 8004fdc:	4283      	cmp	r3, r0
 8004fde:	d9f5      	bls.n	8004fcc <memmove+0xa>
 8004fe0:	1881      	adds	r1, r0, r2
 8004fe2:	1ad2      	subs	r2, r2, r3
 8004fe4:	42d3      	cmn	r3, r2
 8004fe6:	d100      	bne.n	8004fea <memmove+0x28>
 8004fe8:	bd10      	pop	{r4, pc}
 8004fea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fee:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004ff2:	e7f7      	b.n	8004fe4 <memmove+0x22>

08004ff4 <_free_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4605      	mov	r5, r0
 8004ff8:	2900      	cmp	r1, #0
 8004ffa:	d045      	beq.n	8005088 <_free_r+0x94>
 8004ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005000:	1f0c      	subs	r4, r1, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	bfb8      	it	lt
 8005006:	18e4      	addlt	r4, r4, r3
 8005008:	f000 f8d2 	bl	80051b0 <__malloc_lock>
 800500c:	4a1f      	ldr	r2, [pc, #124]	; (800508c <_free_r+0x98>)
 800500e:	6813      	ldr	r3, [r2, #0]
 8005010:	4610      	mov	r0, r2
 8005012:	b933      	cbnz	r3, 8005022 <_free_r+0x2e>
 8005014:	6063      	str	r3, [r4, #4]
 8005016:	6014      	str	r4, [r2, #0]
 8005018:	4628      	mov	r0, r5
 800501a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800501e:	f000 b8c8 	b.w	80051b2 <__malloc_unlock>
 8005022:	42a3      	cmp	r3, r4
 8005024:	d90c      	bls.n	8005040 <_free_r+0x4c>
 8005026:	6821      	ldr	r1, [r4, #0]
 8005028:	1862      	adds	r2, r4, r1
 800502a:	4293      	cmp	r3, r2
 800502c:	bf04      	itt	eq
 800502e:	681a      	ldreq	r2, [r3, #0]
 8005030:	685b      	ldreq	r3, [r3, #4]
 8005032:	6063      	str	r3, [r4, #4]
 8005034:	bf04      	itt	eq
 8005036:	1852      	addeq	r2, r2, r1
 8005038:	6022      	streq	r2, [r4, #0]
 800503a:	6004      	str	r4, [r0, #0]
 800503c:	e7ec      	b.n	8005018 <_free_r+0x24>
 800503e:	4613      	mov	r3, r2
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	b10a      	cbz	r2, 8005048 <_free_r+0x54>
 8005044:	42a2      	cmp	r2, r4
 8005046:	d9fa      	bls.n	800503e <_free_r+0x4a>
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	1858      	adds	r0, r3, r1
 800504c:	42a0      	cmp	r0, r4
 800504e:	d10b      	bne.n	8005068 <_free_r+0x74>
 8005050:	6820      	ldr	r0, [r4, #0]
 8005052:	4401      	add	r1, r0
 8005054:	1858      	adds	r0, r3, r1
 8005056:	4282      	cmp	r2, r0
 8005058:	6019      	str	r1, [r3, #0]
 800505a:	d1dd      	bne.n	8005018 <_free_r+0x24>
 800505c:	6810      	ldr	r0, [r2, #0]
 800505e:	6852      	ldr	r2, [r2, #4]
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	4401      	add	r1, r0
 8005064:	6019      	str	r1, [r3, #0]
 8005066:	e7d7      	b.n	8005018 <_free_r+0x24>
 8005068:	d902      	bls.n	8005070 <_free_r+0x7c>
 800506a:	230c      	movs	r3, #12
 800506c:	602b      	str	r3, [r5, #0]
 800506e:	e7d3      	b.n	8005018 <_free_r+0x24>
 8005070:	6820      	ldr	r0, [r4, #0]
 8005072:	1821      	adds	r1, r4, r0
 8005074:	428a      	cmp	r2, r1
 8005076:	bf04      	itt	eq
 8005078:	6811      	ldreq	r1, [r2, #0]
 800507a:	6852      	ldreq	r2, [r2, #4]
 800507c:	6062      	str	r2, [r4, #4]
 800507e:	bf04      	itt	eq
 8005080:	1809      	addeq	r1, r1, r0
 8005082:	6021      	streq	r1, [r4, #0]
 8005084:	605c      	str	r4, [r3, #4]
 8005086:	e7c7      	b.n	8005018 <_free_r+0x24>
 8005088:	bd38      	pop	{r3, r4, r5, pc}
 800508a:	bf00      	nop
 800508c:	20000090 	.word	0x20000090

08005090 <_malloc_r>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	1ccd      	adds	r5, r1, #3
 8005094:	f025 0503 	bic.w	r5, r5, #3
 8005098:	3508      	adds	r5, #8
 800509a:	2d0c      	cmp	r5, #12
 800509c:	bf38      	it	cc
 800509e:	250c      	movcc	r5, #12
 80050a0:	2d00      	cmp	r5, #0
 80050a2:	4606      	mov	r6, r0
 80050a4:	db01      	blt.n	80050aa <_malloc_r+0x1a>
 80050a6:	42a9      	cmp	r1, r5
 80050a8:	d903      	bls.n	80050b2 <_malloc_r+0x22>
 80050aa:	230c      	movs	r3, #12
 80050ac:	6033      	str	r3, [r6, #0]
 80050ae:	2000      	movs	r0, #0
 80050b0:	bd70      	pop	{r4, r5, r6, pc}
 80050b2:	f000 f87d 	bl	80051b0 <__malloc_lock>
 80050b6:	4a21      	ldr	r2, [pc, #132]	; (800513c <_malloc_r+0xac>)
 80050b8:	6814      	ldr	r4, [r2, #0]
 80050ba:	4621      	mov	r1, r4
 80050bc:	b991      	cbnz	r1, 80050e4 <_malloc_r+0x54>
 80050be:	4c20      	ldr	r4, [pc, #128]	; (8005140 <_malloc_r+0xb0>)
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	b91b      	cbnz	r3, 80050cc <_malloc_r+0x3c>
 80050c4:	4630      	mov	r0, r6
 80050c6:	f000 f863 	bl	8005190 <_sbrk_r>
 80050ca:	6020      	str	r0, [r4, #0]
 80050cc:	4629      	mov	r1, r5
 80050ce:	4630      	mov	r0, r6
 80050d0:	f000 f85e 	bl	8005190 <_sbrk_r>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d124      	bne.n	8005122 <_malloc_r+0x92>
 80050d8:	230c      	movs	r3, #12
 80050da:	6033      	str	r3, [r6, #0]
 80050dc:	4630      	mov	r0, r6
 80050de:	f000 f868 	bl	80051b2 <__malloc_unlock>
 80050e2:	e7e4      	b.n	80050ae <_malloc_r+0x1e>
 80050e4:	680b      	ldr	r3, [r1, #0]
 80050e6:	1b5b      	subs	r3, r3, r5
 80050e8:	d418      	bmi.n	800511c <_malloc_r+0x8c>
 80050ea:	2b0b      	cmp	r3, #11
 80050ec:	d90f      	bls.n	800510e <_malloc_r+0x7e>
 80050ee:	600b      	str	r3, [r1, #0]
 80050f0:	50cd      	str	r5, [r1, r3]
 80050f2:	18cc      	adds	r4, r1, r3
 80050f4:	4630      	mov	r0, r6
 80050f6:	f000 f85c 	bl	80051b2 <__malloc_unlock>
 80050fa:	f104 000b 	add.w	r0, r4, #11
 80050fe:	1d23      	adds	r3, r4, #4
 8005100:	f020 0007 	bic.w	r0, r0, #7
 8005104:	1ac3      	subs	r3, r0, r3
 8005106:	d0d3      	beq.n	80050b0 <_malloc_r+0x20>
 8005108:	425a      	negs	r2, r3
 800510a:	50e2      	str	r2, [r4, r3]
 800510c:	e7d0      	b.n	80050b0 <_malloc_r+0x20>
 800510e:	428c      	cmp	r4, r1
 8005110:	684b      	ldr	r3, [r1, #4]
 8005112:	bf16      	itet	ne
 8005114:	6063      	strne	r3, [r4, #4]
 8005116:	6013      	streq	r3, [r2, #0]
 8005118:	460c      	movne	r4, r1
 800511a:	e7eb      	b.n	80050f4 <_malloc_r+0x64>
 800511c:	460c      	mov	r4, r1
 800511e:	6849      	ldr	r1, [r1, #4]
 8005120:	e7cc      	b.n	80050bc <_malloc_r+0x2c>
 8005122:	1cc4      	adds	r4, r0, #3
 8005124:	f024 0403 	bic.w	r4, r4, #3
 8005128:	42a0      	cmp	r0, r4
 800512a:	d005      	beq.n	8005138 <_malloc_r+0xa8>
 800512c:	1a21      	subs	r1, r4, r0
 800512e:	4630      	mov	r0, r6
 8005130:	f000 f82e 	bl	8005190 <_sbrk_r>
 8005134:	3001      	adds	r0, #1
 8005136:	d0cf      	beq.n	80050d8 <_malloc_r+0x48>
 8005138:	6025      	str	r5, [r4, #0]
 800513a:	e7db      	b.n	80050f4 <_malloc_r+0x64>
 800513c:	20000090 	.word	0x20000090
 8005140:	20000094 	.word	0x20000094

08005144 <_realloc_r>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	4607      	mov	r7, r0
 8005148:	4614      	mov	r4, r2
 800514a:	460e      	mov	r6, r1
 800514c:	b921      	cbnz	r1, 8005158 <_realloc_r+0x14>
 800514e:	4611      	mov	r1, r2
 8005150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005154:	f7ff bf9c 	b.w	8005090 <_malloc_r>
 8005158:	b922      	cbnz	r2, 8005164 <_realloc_r+0x20>
 800515a:	f7ff ff4b 	bl	8004ff4 <_free_r>
 800515e:	4625      	mov	r5, r4
 8005160:	4628      	mov	r0, r5
 8005162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005164:	f000 f826 	bl	80051b4 <_malloc_usable_size_r>
 8005168:	42a0      	cmp	r0, r4
 800516a:	d20f      	bcs.n	800518c <_realloc_r+0x48>
 800516c:	4621      	mov	r1, r4
 800516e:	4638      	mov	r0, r7
 8005170:	f7ff ff8e 	bl	8005090 <_malloc_r>
 8005174:	4605      	mov	r5, r0
 8005176:	2800      	cmp	r0, #0
 8005178:	d0f2      	beq.n	8005160 <_realloc_r+0x1c>
 800517a:	4631      	mov	r1, r6
 800517c:	4622      	mov	r2, r4
 800517e:	f7ff ff15 	bl	8004fac <memcpy>
 8005182:	4631      	mov	r1, r6
 8005184:	4638      	mov	r0, r7
 8005186:	f7ff ff35 	bl	8004ff4 <_free_r>
 800518a:	e7e9      	b.n	8005160 <_realloc_r+0x1c>
 800518c:	4635      	mov	r5, r6
 800518e:	e7e7      	b.n	8005160 <_realloc_r+0x1c>

08005190 <_sbrk_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4c06      	ldr	r4, [pc, #24]	; (80051ac <_sbrk_r+0x1c>)
 8005194:	2300      	movs	r3, #0
 8005196:	4605      	mov	r5, r0
 8005198:	4608      	mov	r0, r1
 800519a:	6023      	str	r3, [r4, #0]
 800519c:	f7fb fcb8 	bl	8000b10 <_sbrk>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d102      	bne.n	80051aa <_sbrk_r+0x1a>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	b103      	cbz	r3, 80051aa <_sbrk_r+0x1a>
 80051a8:	602b      	str	r3, [r5, #0]
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	2000049c 	.word	0x2000049c

080051b0 <__malloc_lock>:
 80051b0:	4770      	bx	lr

080051b2 <__malloc_unlock>:
 80051b2:	4770      	bx	lr

080051b4 <_malloc_usable_size_r>:
 80051b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b8:	1f18      	subs	r0, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bfbc      	itt	lt
 80051be:	580b      	ldrlt	r3, [r1, r0]
 80051c0:	18c0      	addlt	r0, r0, r3
 80051c2:	4770      	bx	lr

080051c4 <_init>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr

080051d0 <_fini>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr
