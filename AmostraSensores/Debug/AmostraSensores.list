
AmostraSensores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005040  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a4  080052a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052a4  080052a4  000152a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052ac  080052ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000070  08005324  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  08005324  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001006c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002663  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  00032770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d28  00000000  00000000  000335f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002334a  00000000  00000000  00034318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cf20  00000000  00000000  00057662  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4544  00000000  00000000  00064582  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00138ac6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e44  00000000  00000000  00138b44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080051f8 	.word	0x080051f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080051f8 	.word	0x080051f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005c6:	463b      	mov	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80005d2:	4b28      	ldr	r3, [pc, #160]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <MX_ADC1_Init+0xb8>)
 80005d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80005e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005f2:	4b20      	ldr	r3, [pc, #128]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0xb4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <MX_ADC1_Init+0xbc>)
 8000604:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC1_Init+0xb4>)
 800060e:	2202      	movs	r2, #2
 8000610:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000614:	2201      	movs	r2, #1
 8000616:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_ADC1_Init+0xb4>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000620:	4814      	ldr	r0, [pc, #80]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000622:	f000 fd7d 	bl	8001120 <HAL_ADC_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800062c:	f000 f9f0 	bl	8000a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000630:	2300      	movs	r3, #0
 8000632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000634:	2301      	movs	r3, #1
 8000636:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_ADC1_Init+0xb4>)
 8000642:	f001 f801 	bl	8001648 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800064c:	f000 f9e0 	bl	8000a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000650:	2301      	movs	r3, #1
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xb4>)
 800065e:	f000 fff3 	bl	8001648 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000668:	f000 f9d2 	bl	8000a10 <Error_Handler>
  }

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000098 	.word	0x20000098
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a31      	ldr	r2, [pc, #196]	; (8000764 <HAL_ADC_MspInit+0xe4>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d15c      	bne.n	800075c <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b30      	ldr	r3, [pc, #192]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	4a2f      	ldr	r2, [pc, #188]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6453      	str	r3, [r2, #68]	; 0x44
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b29      	ldr	r3, [pc, #164]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a28      	ldr	r2, [pc, #160]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <HAL_ADC_MspInit+0xe8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006da:	2303      	movs	r3, #3
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	481f      	ldr	r0, [pc, #124]	; (800076c <HAL_ADC_MspInit+0xec>)
 80006ee:	f001 ff07 	bl	8002500 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 80006f4:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <HAL_ADC_MspInit+0xf4>)
 80006f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000704:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 800070c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000710:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000730:	480f      	ldr	r0, [pc, #60]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000732:	f001 fb55 	bl	8001de0 <HAL_DMA_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800073c:	f000 f968 	bl	8000a10 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000744:	639a      	str	r2, [r3, #56]	; 0x38
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <HAL_ADC_MspInit+0xf0>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	2012      	movs	r0, #18
 8000752:	f001 fb0e 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000756:	2012      	movs	r0, #18
 8000758:	f001 fb27 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40012000 	.word	0x40012000
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000
 8000770:	200000e0 	.word	0x200000e0
 8000774:	40026410 	.word	0x40026410

08000778 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_DMA_Init+0x5c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_DMA_Init+0x5c>)
 8000788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_DMA_Init+0x5c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2038      	movs	r0, #56	; 0x38
 80007a0:	f001 fae7 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007a4:	2038      	movs	r0, #56	; 0x38
 80007a6:	f001 fb00 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	203a      	movs	r0, #58	; 0x3a
 80007b0:	f001 fadf 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007b4:	203a      	movs	r0, #58	; 0x3a
 80007b6:	f001 faf8 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2046      	movs	r0, #70	; 0x46
 80007c0:	f001 fad7 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80007c4:	2046      	movs	r0, #70	; 0x46
 80007c6:	f001 faf0 	bl	8001daa <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_GPIO_Init+0x30>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <MX_GPIO_Init+0x30>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_GPIO_Init+0x30>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 fc14 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f826 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f7ff ffde 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800081c:	f7ff ffac 	bl	8000778 <MX_DMA_Init>
  MX_TIM10_Init();
 8000820:	f000 fa2a 	bl	8000c78 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000824:	f000 faba 	bl	8000d9c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000828:	f7ff feca 	bl	80005c0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800082c:	f000 f9d6 	bl	8000bdc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000830:	f000 fa8a 	bl	8000d48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000834:	4806      	ldr	r0, [pc, #24]	; (8000850 <main+0x44>)
 8000836:	f002 fce6 	bl	8003206 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1, &pData, bufferSize); //! Armazena o dado recebido pela serial
 800083a:	2201      	movs	r2, #1
 800083c:	4905      	ldr	r1, [pc, #20]	; (8000854 <main+0x48>)
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <main+0x4c>)
 8000840:	f003 f970 	bl	8003b24 <HAL_UART_Receive_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, NumberOfConversions); //!Inicia a memória DMA para armazenar os valores da sequência de conversão de 3 canais do AD
 8000844:	2202      	movs	r2, #2
 8000846:	4905      	ldr	r1, [pc, #20]	; (800085c <main+0x50>)
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <main+0x54>)
 800084a:	f000 fded 	bl	8001428 <HAL_ADC_Start_DMA>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800084e:	e7fe      	b.n	800084e <main+0x42>
 8000850:	20000318 	.word	0x20000318
 8000854:	20000140 	.word	0x20000140
 8000858:	20000418 	.word	0x20000418
 800085c:	200002d4 	.word	0x200002d4
 8000860:	20000098 	.word	0x20000098

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2234      	movs	r2, #52	; 0x34
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f004 f89e 	bl	80049b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b23      	ldr	r3, [pc, #140]	; (800091c <SystemClock_Config+0xb8>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a22      	ldr	r2, [pc, #136]	; (800091c <SystemClock_Config+0xb8>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b20      	ldr	r3, [pc, #128]	; (800091c <SystemClock_Config+0xb8>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <SystemClock_Config+0xbc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <SystemClock_Config+0xbc>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <SystemClock_Config+0xbc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 fa0f 	bl	8002cfc <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008e4:	f000 f894 	bl	8000a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e8:	230f      	movs	r3, #15
 80008ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f001 ff8e 	bl	8002824 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800090e:	f000 f87f 	bl	8000a10 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3750      	adds	r7, #80	; 0x50
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	/*adc_values[0] += '0';
	adc_values[1] += '0';*/
	//HAL_UART_Transmit(&huart2, &adc_values, sizeof(adc_values), SerialTimeOut);
	//HAL_UART_Transmit(&huart1, &adc_values, sizeof(adc_values), SerialTimeOut);

}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	/* Em teoria, os valores de CCR1 ficam na ordem correta da conversão dos canais, o valor convertido é armazenado no vetor e a posicao de memoria eh incrementada a cada leitura*/
	// HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length);

	if(htim->Instance == TIM2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000948:	d104      	bne.n	8000954 <HAL_TIM_PeriodElapsedCallback+0x1c>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_values, NumberOfConversions); //!Inicia a memória DMA para armazenar os valores da sequência de conversão de 3 canais do AD
 800094a:	2202      	movs	r2, #2
 800094c:	4903      	ldr	r1, [pc, #12]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800094e:	4804      	ldr	r0, [pc, #16]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000950:	f000 fd6a 	bl	8001428 <HAL_ADC_Start_DMA>

}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200002d4 	.word	0x200002d4
 8000960:	20000098 	.word	0x20000098

08000964 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000964:	b5b0      	push	{r4, r5, r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af02      	add	r7, sp, #8
 800096a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <HAL_UART_RxCpltCallback+0x90>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d13a      	bne.n	80009ec <HAL_UART_RxCpltCallback+0x88>
	{
		//HAL_UART_Receive_IT(&huart1, &pData, bufferSize); //! Armazena o dado recebido pela serial
		if(pData == 'r')
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <HAL_UART_RxCpltCallback+0x94>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b72      	cmp	r3, #114	; 0x72
 800097c:	d118      	bne.n	80009b0 <HAL_UART_RxCpltCallback+0x4c>
		{
			snprintf(msg,TAM_MSG,"{'Umidade' : '%lu', 'Luminosidade': '%lu'}",adc_values[0],adc_values[1]);
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <HAL_UART_RxCpltCallback+0x98>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <HAL_UART_RxCpltCallback+0x98>)
 8000986:	785b      	ldrb	r3, [r3, #1]
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	4613      	mov	r3, r2
 800098c:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <HAL_UART_RxCpltCallback+0x9c>)
 800098e:	2164      	movs	r1, #100	; 0x64
 8000990:	481c      	ldr	r0, [pc, #112]	; (8000a04 <HAL_UART_RxCpltCallback+0xa0>)
 8000992:	f004 f817 	bl	80049c4 <sniprintf>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)msg, strlen(msg));
 8000996:	481b      	ldr	r0, [pc, #108]	; (8000a04 <HAL_UART_RxCpltCallback+0xa0>)
 8000998:	f7ff fc3a 	bl	8000210 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	b29b      	uxth	r3, r3
 80009a0:	461a      	mov	r2, r3
 80009a2:	4918      	ldr	r1, [pc, #96]	; (8000a04 <HAL_UART_RxCpltCallback+0xa0>)
 80009a4:	4818      	ldr	r0, [pc, #96]	; (8000a08 <HAL_UART_RxCpltCallback+0xa4>)
 80009a6:	f003 f851 	bl	8003a4c <HAL_UART_Transmit_DMA>
			pData = 0;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <HAL_UART_RxCpltCallback+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_DMA(&huart1, &pData, bufferSize); //! Armazena o dado recebido pela serial
 80009b0:	2201      	movs	r2, #1
 80009b2:	4911      	ldr	r1, [pc, #68]	; (80009f8 <HAL_UART_RxCpltCallback+0x94>)
 80009b4:	4814      	ldr	r0, [pc, #80]	; (8000a08 <HAL_UART_RxCpltCallback+0xa4>)
 80009b6:	f003 f8b5 	bl	8003b24 <HAL_UART_Receive_DMA>
		if(pData == 'h')
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_UART_RxCpltCallback+0x94>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b68      	cmp	r3, #104	; 0x68
 80009c0:	d114      	bne.n	80009ec <HAL_UART_RxCpltCallback+0x88>
		{
			snprintf(msg,TAM_MSG,"hello, how are you?");
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_UART_RxCpltCallback+0xa0>)
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_UART_RxCpltCallback+0xa8>)
 80009c6:	4614      	mov	r4, r2
 80009c8:	461d      	mov	r5, r3
 80009ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ce:	682b      	ldr	r3, [r5, #0]
 80009d0:	6023      	str	r3, [r4, #0]
			HAL_UART_Transmit_DMA(&huart1, (uint8_t*)msg, strlen(msg));
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <HAL_UART_RxCpltCallback+0xa0>)
 80009d4:	f7ff fc1c 	bl	8000210 <strlen>
 80009d8:	4603      	mov	r3, r0
 80009da:	b29b      	uxth	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	4909      	ldr	r1, [pc, #36]	; (8000a04 <HAL_UART_RxCpltCallback+0xa0>)
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <HAL_UART_RxCpltCallback+0xa4>)
 80009e2:	f003 f833 	bl	8003a4c <HAL_UART_Transmit_DMA>
			pData = 0;
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <HAL_UART_RxCpltCallback+0x94>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bdb0      	pop	{r4, r5, r7, pc}
 80009f4:	40011000 	.word	0x40011000
 80009f8:	20000140 	.word	0x20000140
 80009fc:	200002d4 	.word	0x200002d4
 8000a00:	08005210 	.word	0x08005210
 8000a04:	20000144 	.word	0x20000144
 8000a08:	20000418 	.word	0x20000418
 8000a0c:	0800523c 	.word	0x0800523c

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 fb0c 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <ADC_IRQHandler+0x10>)
 8000ad2:	f000 fb68 	bl	80011a6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000098 	.word	0x20000098

08000ae0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ae6:	f002 fbb2 	bl	800324e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200002d8 	.word	0x200002d8

08000af4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <TIM2_IRQHandler+0x10>)
 8000afa:	f002 fba8 	bl	800324e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000318 	.word	0x20000318

08000b08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <USART1_IRQHandler+0x10>)
 8000b0e:	f003 f889 	bl	8003c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000418 	.word	0x20000418

08000b1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <DMA2_Stream0_IRQHandler+0x10>)
 8000b22:	f001 fa85 	bl	8002030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000e0 	.word	0x200000e0

08000b30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <DMA2_Stream2_IRQHandler+0x10>)
 8000b36:	f001 fa7b 	bl	8002030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200003b8 	.word	0x200003b8

08000b44 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <DMA2_Stream7_IRQHandler+0x10>)
 8000b4a:	f001 fa71 	bl	8002030 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000358 	.word	0x20000358

08000b58 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <_sbrk+0x50>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x16>
		heap_end = &end;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <_sbrk+0x50>)
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <_sbrk+0x54>)
 8000b6c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <_sbrk+0x50>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <_sbrk+0x50>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	466a      	mov	r2, sp
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d907      	bls.n	8000b92 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b82:	f003 feed 	bl	8004960 <__errno>
 8000b86:	4602      	mov	r2, r0
 8000b88:	230c      	movs	r3, #12
 8000b8a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	e006      	b.n	8000ba0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <_sbrk+0x50>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <_sbrk+0x50>)
 8000b9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000008c 	.word	0x2000008c
 8000bac:	200004a0 	.word	0x200004a0

08000bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <SystemInit+0x28>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bba:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <SystemInit+0x28>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SystemInit+0x28>)
 8000bc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bca:	609a      	str	r2, [r3, #8]
#endif
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_TIM2_Init+0x98>)
 8000bfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_TIM2_Init+0x98>)
 8000c02:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000c06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_TIM2_Init+0x98>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_TIM2_Init+0x98>)
 8000c10:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000c14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_TIM2_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_TIM2_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c22:	4814      	ldr	r0, [pc, #80]	; (8000c74 <MX_TIM2_Init+0x98>)
 8000c24:	f002 fac4 	bl	80031b0 <HAL_TIM_Base_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c2e:	f7ff feef 	bl	8000a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <MX_TIM2_Init+0x98>)
 8000c40:	f002 fc0d 	bl	800345e <HAL_TIM_ConfigClockSource>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c4a:	f7ff fee1 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <MX_TIM2_Init+0x98>)
 8000c5c:	f002 fe18 	bl	8003890 <HAL_TIMEx_MasterConfigSynchronization>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c66:	f7ff fed3 	bl	8000a10 <Error_Handler>
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000318 	.word	0x20000318

08000c78 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_TIM10_Init+0x40>)
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <MX_TIM10_Init+0x44>)
 8000c80:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 8399;
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <MX_TIM10_Init+0x40>)
 8000c84:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000c88:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_TIM10_Init+0x40>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 99;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_TIM10_Init+0x40>)
 8000c92:	2263      	movs	r2, #99	; 0x63
 8000c94:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_TIM10_Init+0x40>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_TIM10_Init+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM10_Init+0x40>)
 8000ca4:	f002 fa84 	bl	80031b0 <HAL_TIM_Base_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000cae:	f7ff feaf 	bl	8000a10 <Error_Handler>
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200002d8 	.word	0x200002d8
 8000cbc:	40014400 	.word	0x40014400

08000cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd0:	d116      	bne.n	8000d00 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <HAL_TIM_Base_MspInit+0x80>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_TIM_Base_MspInit+0x80>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_TIM_Base_MspInit+0x80>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	201c      	movs	r0, #28
 8000cf4:	f001 f83d 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cf8:	201c      	movs	r0, #28
 8000cfa:	f001 f856 	bl	8001daa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8000cfe:	e01a      	b.n	8000d36 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM10)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <HAL_TIM_Base_MspInit+0x84>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d115      	bne.n	8000d36 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_TIM_Base_MspInit+0x80>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <HAL_TIM_Base_MspInit+0x80>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_TIM_Base_MspInit+0x80>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2019      	movs	r0, #25
 8000d2c:	f001 f821 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d30:	2019      	movs	r0, #25
 8000d32:	f001 f83a 	bl	8001daa <HAL_NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40014400 	.word	0x40014400

08000d48 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART1_UART_Init+0x4c>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <MX_USART1_UART_Init+0x50>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_USART1_UART_Init+0x4c>)
 8000d54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART1_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART1_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART1_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART1_UART_Init+0x4c>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART1_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART1_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART1_UART_Init+0x4c>)
 8000d80:	f002 fe16 	bl	80039b0 <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d8a:	f7ff fe41 	bl	8000a10 <Error_Handler>
  }

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000418 	.word	0x20000418
 8000d98:	40011000 	.word	0x40011000

08000d9c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MX_USART2_UART_Init+0x50>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	f002 fdec 	bl	80039b0 <HAL_UART_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dde:	f7ff fe17 	bl	8000a10 <Error_Handler>
  }

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000458 	.word	0x20000458
 8000dec:	40004400 	.word	0x40004400

08000df0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a6e      	ldr	r2, [pc, #440]	; (8000fc8 <HAL_UART_MspInit+0x1d8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	f040 80a4 	bne.w	8000f5c <HAL_UART_MspInit+0x16c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
 8000e18:	4b6c      	ldr	r3, [pc, #432]	; (8000fcc <HAL_UART_MspInit+0x1dc>)
 8000e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1c:	4a6b      	ldr	r2, [pc, #428]	; (8000fcc <HAL_UART_MspInit+0x1dc>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	6453      	str	r3, [r2, #68]	; 0x44
 8000e24:	4b69      	ldr	r3, [pc, #420]	; (8000fcc <HAL_UART_MspInit+0x1dc>)
 8000e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e28:	f003 0310 	and.w	r3, r3, #16
 8000e2c:	61bb      	str	r3, [r7, #24]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	4b65      	ldr	r3, [pc, #404]	; (8000fcc <HAL_UART_MspInit+0x1dc>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a64      	ldr	r2, [pc, #400]	; (8000fcc <HAL_UART_MspInit+0x1dc>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b62      	ldr	r3, [pc, #392]	; (8000fcc <HAL_UART_MspInit+0x1dc>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e4c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e5e:	2307      	movs	r3, #7
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4859      	ldr	r0, [pc, #356]	; (8000fd0 <HAL_UART_MspInit+0x1e0>)
 8000e6a:	f001 fb49 	bl	8002500 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000e6e:	4b59      	ldr	r3, [pc, #356]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000e70:	4a59      	ldr	r2, [pc, #356]	; (8000fd8 <HAL_UART_MspInit+0x1e8>)
 8000e72:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000e74:	4b57      	ldr	r3, [pc, #348]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000e76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e7c:	4b55      	ldr	r3, [pc, #340]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e82:	4b54      	ldr	r3, [pc, #336]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e88:	4b52      	ldr	r3, [pc, #328]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e8e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e90:	4b50      	ldr	r3, [pc, #320]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e96:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e9c:	4b4d      	ldr	r3, [pc, #308]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea2:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ea8:	4b4a      	ldr	r3, [pc, #296]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000eaa:	2204      	movs	r2, #4
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000eae:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000eb4:	4b47      	ldr	r3, [pc, #284]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000eba:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ec0:	4844      	ldr	r0, [pc, #272]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000ec2:	f000 ff8d 	bl	8001de0 <HAL_DMA_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8000ecc:	f7ff fda0 	bl	8000a10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a40      	ldr	r2, [pc, #256]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed6:	4a3f      	ldr	r2, [pc, #252]	; (8000fd4 <HAL_UART_MspInit+0x1e4>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000edc:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000ede:	4a40      	ldr	r2, [pc, #256]	; (8000fe0 <HAL_UART_MspInit+0x1f0>)
 8000ee0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000ee2:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000ee4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ee8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eea:	4b3c      	ldr	r3, [pc, #240]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000eec:	2240      	movs	r2, #64	; 0x40
 8000eee:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef6:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f04:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f0a:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f10:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000f18:	2204      	movs	r2, #4
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000f1e:	2203      	movs	r2, #3
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f28:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f2e:	482b      	ldr	r0, [pc, #172]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000f30:	f000 ff56 	bl	8001de0 <HAL_DMA_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8000f3a:	f7ff fd69 	bl	8000a10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a26      	ldr	r2, [pc, #152]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000f42:	631a      	str	r2, [r3, #48]	; 0x30
 8000f44:	4a25      	ldr	r2, [pc, #148]	; (8000fdc <HAL_UART_MspInit+0x1ec>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2025      	movs	r0, #37	; 0x25
 8000f50:	f000 ff0f 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f54:	2025      	movs	r0, #37	; 0x25
 8000f56:	f000 ff28 	bl	8001daa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f5a:	e030      	b.n	8000fbe <HAL_UART_MspInit+0x1ce>
  else if(uartHandle->Instance==USART2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <HAL_UART_MspInit+0x1f4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d12b      	bne.n	8000fbe <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_UART_MspInit+0x1dc>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <HAL_UART_MspInit+0x1dc>)
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_UART_MspInit+0x1dc>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_UART_MspInit+0x1dc>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <HAL_UART_MspInit+0x1dc>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_UART_MspInit+0x1dc>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f9e:	230c      	movs	r3, #12
 8000fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <HAL_UART_MspInit+0x1e0>)
 8000fba:	f001 faa1 	bl	8002500 <HAL_GPIO_Init>
}
 8000fbe:	bf00      	nop
 8000fc0:	3730      	adds	r7, #48	; 0x30
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	200003b8 	.word	0x200003b8
 8000fd8:	40026440 	.word	0x40026440
 8000fdc:	20000358 	.word	0x20000358
 8000fe0:	400264b8 	.word	0x400264b8
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fee:	e003      	b.n	8000ff8 <LoopCopyDataInit>

08000ff0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ff2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ff4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ff6:	3104      	adds	r1, #4

08000ff8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ffc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ffe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001000:	d3f6      	bcc.n	8000ff0 <CopyDataInit>
  ldr  r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001004:	e002      	b.n	800100c <LoopFillZerobss>

08001006 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001006:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001008:	f842 3b04 	str.w	r3, [r2], #4

0800100c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800100e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001010:	d3f9      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001012:	f7ff fdcd 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f003 fca9 	bl	800496c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fbf7 	bl	800080c <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001020:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001024:	080052b4 	.word	0x080052b4
  ldr  r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800102c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001030:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001034:	200004a0 	.word	0x200004a0

08001038 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <CAN1_RX0_IRQHandler>
	...

0800103c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0d      	ldr	r2, [pc, #52]	; (800107c <HAL_Init+0x40>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800104c:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_Init+0x40>)
 8001052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x40>)
 800105e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 fe79 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fcd6 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023c00 	.word	0x40023c00

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fe91 	bl	8001dc6 <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 fe59 	bl	8001d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	20000498 	.word	0x20000498

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	20000498 	.word	0x20000498

08001120 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e033      	b.n	800119e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2b00      	cmp	r3, #0
 800113c:	d109      	bne.n	8001152 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fa9e 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	d118      	bne.n	8001190 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001166:	f023 0302 	bic.w	r3, r3, #2
 800116a:	f043 0202 	orr.w	r2, r3, #2
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 fb9a 	bl	80018ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f023 0303 	bic.w	r3, r3, #3
 8001186:	f043 0201 	orr.w	r2, r3, #1
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
 800118e:	e001      	b.n	8001194 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	2b20      	cmp	r3, #32
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d049      	beq.n	800127c <HAL_ADC_IRQHandler+0xd6>
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d046      	beq.n	800127c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d105      	bne.n	8001206 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d12b      	bne.n	800126c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001218:	2b00      	cmp	r3, #0
 800121a:	d127      	bne.n	800126c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001234:	2b00      	cmp	r3, #0
 8001236:	d119      	bne.n	800126c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0220 	bic.w	r2, r2, #32
 8001246:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d105      	bne.n	800126c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f043 0201 	orr.w	r2, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff fb59 	bl	8000924 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f06f 0212 	mvn.w	r2, #18
 800127a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf0c      	ite	eq
 800128a:	2301      	moveq	r3, #1
 800128c:	2300      	movne	r3, #0
 800128e:	b2db      	uxtb	r3, r3
 8001290:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129c:	2b80      	cmp	r3, #128	; 0x80
 800129e:	bf0c      	ite	eq
 80012a0:	2301      	moveq	r3, #1
 80012a2:	2300      	movne	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d057      	beq.n	800135e <HAL_ADC_IRQHandler+0x1b8>
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d054      	beq.n	800135e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d105      	bne.n	80012cc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d139      	bne.n	800134e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d12b      	bne.n	800134e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001300:	2b00      	cmp	r3, #0
 8001302:	d124      	bne.n	800134e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800130e:	2b00      	cmp	r3, #0
 8001310:	d11d      	bne.n	800134e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001316:	2b00      	cmp	r3, #0
 8001318:	d119      	bne.n	800134e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001328:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d105      	bne.n	800134e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f043 0201 	orr.w	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fc2a 	bl	8001ba8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f06f 020c 	mvn.w	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b01      	cmp	r3, #1
 800136a:	bf0c      	ite	eq
 800136c:	2301      	moveq	r3, #1
 800136e:	2300      	movne	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137e:	2b40      	cmp	r3, #64	; 0x40
 8001380:	bf0c      	ite	eq
 8001382:	2301      	moveq	r3, #1
 8001384:	2300      	movne	r3, #0
 8001386:	b2db      	uxtb	r3, r3
 8001388:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d017      	beq.n	80013c0 <HAL_ADC_IRQHandler+0x21a>
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d014      	beq.n	80013c0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d10d      	bne.n	80013c0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f935 	bl	8001620 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f06f 0201 	mvn.w	r2, #1
 80013be:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0320 	and.w	r3, r3, #32
 80013ca:	2b20      	cmp	r3, #32
 80013cc:	bf0c      	ite	eq
 80013ce:	2301      	moveq	r3, #1
 80013d0:	2300      	movne	r3, #0
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80013e4:	bf0c      	ite	eq
 80013e6:	2301      	moveq	r3, #1
 80013e8:	2300      	movne	r3, #0
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d015      	beq.n	8001420 <HAL_ADC_IRQHandler+0x27a>
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d012      	beq.n	8001420 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f043 0202 	orr.w	r2, r3, #2
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f06f 0220 	mvn.w	r2, #32
 800140e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f90f 	bl	8001634 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f06f 0220 	mvn.w	r2, #32
 800141e:	601a      	str	r2, [r3, #0]
  }
}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <HAL_ADC_Start_DMA+0x1e>
 8001442:	2302      	movs	r3, #2
 8001444:	e0cc      	b.n	80015e0 <HAL_ADC_Start_DMA+0x1b8>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b01      	cmp	r3, #1
 800145a:	d018      	beq.n	800148e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0201 	orr.w	r2, r2, #1
 800146a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800146c:	4b5e      	ldr	r3, [pc, #376]	; (80015e8 <HAL_ADC_Start_DMA+0x1c0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a5e      	ldr	r2, [pc, #376]	; (80015ec <HAL_ADC_Start_DMA+0x1c4>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	0c9a      	lsrs	r2, r3, #18
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001480:	e002      	b.n	8001488 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	3b01      	subs	r3, #1
 8001486:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f9      	bne.n	8001482 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b01      	cmp	r3, #1
 800149a:	f040 80a0 	bne.w	80015de <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014dc:	d106      	bne.n	80014ec <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f023 0206 	bic.w	r2, r3, #6
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	645a      	str	r2, [r3, #68]	; 0x44
 80014ea:	e002      	b.n	80014f2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <HAL_ADC_Start_DMA+0x1c8>)
 80014fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001502:	4a3c      	ldr	r2, [pc, #240]	; (80015f4 <HAL_ADC_Start_DMA+0x1cc>)
 8001504:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150a:	4a3b      	ldr	r2, [pc, #236]	; (80015f8 <HAL_ADC_Start_DMA+0x1d0>)
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001512:	4a3a      	ldr	r2, [pc, #232]	; (80015fc <HAL_ADC_Start_DMA+0x1d4>)
 8001514:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800151e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800152e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800153e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	334c      	adds	r3, #76	; 0x4c
 800154a:	4619      	mov	r1, r3
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f000 fcf4 	bl	8001f3c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	2b00      	cmp	r3, #0
 800155e:	d12a      	bne.n	80015b6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a26      	ldr	r2, [pc, #152]	; (8001600 <HAL_ADC_Start_DMA+0x1d8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d015      	beq.n	8001596 <HAL_ADC_Start_DMA+0x16e>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a25      	ldr	r2, [pc, #148]	; (8001604 <HAL_ADC_Start_DMA+0x1dc>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d105      	bne.n	8001580 <HAL_ADC_Start_DMA+0x158>
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <HAL_ADC_Start_DMA+0x1c8>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00a      	beq.n	8001596 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a20      	ldr	r2, [pc, #128]	; (8001608 <HAL_ADC_Start_DMA+0x1e0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d129      	bne.n	80015de <HAL_ADC_Start_DMA+0x1b6>
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_ADC_Start_DMA+0x1c8>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	2b0f      	cmp	r3, #15
 8001594:	d823      	bhi.n	80015de <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d11c      	bne.n	80015de <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	e013      	b.n	80015de <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a11      	ldr	r2, [pc, #68]	; (8001600 <HAL_ADC_Start_DMA+0x1d8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d10e      	bne.n	80015de <HAL_ADC_Start_DMA+0x1b6>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d107      	bne.n	80015de <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015dc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000000 	.word	0x20000000
 80015ec:	431bde83 	.word	0x431bde83
 80015f0:	40012300 	.word	0x40012300
 80015f4:	08001aa5 	.word	0x08001aa5
 80015f8:	08001b5f 	.word	0x08001b5f
 80015fc:	08001b7b 	.word	0x08001b7b
 8001600:	40012000 	.word	0x40012000
 8001604:	40012100 	.word	0x40012100
 8001608:	40012200 	.word	0x40012200

0800160c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x1c>
 8001660:	2302      	movs	r3, #2
 8001662:	e113      	b.n	800188c <HAL_ADC_ConfigChannel+0x244>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b09      	cmp	r3, #9
 8001672:	d925      	bls.n	80016c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68d9      	ldr	r1, [r3, #12]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	3b1e      	subs	r3, #30
 800168a:	2207      	movs	r2, #7
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43da      	mvns	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	400a      	ands	r2, r1
 8001698:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68d9      	ldr	r1, [r3, #12]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	4603      	mov	r3, r0
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4403      	add	r3, r0
 80016b2:	3b1e      	subs	r3, #30
 80016b4:	409a      	lsls	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	e022      	b.n	8001706 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6919      	ldr	r1, [r3, #16]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	2207      	movs	r2, #7
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	400a      	ands	r2, r1
 80016e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6919      	ldr	r1, [r3, #16]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	4603      	mov	r3, r0
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4403      	add	r3, r0
 80016fc:	409a      	lsls	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b06      	cmp	r3, #6
 800170c:	d824      	bhi.n	8001758 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b05      	subs	r3, #5
 8001720:	221f      	movs	r2, #31
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	400a      	ands	r2, r1
 800172e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b05      	subs	r3, #5
 800174a:	fa00 f203 	lsl.w	r2, r0, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	635a      	str	r2, [r3, #52]	; 0x34
 8001756:	e04c      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b0c      	cmp	r3, #12
 800175e:	d824      	bhi.n	80017aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	3b23      	subs	r3, #35	; 0x23
 8001772:	221f      	movs	r2, #31
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43da      	mvns	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	400a      	ands	r2, r1
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	b29b      	uxth	r3, r3
 800178e:	4618      	mov	r0, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	3b23      	subs	r3, #35	; 0x23
 800179c:	fa00 f203 	lsl.w	r2, r0, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
 80017a8:	e023      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	3b41      	subs	r3, #65	; 0x41
 80017bc:	221f      	movs	r2, #31
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	400a      	ands	r2, r1
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4618      	mov	r0, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	3b41      	subs	r3, #65	; 0x41
 80017e6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_ADC_ConfigChannel+0x250>)
 80017f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a28      	ldr	r2, [pc, #160]	; (800189c <HAL_ADC_ConfigChannel+0x254>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d10f      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x1d8>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b12      	cmp	r3, #18
 8001806:	d10b      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_ADC_ConfigChannel+0x254>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d12b      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x23a>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <HAL_ADC_ConfigChannel+0x258>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d003      	beq.n	800183c <HAL_ADC_ConfigChannel+0x1f4>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b11      	cmp	r3, #17
 800183a:	d122      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <HAL_ADC_ConfigChannel+0x258>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d111      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_ADC_ConfigChannel+0x25c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <HAL_ADC_ConfigChannel+0x260>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	0c9a      	lsrs	r2, r3, #18
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001874:	e002      	b.n	800187c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3b01      	subs	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f9      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40012300 	.word	0x40012300
 800189c:	40012000 	.word	0x40012000
 80018a0:	10000012 	.word	0x10000012
 80018a4:	20000000 	.word	0x20000000
 80018a8:	431bde83 	.word	0x431bde83

080018ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018b4:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <ADC_Init+0x1f0>)
 80018b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	021a      	lsls	r2, r3, #8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001904:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6899      	ldr	r1, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <ADC_Init+0x1f4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d022      	beq.n	800198a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001952:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6899      	ldr	r1, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6899      	ldr	r1, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	e00f      	b.n	80019aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001998:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0202 	bic.w	r2, r2, #2
 80019b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6899      	ldr	r1, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7e1b      	ldrb	r3, [r3, #24]
 80019c4:	005a      	lsls	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d01b      	beq.n	8001a10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6859      	ldr	r1, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	3b01      	subs	r3, #1
 8001a04:	035a      	lsls	r2, r3, #13
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	e007      	b.n	8001a20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	051a      	lsls	r2, r3, #20
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6899      	ldr	r1, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a62:	025a      	lsls	r2, r3, #9
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6899      	ldr	r1, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	029a      	lsls	r2, r3, #10
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	609a      	str	r2, [r3, #8]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40012300 	.word	0x40012300
 8001aa0:	0f000001 	.word	0x0f000001

08001aa4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d13c      	bne.n	8001b38 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d12b      	bne.n	8001b30 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d127      	bne.n	8001b30 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d119      	bne.n	8001b30 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0220 	bic.w	r2, r2, #32
 8001b0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7fe fef7 	bl	8000924 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b36:	e00e      	b.n	8001b56 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f003 0310 	and.w	r3, r3, #16
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff fd75 	bl	8001634 <HAL_ADC_ErrorCallback>
}
 8001b4a:	e004      	b.n	8001b56 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff fd4d 	bl	800160c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b86:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2240      	movs	r2, #64	; 0x40
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f043 0204 	orr.w	r2, r3, #4
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f7ff fd4a 	bl	8001634 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4907      	ldr	r1, [pc, #28]	; (8001c58 <__NVIC_EnableIRQ+0x38>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff29 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d84:	f7ff ff3e 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f7ff ff8e 	bl	8001cb0 <NVIC_EncodePriority>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff31 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffa2 	bl	8001d18 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff f98c 	bl	8001108 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e099      	b.n	8001f30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1c:	e00f      	b.n	8001e3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1e:	f7ff f973 	bl	8001108 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d908      	bls.n	8001e3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e078      	b.n	8001f30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e8      	bne.n	8001e1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <HAL_DMA_Init+0x158>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d107      	bne.n	8001ea8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f023 0307 	bic.w	r3, r3, #7
 8001ebe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d117      	bne.n	8001f02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00e      	beq.n	8001f02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fa91 	bl	800240c <DMA_CheckFifoParam>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2240      	movs	r2, #64	; 0x40
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001efe:	2301      	movs	r3, #1
 8001f00:	e016      	b.n	8001f30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fa48 	bl	80023a0 <DMA_CalcBaseAndBitshift>
 8001f10:	4603      	mov	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f18:	223f      	movs	r2, #63	; 0x3f
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	f010803f 	.word	0xf010803f

08001f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_DMA_Start_IT+0x26>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e040      	b.n	8001fe4 <HAL_DMA_Start_IT+0xa8>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d12f      	bne.n	8001fd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f9da 	bl	8002344 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	223f      	movs	r2, #63	; 0x3f
 8001f96:	409a      	lsls	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0216 	orr.w	r2, r2, #22
 8001faa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0208 	orr.w	r2, r2, #8
 8001fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e005      	b.n	8001fe2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d004      	beq.n	800200a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2280      	movs	r2, #128	; 0x80
 8002004:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e00c      	b.n	8002024 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2205      	movs	r2, #5
 800200e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800203c:	4b92      	ldr	r3, [pc, #584]	; (8002288 <HAL_DMA_IRQHandler+0x258>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a92      	ldr	r2, [pc, #584]	; (800228c <HAL_DMA_IRQHandler+0x25c>)
 8002042:	fba2 2303 	umull	r2, r3, r2, r3
 8002046:	0a9b      	lsrs	r3, r3, #10
 8002048:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2208      	movs	r2, #8
 800205c:	409a      	lsls	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d01a      	beq.n	800209c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0204 	bic.w	r2, r2, #4
 8002082:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	2208      	movs	r2, #8
 800208a:	409a      	lsls	r2, r3
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	2201      	movs	r2, #1
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d012      	beq.n	80020d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	2201      	movs	r2, #1
 80020c0:	409a      	lsls	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ca:	f043 0202 	orr.w	r2, r3, #2
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	2204      	movs	r2, #4
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d012      	beq.n	8002108 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00b      	beq.n	8002108 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2204      	movs	r2, #4
 80020f6:	409a      	lsls	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002100:	f043 0204 	orr.w	r2, r3, #4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2210      	movs	r2, #16
 800210e:	409a      	lsls	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d043      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d03c      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	2210      	movs	r2, #16
 800212c:	409a      	lsls	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d018      	beq.n	8002172 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d108      	bne.n	8002160 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d024      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
 800215e:	e01f      	b.n	80021a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01b      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
 8002170:	e016      	b.n	80021a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0208 	bic.w	r2, r2, #8
 800218e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	2220      	movs	r2, #32
 80021a6:	409a      	lsls	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 808e 	beq.w	80022ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8086 	beq.w	80022ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c6:	2220      	movs	r2, #32
 80021c8:	409a      	lsls	r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	d136      	bne.n	8002248 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0216 	bic.w	r2, r2, #22
 80021e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <HAL_DMA_IRQHandler+0x1da>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0208 	bic.w	r2, r2, #8
 8002218:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	223f      	movs	r2, #63	; 0x3f
 8002220:	409a      	lsls	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223a:	2b00      	cmp	r3, #0
 800223c:	d07d      	beq.n	800233a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	4798      	blx	r3
        }
        return;
 8002246:	e078      	b.n	800233a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d01c      	beq.n	8002290 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d108      	bne.n	8002276 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	2b00      	cmp	r3, #0
 800226a:	d030      	beq.n	80022ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	4798      	blx	r3
 8002274:	e02b      	b.n	80022ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	2b00      	cmp	r3, #0
 800227c:	d027      	beq.n	80022ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
 8002286:	e022      	b.n	80022ce <HAL_DMA_IRQHandler+0x29e>
 8002288:	20000000 	.word	0x20000000
 800228c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0210 	bic.w	r2, r2, #16
 80022ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d032      	beq.n	800233c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d022      	beq.n	8002328 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2205      	movs	r2, #5
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3301      	adds	r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	429a      	cmp	r2, r3
 8002304:	d307      	bcc.n	8002316 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f2      	bne.n	80022fa <HAL_DMA_IRQHandler+0x2ca>
 8002314:	e000      	b.n	8002318 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002316:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	4798      	blx	r3
 8002338:	e000      	b.n	800233c <HAL_DMA_IRQHandler+0x30c>
        return;
 800233a:	bf00      	nop
    }
  }
}
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop

08002344 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002360:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b40      	cmp	r3, #64	; 0x40
 8002370:	d108      	bne.n	8002384 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002382:	e007      	b.n	8002394 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	60da      	str	r2, [r3, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	3b10      	subs	r3, #16
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <DMA_CalcBaseAndBitshift+0x64>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ba:	4a13      	ldr	r2, [pc, #76]	; (8002408 <DMA_CalcBaseAndBitshift+0x68>)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d909      	bls.n	80023e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023d6:	f023 0303 	bic.w	r3, r3, #3
 80023da:	1d1a      	adds	r2, r3, #4
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	659a      	str	r2, [r3, #88]	; 0x58
 80023e0:	e007      	b.n	80023f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	aaaaaaab 	.word	0xaaaaaaab
 8002408:	08005268 	.word	0x08005268

0800240c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11f      	bne.n	8002466 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d855      	bhi.n	80024d8 <DMA_CheckFifoParam+0xcc>
 800242c:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <DMA_CheckFifoParam+0x28>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	08002445 	.word	0x08002445
 8002438:	08002457 	.word	0x08002457
 800243c:	08002445 	.word	0x08002445
 8002440:	080024d9 	.word	0x080024d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d045      	beq.n	80024dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002454:	e042      	b.n	80024dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800245e:	d13f      	bne.n	80024e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002464:	e03c      	b.n	80024e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800246e:	d121      	bne.n	80024b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d836      	bhi.n	80024e4 <DMA_CheckFifoParam+0xd8>
 8002476:	a201      	add	r2, pc, #4	; (adr r2, 800247c <DMA_CheckFifoParam+0x70>)
 8002478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247c:	0800248d 	.word	0x0800248d
 8002480:	08002493 	.word	0x08002493
 8002484:	0800248d 	.word	0x0800248d
 8002488:	080024a5 	.word	0x080024a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
      break;
 8002490:	e02f      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d024      	beq.n	80024e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a2:	e021      	b.n	80024e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024ac:	d11e      	bne.n	80024ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024b2:	e01b      	b.n	80024ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d902      	bls.n	80024c0 <DMA_CheckFifoParam+0xb4>
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d003      	beq.n	80024c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024be:	e018      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      break;
 80024c4:	e015      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00e      	beq.n	80024f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
      break;
 80024d6:	e00b      	b.n	80024f0 <DMA_CheckFifoParam+0xe4>
      break;
 80024d8:	bf00      	nop
 80024da:	e00a      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      break;
 80024dc:	bf00      	nop
 80024de:	e008      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      break;
 80024e0:	bf00      	nop
 80024e2:	e006      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      break;
 80024e4:	bf00      	nop
 80024e6:	e004      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      break;
 80024e8:	bf00      	nop
 80024ea:	e002      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80024ec:	bf00      	nop
 80024ee:	e000      	b.n	80024f2 <DMA_CheckFifoParam+0xe6>
      break;
 80024f0:	bf00      	nop
    }
  } 
  
  return status; 
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	e165      	b.n	80027e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800251c:	2201      	movs	r2, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	429a      	cmp	r2, r3
 8002536:	f040 8154 	bne.w	80027e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d00b      	beq.n	800255a <HAL_GPIO_Init+0x5a>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254e:	2b11      	cmp	r3, #17
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b12      	cmp	r3, #18
 8002558:	d130      	bne.n	80025bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	2203      	movs	r2, #3
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002590:	2201      	movs	r2, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 0201 	and.w	r2, r3, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0xfc>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b12      	cmp	r3, #18
 80025fa:	d123      	bne.n	8002644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	08da      	lsrs	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3208      	adds	r2, #8
 8002604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	220f      	movs	r2, #15
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	69b9      	ldr	r1, [r7, #24]
 8002640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0203 	and.w	r2, r3, #3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80ae 	beq.w	80027e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b5c      	ldr	r3, [pc, #368]	; (80027fc <HAL_GPIO_Init+0x2fc>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a5b      	ldr	r2, [pc, #364]	; (80027fc <HAL_GPIO_Init+0x2fc>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b59      	ldr	r3, [pc, #356]	; (80027fc <HAL_GPIO_Init+0x2fc>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026a2:	4a57      	ldr	r2, [pc, #348]	; (8002800 <HAL_GPIO_Init+0x300>)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	3302      	adds	r3, #2
 80026aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	220f      	movs	r2, #15
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4e      	ldr	r2, [pc, #312]	; (8002804 <HAL_GPIO_Init+0x304>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d025      	beq.n	800271a <HAL_GPIO_Init+0x21a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4d      	ldr	r2, [pc, #308]	; (8002808 <HAL_GPIO_Init+0x308>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d01f      	beq.n	8002716 <HAL_GPIO_Init+0x216>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4c      	ldr	r2, [pc, #304]	; (800280c <HAL_GPIO_Init+0x30c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d019      	beq.n	8002712 <HAL_GPIO_Init+0x212>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4b      	ldr	r2, [pc, #300]	; (8002810 <HAL_GPIO_Init+0x310>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0x20e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4a      	ldr	r2, [pc, #296]	; (8002814 <HAL_GPIO_Init+0x314>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00d      	beq.n	800270a <HAL_GPIO_Init+0x20a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a49      	ldr	r2, [pc, #292]	; (8002818 <HAL_GPIO_Init+0x318>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <HAL_GPIO_Init+0x206>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a48      	ldr	r2, [pc, #288]	; (800281c <HAL_GPIO_Init+0x31c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_GPIO_Init+0x202>
 80026fe:	2306      	movs	r3, #6
 8002700:	e00c      	b.n	800271c <HAL_GPIO_Init+0x21c>
 8002702:	2307      	movs	r3, #7
 8002704:	e00a      	b.n	800271c <HAL_GPIO_Init+0x21c>
 8002706:	2305      	movs	r3, #5
 8002708:	e008      	b.n	800271c <HAL_GPIO_Init+0x21c>
 800270a:	2304      	movs	r3, #4
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x21c>
 800270e:	2303      	movs	r3, #3
 8002710:	e004      	b.n	800271c <HAL_GPIO_Init+0x21c>
 8002712:	2302      	movs	r3, #2
 8002714:	e002      	b.n	800271c <HAL_GPIO_Init+0x21c>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_GPIO_Init+0x21c>
 800271a:	2300      	movs	r3, #0
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f002 0203 	and.w	r2, r2, #3
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	4093      	lsls	r3, r2
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800272c:	4934      	ldr	r1, [pc, #208]	; (8002800 <HAL_GPIO_Init+0x300>)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	3302      	adds	r3, #2
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800273a:	4b39      	ldr	r3, [pc, #228]	; (8002820 <HAL_GPIO_Init+0x320>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800275e:	4a30      	ldr	r2, [pc, #192]	; (8002820 <HAL_GPIO_Init+0x320>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002764:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <HAL_GPIO_Init+0x320>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002788:	4a25      	ldr	r2, [pc, #148]	; (8002820 <HAL_GPIO_Init+0x320>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_GPIO_Init+0x320>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b2:	4a1b      	ldr	r2, [pc, #108]	; (8002820 <HAL_GPIO_Init+0x320>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_GPIO_Init+0x320>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027dc:	4a10      	ldr	r2, [pc, #64]	; (8002820 <HAL_GPIO_Init+0x320>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3301      	adds	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	f67f ae96 	bls.w	800251c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	3724      	adds	r7, #36	; 0x24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40023800 	.word	0x40023800
 8002800:	40013800 	.word	0x40013800
 8002804:	40020000 	.word	0x40020000
 8002808:	40020400 	.word	0x40020400
 800280c:	40020800 	.word	0x40020800
 8002810:	40020c00 	.word	0x40020c00
 8002814:	40021000 	.word	0x40021000
 8002818:	40021400 	.word	0x40021400
 800281c:	40021800 	.word	0x40021800
 8002820:	40013c00 	.word	0x40013c00

08002824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0cc      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002838:	4b68      	ldr	r3, [pc, #416]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d90c      	bls.n	8002860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b65      	ldr	r3, [pc, #404]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b63      	ldr	r3, [pc, #396]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0b8      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002878:	4b59      	ldr	r3, [pc, #356]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002890:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a52      	ldr	r2, [pc, #328]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289c:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	494d      	ldr	r1, [pc, #308]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d044      	beq.n	8002944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d119      	bne.n	8002902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e07f      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e06f      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e067      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002902:	4b37      	ldr	r3, [pc, #220]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f023 0203 	bic.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4934      	ldr	r1, [pc, #208]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	4313      	orrs	r3, r2
 8002912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002914:	f7fe fbf8 	bl	8001108 <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	e00a      	b.n	8002932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291c:	f7fe fbf4 	bl	8001108 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e04f      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 020c 	and.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	429a      	cmp	r2, r3
 8002942:	d1eb      	bne.n	800291c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d20c      	bcs.n	800296c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e032      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4916      	ldr	r1, [pc, #88]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	490e      	ldr	r1, [pc, #56]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029aa:	f000 f855 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80029ae:	4601      	mov	r1, r0
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	5cd3      	ldrb	r3, [r2, r3]
 80029be:	fa21 f303 	lsr.w	r3, r1, r3
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fb58 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023c00 	.word	0x40023c00
 80029e0:	40023800 	.word	0x40023800
 80029e4:	08005250 	.word	0x08005250
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000000 	.word	0x20000000

08002a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a0c:	f7ff fff0 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a10:	4601      	mov	r1, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	0a9b      	lsrs	r3, r3, #10
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4a03      	ldr	r2, [pc, #12]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a1e:	5cd3      	ldrb	r3, [r2, r3]
 8002a20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	08005260 	.word	0x08005260

08002a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a34:	f7ff ffdc 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a38:	4601      	mov	r1, r0
 8002a3a:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0b5b      	lsrs	r3, r3, #13
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4a03      	ldr	r2, [pc, #12]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a46:	5cd3      	ldrb	r3, [r2, r3]
 8002a48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08005260 	.word	0x08005260

08002a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a72:	4b9f      	ldr	r3, [pc, #636]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	f200 8130 	bhi.w	8002ce0 <HAL_RCC_GetSysClockFreq+0x288>
 8002a80:	a201      	add	r2, pc, #4	; (adr r2, 8002a88 <HAL_RCC_GetSysClockFreq+0x30>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002abd 	.word	0x08002abd
 8002a8c:	08002ce1 	.word	0x08002ce1
 8002a90:	08002ce1 	.word	0x08002ce1
 8002a94:	08002ce1 	.word	0x08002ce1
 8002a98:	08002ac3 	.word	0x08002ac3
 8002a9c:	08002ce1 	.word	0x08002ce1
 8002aa0:	08002ce1 	.word	0x08002ce1
 8002aa4:	08002ce1 	.word	0x08002ce1
 8002aa8:	08002ac9 	.word	0x08002ac9
 8002aac:	08002ce1 	.word	0x08002ce1
 8002ab0:	08002ce1 	.word	0x08002ce1
 8002ab4:	08002ce1 	.word	0x08002ce1
 8002ab8:	08002bd7 	.word	0x08002bd7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002abc:	4b8d      	ldr	r3, [pc, #564]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002abe:	613b      	str	r3, [r7, #16]
       break;
 8002ac0:	e111      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac2:	4b8d      	ldr	r3, [pc, #564]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002ac4:	613b      	str	r3, [r7, #16]
      break;
 8002ac6:	e10e      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ac8:	4b89      	ldr	r3, [pc, #548]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ad2:	4b87      	ldr	r3, [pc, #540]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d023      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ade:	4b84      	ldr	r3, [pc, #528]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	099b      	lsrs	r3, r3, #6
 8002ae4:	f04f 0400 	mov.w	r4, #0
 8002ae8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	ea03 0501 	and.w	r5, r3, r1
 8002af4:	ea04 0602 	and.w	r6, r4, r2
 8002af8:	4a7f      	ldr	r2, [pc, #508]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002afa:	fb02 f106 	mul.w	r1, r2, r6
 8002afe:	2200      	movs	r2, #0
 8002b00:	fb02 f205 	mul.w	r2, r2, r5
 8002b04:	440a      	add	r2, r1
 8002b06:	497c      	ldr	r1, [pc, #496]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002b08:	fba5 0101 	umull	r0, r1, r5, r1
 8002b0c:	1853      	adds	r3, r2, r1
 8002b0e:	4619      	mov	r1, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f04f 0400 	mov.w	r4, #0
 8002b16:	461a      	mov	r2, r3
 8002b18:	4623      	mov	r3, r4
 8002b1a:	f7fd fbd1 	bl	80002c0 <__aeabi_uldivmod>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	460c      	mov	r4, r1
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	e049      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b26:	4b72      	ldr	r3, [pc, #456]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	099b      	lsrs	r3, r3, #6
 8002b2c:	f04f 0400 	mov.w	r4, #0
 8002b30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	ea03 0501 	and.w	r5, r3, r1
 8002b3c:	ea04 0602 	and.w	r6, r4, r2
 8002b40:	4629      	mov	r1, r5
 8002b42:	4632      	mov	r2, r6
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	f04f 0400 	mov.w	r4, #0
 8002b4c:	0154      	lsls	r4, r2, #5
 8002b4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b52:	014b      	lsls	r3, r1, #5
 8002b54:	4619      	mov	r1, r3
 8002b56:	4622      	mov	r2, r4
 8002b58:	1b49      	subs	r1, r1, r5
 8002b5a:	eb62 0206 	sbc.w	r2, r2, r6
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	f04f 0400 	mov.w	r4, #0
 8002b66:	0194      	lsls	r4, r2, #6
 8002b68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b6c:	018b      	lsls	r3, r1, #6
 8002b6e:	1a5b      	subs	r3, r3, r1
 8002b70:	eb64 0402 	sbc.w	r4, r4, r2
 8002b74:	f04f 0100 	mov.w	r1, #0
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	00e2      	lsls	r2, r4, #3
 8002b7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b82:	00d9      	lsls	r1, r3, #3
 8002b84:	460b      	mov	r3, r1
 8002b86:	4614      	mov	r4, r2
 8002b88:	195b      	adds	r3, r3, r5
 8002b8a:	eb44 0406 	adc.w	r4, r4, r6
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	02a2      	lsls	r2, r4, #10
 8002b98:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b9c:	0299      	lsls	r1, r3, #10
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4614      	mov	r4, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f04f 0400 	mov.w	r4, #0
 8002bac:	461a      	mov	r2, r3
 8002bae:	4623      	mov	r3, r4
 8002bb0:	f7fd fb86 	bl	80002c0 <__aeabi_uldivmod>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	460c      	mov	r4, r1
 8002bb8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bba:	4b4d      	ldr	r3, [pc, #308]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	0c1b      	lsrs	r3, r3, #16
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	613b      	str	r3, [r7, #16]
      break;
 8002bd4:	e087      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd6:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bde:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be0:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d023      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bec:	4b40      	ldr	r3, [pc, #256]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	f04f 0400 	mov.w	r4, #0
 8002bf6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	ea03 0501 	and.w	r5, r3, r1
 8002c02:	ea04 0602 	and.w	r6, r4, r2
 8002c06:	4a3c      	ldr	r2, [pc, #240]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002c08:	fb02 f106 	mul.w	r1, r2, r6
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	fb02 f205 	mul.w	r2, r2, r5
 8002c12:	440a      	add	r2, r1
 8002c14:	4938      	ldr	r1, [pc, #224]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002c16:	fba5 0101 	umull	r0, r1, r5, r1
 8002c1a:	1853      	adds	r3, r2, r1
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f04f 0400 	mov.w	r4, #0
 8002c24:	461a      	mov	r2, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	f7fd fb4a 	bl	80002c0 <__aeabi_uldivmod>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	460c      	mov	r4, r1
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	e049      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c34:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	099b      	lsrs	r3, r3, #6
 8002c3a:	f04f 0400 	mov.w	r4, #0
 8002c3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	ea03 0501 	and.w	r5, r3, r1
 8002c4a:	ea04 0602 	and.w	r6, r4, r2
 8002c4e:	4629      	mov	r1, r5
 8002c50:	4632      	mov	r2, r6
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	f04f 0400 	mov.w	r4, #0
 8002c5a:	0154      	lsls	r4, r2, #5
 8002c5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c60:	014b      	lsls	r3, r1, #5
 8002c62:	4619      	mov	r1, r3
 8002c64:	4622      	mov	r2, r4
 8002c66:	1b49      	subs	r1, r1, r5
 8002c68:	eb62 0206 	sbc.w	r2, r2, r6
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	f04f 0400 	mov.w	r4, #0
 8002c74:	0194      	lsls	r4, r2, #6
 8002c76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c7a:	018b      	lsls	r3, r1, #6
 8002c7c:	1a5b      	subs	r3, r3, r1
 8002c7e:	eb64 0402 	sbc.w	r4, r4, r2
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	00e2      	lsls	r2, r4, #3
 8002c8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c90:	00d9      	lsls	r1, r3, #3
 8002c92:	460b      	mov	r3, r1
 8002c94:	4614      	mov	r4, r2
 8002c96:	195b      	adds	r3, r3, r5
 8002c98:	eb44 0406 	adc.w	r4, r4, r6
 8002c9c:	f04f 0100 	mov.w	r1, #0
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	02a2      	lsls	r2, r4, #10
 8002ca6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002caa:	0299      	lsls	r1, r3, #10
 8002cac:	460b      	mov	r3, r1
 8002cae:	4614      	mov	r4, r2
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f04f 0400 	mov.w	r4, #0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4623      	mov	r3, r4
 8002cbe:	f7fd faff 	bl	80002c0 <__aeabi_uldivmod>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x298>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0f1b      	lsrs	r3, r3, #28
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	613b      	str	r3, [r7, #16]
      break;
 8002cde:	e002      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002ce2:	613b      	str	r3, [r7, #16]
      break;
 8002ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce6:	693b      	ldr	r3, [r7, #16]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	00f42400 	.word	0x00f42400
 8002cf8:	017d7840 	.word	0x017d7840

08002cfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8083 	beq.w	8002e1c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d16:	4b95      	ldr	r3, [pc, #596]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d019      	beq.n	8002d56 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d22:	4b92      	ldr	r3, [pc, #584]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d106      	bne.n	8002d3c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d2e:	4b8f      	ldr	r3, [pc, #572]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3a:	d00c      	beq.n	8002d56 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3c:	4b8b      	ldr	r3, [pc, #556]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	d112      	bne.n	8002d6e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d48:	4b88      	ldr	r3, [pc, #544]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d54:	d10b      	bne.n	8002d6e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d56:	4b85      	ldr	r3, [pc, #532]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d05b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x11e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d157      	bne.n	8002e1a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e216      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d76:	d106      	bne.n	8002d86 <HAL_RCC_OscConfig+0x8a>
 8002d78:	4b7c      	ldr	r3, [pc, #496]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a7b      	ldr	r2, [pc, #492]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	e01d      	b.n	8002dc2 <HAL_RCC_OscConfig+0xc6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8e:	d10c      	bne.n	8002daa <HAL_RCC_OscConfig+0xae>
 8002d90:	4b76      	ldr	r3, [pc, #472]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a75      	ldr	r2, [pc, #468]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a72      	ldr	r2, [pc, #456]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	e00b      	b.n	8002dc2 <HAL_RCC_OscConfig+0xc6>
 8002daa:	4b70      	ldr	r3, [pc, #448]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6f      	ldr	r2, [pc, #444]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	4b6d      	ldr	r3, [pc, #436]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a6c      	ldr	r2, [pc, #432]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d013      	beq.n	8002df2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dca:	f7fe f99d 	bl	8001108 <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd2:	f7fe f999 	bl	8001108 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b64      	cmp	r3, #100	; 0x64
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1db      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de4:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0xd6>
 8002df0:	e014      	b.n	8002e1c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df2:	f7fe f989 	bl	8001108 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dfa:	f7fe f985 	bl	8001108 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b64      	cmp	r3, #100	; 0x64
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e1c7      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0c:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0xfe>
 8002e18:	e000      	b.n	8002e1c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d06f      	beq.n	8002f08 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e28:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d017      	beq.n	8002e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e34:	4b4d      	ldr	r3, [pc, #308]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d105      	bne.n	8002e4c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e40:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4c:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	d11c      	bne.n	8002e92 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e58:	4b44      	ldr	r3, [pc, #272]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d116      	bne.n	8002e92 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e64:	4b41      	ldr	r3, [pc, #260]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_OscConfig+0x180>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e18f      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4938      	ldr	r1, [pc, #224]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e90:	e03a      	b.n	8002f08 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d020      	beq.n	8002edc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e9a:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7fe f932 	bl	8001108 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea8:	f7fe f92e 	bl	8001108 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e170      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eba:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4925      	ldr	r1, [pc, #148]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
 8002eda:	e015      	b.n	8002f08 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe f911 	bl	8001108 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eea:	f7fe f90d 	bl	8001108 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e14f      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f0      	bne.n	8002eea <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d037      	beq.n	8002f84 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1c:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <HAL_RCC_OscConfig+0x278>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fe f8f1 	bl	8001108 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2a:	f7fe f8ed 	bl	8001108 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e12f      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x22e>
 8002f48:	e01c      	b.n	8002f84 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_RCC_OscConfig+0x278>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe f8da 	bl	8001108 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f56:	e00f      	b.n	8002f78 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f58:	f7fe f8d6 	bl	8001108 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d908      	bls.n	8002f78 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e118      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	42470000 	.word	0x42470000
 8002f74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f78:	4b8a      	ldr	r3, [pc, #552]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e9      	bne.n	8002f58 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8097 	beq.w	80030c0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f96:	4b83      	ldr	r3, [pc, #524]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	4b7f      	ldr	r3, [pc, #508]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a7e      	ldr	r2, [pc, #504]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b7c      	ldr	r3, [pc, #496]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	4b79      	ldr	r3, [pc, #484]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fce:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fda:	f7fe f895 	bl	8001108 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7fe f891 	bl	8001108 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e0d3      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <HAL_RCC_OscConfig+0x4ac>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x31a>
 8003008:	4b66      	ldr	r3, [pc, #408]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a65      	ldr	r2, [pc, #404]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
 8003014:	e01c      	b.n	8003050 <HAL_RCC_OscConfig+0x354>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b05      	cmp	r3, #5
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x33c>
 800301e:	4b61      	ldr	r3, [pc, #388]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a60      	ldr	r2, [pc, #384]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
 800302a:	4b5e      	ldr	r3, [pc, #376]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	4a5d      	ldr	r2, [pc, #372]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6713      	str	r3, [r2, #112]	; 0x70
 8003036:	e00b      	b.n	8003050 <HAL_RCC_OscConfig+0x354>
 8003038:	4b5a      	ldr	r3, [pc, #360]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a59      	ldr	r2, [pc, #356]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	4b57      	ldr	r3, [pc, #348]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a56      	ldr	r2, [pc, #344]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800304a:	f023 0304 	bic.w	r3, r3, #4
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d015      	beq.n	8003084 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fe f856 	bl	8001108 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7fe f852 	bl	8001108 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e092      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	4b4b      	ldr	r3, [pc, #300]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ee      	beq.n	8003060 <HAL_RCC_OscConfig+0x364>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7fe f840 	bl	8001108 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7fe f83c 	bl	8001108 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e07c      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a2:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ee      	bne.n	800308c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b4:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	4a3a      	ldr	r2, [pc, #232]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 80030ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d068      	beq.n	800319a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030c8:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d060      	beq.n	8003196 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d145      	bne.n	8003168 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030dc:	4b33      	ldr	r3, [pc, #204]	; (80031ac <HAL_RCC_OscConfig+0x4b0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e2:	f7fe f811 	bl	8001108 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ea:	f7fe f80d 	bl	8001108 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e04f      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	019b      	lsls	r3, r3, #6
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	3b01      	subs	r3, #1
 8003122:	041b      	lsls	r3, r3, #16
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	061b      	lsls	r3, r3, #24
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	071b      	lsls	r3, r3, #28
 8003134:	491b      	ldr	r1, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800313a:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <HAL_RCC_OscConfig+0x4b0>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fd ffe2 	bl	8001108 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fd ffde 	bl	8001108 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e020      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x44c>
 8003166:	e018      	b.n	800319a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003168:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_RCC_OscConfig+0x4b0>)
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fd ffcb 	bl	8001108 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003176:	f7fd ffc7 	bl	8001108 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e009      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_OscConfig+0x4a8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x47a>
 8003194:	e001      	b.n	800319a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40007000 	.word	0x40007000
 80031ac:	42470060 	.word	0x42470060

080031b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e01d      	b.n	80031fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fd72 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f000 fa14 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003206:	b480      	push	{r7}
 8003208:	b085      	sub	sp, #20
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b06      	cmp	r3, #6
 800322e:	d007      	beq.n	8003240 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b02      	cmp	r3, #2
 8003262:	d122      	bne.n	80032aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b02      	cmp	r3, #2
 8003270:	d11b      	bne.n	80032aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f06f 0202 	mvn.w	r2, #2
 800327a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f9a5 	bl	80035e0 <HAL_TIM_IC_CaptureCallback>
 8003296:	e005      	b.n	80032a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f997 	bl	80035cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f9a8 	bl	80035f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d122      	bne.n	80032fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d11b      	bne.n	80032fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f06f 0204 	mvn.w	r2, #4
 80032ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f97b 	bl	80035e0 <HAL_TIM_IC_CaptureCallback>
 80032ea:	e005      	b.n	80032f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f96d 	bl	80035cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f97e 	bl	80035f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b08      	cmp	r3, #8
 800330a:	d122      	bne.n	8003352 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b08      	cmp	r3, #8
 8003318:	d11b      	bne.n	8003352 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0208 	mvn.w	r2, #8
 8003322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2204      	movs	r2, #4
 8003328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f951 	bl	80035e0 <HAL_TIM_IC_CaptureCallback>
 800333e:	e005      	b.n	800334c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f943 	bl	80035cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f954 	bl	80035f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b10      	cmp	r3, #16
 800335e:	d122      	bne.n	80033a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b10      	cmp	r3, #16
 800336c:	d11b      	bne.n	80033a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f06f 0210 	mvn.w	r2, #16
 8003376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2208      	movs	r2, #8
 800337c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f927 	bl	80035e0 <HAL_TIM_IC_CaptureCallback>
 8003392:	e005      	b.n	80033a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f919 	bl	80035cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f92a 	bl	80035f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d10e      	bne.n	80033d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f06f 0201 	mvn.w	r2, #1
 80033ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7fd fab3 	bl	8000938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b80      	cmp	r3, #128	; 0x80
 80033de:	d10e      	bne.n	80033fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ea:	2b80      	cmp	r3, #128	; 0x80
 80033ec:	d107      	bne.n	80033fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 facf 	bl	800399c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	d10e      	bne.n	800342a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	2b40      	cmp	r3, #64	; 0x40
 8003418:	d107      	bne.n	800342a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f8ef 	bl	8003608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b20      	cmp	r3, #32
 8003436:	d10e      	bne.n	8003456 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b20      	cmp	r3, #32
 8003444:	d107      	bne.n	8003456 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f06f 0220 	mvn.w	r2, #32
 800344e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fa99 	bl	8003988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_TIM_ConfigClockSource+0x18>
 8003472:	2302      	movs	r3, #2
 8003474:	e0a6      	b.n	80035c4 <HAL_TIM_ConfigClockSource+0x166>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003494:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800349c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	d067      	beq.n	800357e <HAL_TIM_ConfigClockSource+0x120>
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d80b      	bhi.n	80034ca <HAL_TIM_ConfigClockSource+0x6c>
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d073      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x140>
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d802      	bhi.n	80034c0 <HAL_TIM_ConfigClockSource+0x62>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d06f      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80034be:	e078      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034c0:	2b20      	cmp	r3, #32
 80034c2:	d06c      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x140>
 80034c4:	2b30      	cmp	r3, #48	; 0x30
 80034c6:	d06a      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80034c8:	e073      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034ca:	2b70      	cmp	r3, #112	; 0x70
 80034cc:	d00d      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x8c>
 80034ce:	2b70      	cmp	r3, #112	; 0x70
 80034d0:	d804      	bhi.n	80034dc <HAL_TIM_ConfigClockSource+0x7e>
 80034d2:	2b50      	cmp	r3, #80	; 0x50
 80034d4:	d033      	beq.n	800353e <HAL_TIM_ConfigClockSource+0xe0>
 80034d6:	2b60      	cmp	r3, #96	; 0x60
 80034d8:	d041      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80034da:	e06a      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e0:	d066      	beq.n	80035b0 <HAL_TIM_ConfigClockSource+0x152>
 80034e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e6:	d017      	beq.n	8003518 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80034e8:	e063      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f000 f9a9 	bl	8003850 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800350c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	609a      	str	r2, [r3, #8]
      break;
 8003516:	e04c      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	6899      	ldr	r1, [r3, #8]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f000 f992 	bl	8003850 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800353a:	609a      	str	r2, [r3, #8]
      break;
 800353c:	e039      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	461a      	mov	r2, r3
 800354c:	f000 f906 	bl	800375c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2150      	movs	r1, #80	; 0x50
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f95f 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 800355c:	e029      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	461a      	mov	r2, r3
 800356c:	f000 f925 	bl	80037ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2160      	movs	r1, #96	; 0x60
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f94f 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 800357c:	e019      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6859      	ldr	r1, [r3, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	461a      	mov	r2, r3
 800358c:	f000 f8e6 	bl	800375c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2140      	movs	r1, #64	; 0x40
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f93f 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 800359c:	e009      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4619      	mov	r1, r3
 80035a8:	4610      	mov	r0, r2
 80035aa:	f000 f936 	bl	800381a <TIM_ITRx_SetConfig>
      break;
 80035ae:	e000      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80035b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a40      	ldr	r2, [pc, #256]	; (8003730 <TIM_Base_SetConfig+0x114>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d00f      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a3d      	ldr	r2, [pc, #244]	; (8003734 <TIM_Base_SetConfig+0x118>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00b      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a3c      	ldr	r2, [pc, #240]	; (8003738 <TIM_Base_SetConfig+0x11c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d007      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a3b      	ldr	r2, [pc, #236]	; (800373c <TIM_Base_SetConfig+0x120>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a3a      	ldr	r2, [pc, #232]	; (8003740 <TIM_Base_SetConfig+0x124>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d108      	bne.n	800366e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a2f      	ldr	r2, [pc, #188]	; (8003730 <TIM_Base_SetConfig+0x114>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d02b      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367c:	d027      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a2c      	ldr	r2, [pc, #176]	; (8003734 <TIM_Base_SetConfig+0x118>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d023      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <TIM_Base_SetConfig+0x11c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01f      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a2a      	ldr	r2, [pc, #168]	; (800373c <TIM_Base_SetConfig+0x120>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01b      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a29      	ldr	r2, [pc, #164]	; (8003740 <TIM_Base_SetConfig+0x124>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d017      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a28      	ldr	r2, [pc, #160]	; (8003744 <TIM_Base_SetConfig+0x128>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a27      	ldr	r2, [pc, #156]	; (8003748 <TIM_Base_SetConfig+0x12c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00f      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a26      	ldr	r2, [pc, #152]	; (800374c <TIM_Base_SetConfig+0x130>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00b      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a25      	ldr	r2, [pc, #148]	; (8003750 <TIM_Base_SetConfig+0x134>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a24      	ldr	r2, [pc, #144]	; (8003754 <TIM_Base_SetConfig+0x138>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a23      	ldr	r2, [pc, #140]	; (8003758 <TIM_Base_SetConfig+0x13c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d108      	bne.n	80036e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <TIM_Base_SetConfig+0x114>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_Base_SetConfig+0xf8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <TIM_Base_SetConfig+0x124>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d103      	bne.n	800371c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	615a      	str	r2, [r3, #20]
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40010000 	.word	0x40010000
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800
 800373c:	40000c00 	.word	0x40000c00
 8003740:	40010400 	.word	0x40010400
 8003744:	40014000 	.word	0x40014000
 8003748:	40014400 	.word	0x40014400
 800374c:	40014800 	.word	0x40014800
 8003750:	40001800 	.word	0x40001800
 8003754:	40001c00 	.word	0x40001c00
 8003758:	40002000 	.word	0x40002000

0800375c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	f023 0201 	bic.w	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f023 030a 	bic.w	r3, r3, #10
 8003798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	621a      	str	r2, [r3, #32]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b087      	sub	sp, #28
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f023 0210 	bic.w	r2, r3, #16
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	031b      	lsls	r3, r3, #12
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	621a      	str	r2, [r3, #32]
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	f043 0307 	orr.w	r3, r3, #7
 800383c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	609a      	str	r2, [r3, #8]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800386a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	021a      	lsls	r2, r3, #8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	431a      	orrs	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4313      	orrs	r3, r2
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	609a      	str	r2, [r3, #8]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e05a      	b.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a21      	ldr	r2, [pc, #132]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d022      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f4:	d01d      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1a      	ldr	r2, [pc, #104]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a18      	ldr	r2, [pc, #96]	; (800397c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a17      	ldr	r2, [pc, #92]	; (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a15      	ldr	r2, [pc, #84]	; (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10c      	bne.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40010000 	.word	0x40010000
 8003970:	40000400 	.word	0x40000400
 8003974:	40000800 	.word	0x40000800
 8003978:	40000c00 	.word	0x40000c00
 800397c:	40010400 	.word	0x40010400
 8003980:	40014000 	.word	0x40014000
 8003984:	40001800 	.word	0x40001800

08003988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e03f      	b.n	8003a42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d106      	bne.n	80039dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7fd fa0a 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2224      	movs	r2, #36	; 0x24
 80039e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fc37 	bl	8004268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b20      	cmp	r3, #32
 8003a64:	d153      	bne.n	8003b0e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_UART_Transmit_DMA+0x26>
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e04c      	b.n	8003b10 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_UART_Transmit_DMA+0x38>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e045      	b.n	8003b10 <HAL_UART_Transmit_DMA+0xc4>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	88fa      	ldrh	r2, [r7, #6]
 8003a9c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2221      	movs	r2, #33	; 0x21
 8003aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <HAL_UART_Transmit_DMA+0xcc>)
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_UART_Transmit_DMA+0xd0>)
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <HAL_UART_Transmit_DMA+0xd4>)
 8003ac2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	2200      	movs	r2, #0
 8003aca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8003acc:	f107 0308 	add.w	r3, r7, #8
 8003ad0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	f7fe fa2a 	bl	8001f3c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003af0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b08:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e000      	b.n	8003b10 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003b0e:	2302      	movs	r3, #2
  }
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	08003e75 	.word	0x08003e75
 8003b1c:	08003ec7 	.word	0x08003ec7
 8003b20:	08003f67 	.word	0x08003f67

08003b24 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d166      	bne.n	8003c0c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_UART_Receive_DMA+0x26>
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e05f      	b.n	8003c0e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_UART_Receive_DMA+0x38>
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e058      	b.n	8003c0e <HAL_UART_Receive_DMA+0xea>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	88fa      	ldrh	r2, [r7, #6]
 8003b6e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2222      	movs	r2, #34	; 0x22
 8003b7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	4a25      	ldr	r2, [pc, #148]	; (8003c18 <HAL_UART_Receive_DMA+0xf4>)
 8003b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	4a24      	ldr	r2, [pc, #144]	; (8003c1c <HAL_UART_Receive_DMA+0xf8>)
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <HAL_UART_Receive_DMA+0xfc>)
 8003b94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003b9e:	f107 0308 	add.w	r3, r7, #8
 8003ba2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4619      	mov	r1, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	f7fe f9c1 	bl	8001f3c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695a      	ldr	r2, [r3, #20]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c06:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	08003ee3 	.word	0x08003ee3
 8003c1c:	08003f4b 	.word	0x08003f4b
 8003c20:	08003f67 	.word	0x08003f67

08003c24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_UART_IRQHandler+0x52>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fa79 	bl	8004166 <UART_Receive_IT>
      return;
 8003c74:	e0d1      	b.n	8003e1a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80b0 	beq.w	8003dde <HAL_UART_IRQHandler+0x1ba>
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d105      	bne.n	8003c94 <HAL_UART_IRQHandler+0x70>
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 80a5 	beq.w	8003dde <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x90>
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	f043 0201 	orr.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_UART_IRQHandler+0xb0>
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ccc:	f043 0202 	orr.w	r2, r3, #2
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_UART_IRQHandler+0xd0>
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	f043 0204 	orr.w	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00f      	beq.n	8003d1e <HAL_UART_IRQHandler+0xfa>
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <HAL_UART_IRQHandler+0xee>
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d16:	f043 0208 	orr.w	r2, r3, #8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d078      	beq.n	8003e18 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <HAL_UART_IRQHandler+0x11c>
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fa13 	bl	8004166 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	bf0c      	ite	eq
 8003d4e:	2301      	moveq	r3, #1
 8003d50:	2300      	movne	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d102      	bne.n	8003d68 <HAL_UART_IRQHandler+0x144>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d031      	beq.n	8003dcc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f95c 	bl	8004026 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d123      	bne.n	8003dc4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d98:	4a21      	ldr	r2, [pc, #132]	; (8003e20 <HAL_UART_IRQHandler+0x1fc>)
 8003d9a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe f923 	bl	8001fec <HAL_DMA_Abort_IT>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d016      	beq.n	8003dda <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003db6:	4610      	mov	r0, r2
 8003db8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dba:	e00e      	b.n	8003dda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f84f 	bl	8003e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc2:	e00a      	b.n	8003dda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f84b 	bl	8003e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dca:	e006      	b.n	8003dda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f847 	bl	8003e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003dd8:	e01e      	b.n	8003e18 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dda:	bf00      	nop
    return;
 8003ddc:	e01c      	b.n	8003e18 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_UART_IRQHandler+0x1d6>
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f949 	bl	800408a <UART_Transmit_IT>
    return;
 8003df8:	e00f      	b.n	8003e1a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_UART_IRQHandler+0x1f6>
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f991 	bl	8004136 <UART_EndTransmit_IT>
    return;
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003e18:	bf00      	nop
  }
}
 8003e1a:	3720      	adds	r7, #32
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	08004063 	.word	0x08004063

08003e24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d113      	bne.n	8003eb8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb4:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003eb6:	e002      	b.n	8003ebe <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff ffb3 	bl	8003e24 <HAL_UART_TxCpltCallback>
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff ffaf 	bl	8003e38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d11e      	bne.n	8003f3c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f12:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695a      	ldr	r2, [r3, #20]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0201 	bic.w	r2, r2, #1
 8003f22:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f32:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7fc fd11 	bl	8000964 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7ff ff77 	bl	8003e4c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	bf0c      	ite	eq
 8003f86:	2301      	moveq	r3, #1
 8003f88:	2300      	movne	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b21      	cmp	r3, #33	; 0x21
 8003f98:	d108      	bne.n	8003fac <UART_DMAError+0x46>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003fa6:	68b8      	ldr	r0, [r7, #8]
 8003fa8:	f000 f827 	bl	8003ffa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b40      	cmp	r3, #64	; 0x40
 8003fb8:	bf0c      	ite	eq
 8003fba:	2301      	moveq	r3, #1
 8003fbc:	2300      	movne	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b22      	cmp	r3, #34	; 0x22
 8003fcc:	d108      	bne.n	8003fe0 <UART_DMAError+0x7a>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003fda:	68b8      	ldr	r0, [r7, #8]
 8003fdc:	f000 f823 	bl	8004026 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	f043 0210 	orr.w	r2, r3, #16
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fec:	68b8      	ldr	r0, [r7, #8]
 8003fee:	f7ff ff37 	bl	8003e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004010:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800403c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f7ff feef 	bl	8003e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b21      	cmp	r3, #33	; 0x21
 800409c:	d144      	bne.n	8004128 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	d11a      	bne.n	80040de <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040bc:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d105      	bne.n	80040d2 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	1c9a      	adds	r2, r3, #2
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	621a      	str	r2, [r3, #32]
 80040d0:	e00e      	b.n	80040f0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	621a      	str	r2, [r3, #32]
 80040dc:	e008      	b.n	80040f0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	1c59      	adds	r1, r3, #1
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6211      	str	r1, [r2, #32]
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4619      	mov	r1, r3
 80040fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10f      	bne.n	8004124 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004112:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004122:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b082      	sub	sp, #8
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800414c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fe64 	bl	8003e24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b22      	cmp	r3, #34	; 0x22
 8004178:	d171      	bne.n	800425e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004182:	d123      	bne.n	80041cc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	b29b      	uxth	r3, r3
 800419a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	1c9a      	adds	r2, r3, #2
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
 80041ae:	e029      	b.n	8004204 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	629a      	str	r2, [r3, #40]	; 0x28
 80041ca:	e01b      	b.n	8004204 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6858      	ldr	r0, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	1c59      	adds	r1, r3, #1
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6291      	str	r1, [r2, #40]	; 0x28
 80041e4:	b2c2      	uxtb	r2, r0
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	e00c      	b.n	8004204 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	1c58      	adds	r0, r3, #1
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	6288      	str	r0, [r1, #40]	; 0x28
 80041fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004208:	b29b      	uxth	r3, r3
 800420a:	3b01      	subs	r3, #1
 800420c:	b29b      	uxth	r3, r3
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4619      	mov	r1, r3
 8004212:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004214:	2b00      	cmp	r3, #0
 8004216:	d120      	bne.n	800425a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0220 	bic.w	r2, r2, #32
 8004226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fc fb87 	bl	8000964 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e002      	b.n	8004260 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e000      	b.n	8004260 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
  }
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80042aa:	f023 030c 	bic.w	r3, r3, #12
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	68f9      	ldr	r1, [r7, #12]
 80042b4:	430b      	orrs	r3, r1
 80042b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d6:	f040 818b 	bne.w	80045f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4ac1      	ldr	r2, [pc, #772]	; (80045e4 <UART_SetConfig+0x37c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d005      	beq.n	80042f0 <UART_SetConfig+0x88>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4abf      	ldr	r2, [pc, #764]	; (80045e8 <UART_SetConfig+0x380>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	f040 80bd 	bne.w	800446a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042f0:	f7fe fb9e 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 80042f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	461d      	mov	r5, r3
 80042fa:	f04f 0600 	mov.w	r6, #0
 80042fe:	46a8      	mov	r8, r5
 8004300:	46b1      	mov	r9, r6
 8004302:	eb18 0308 	adds.w	r3, r8, r8
 8004306:	eb49 0409 	adc.w	r4, r9, r9
 800430a:	4698      	mov	r8, r3
 800430c:	46a1      	mov	r9, r4
 800430e:	eb18 0805 	adds.w	r8, r8, r5
 8004312:	eb49 0906 	adc.w	r9, r9, r6
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004322:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004326:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800432a:	4688      	mov	r8, r1
 800432c:	4691      	mov	r9, r2
 800432e:	eb18 0005 	adds.w	r0, r8, r5
 8004332:	eb49 0106 	adc.w	r1, r9, r6
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	461d      	mov	r5, r3
 800433c:	f04f 0600 	mov.w	r6, #0
 8004340:	196b      	adds	r3, r5, r5
 8004342:	eb46 0406 	adc.w	r4, r6, r6
 8004346:	461a      	mov	r2, r3
 8004348:	4623      	mov	r3, r4
 800434a:	f7fb ffb9 	bl	80002c0 <__aeabi_uldivmod>
 800434e:	4603      	mov	r3, r0
 8004350:	460c      	mov	r4, r1
 8004352:	461a      	mov	r2, r3
 8004354:	4ba5      	ldr	r3, [pc, #660]	; (80045ec <UART_SetConfig+0x384>)
 8004356:	fba3 2302 	umull	r2, r3, r3, r2
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	461d      	mov	r5, r3
 8004364:	f04f 0600 	mov.w	r6, #0
 8004368:	46a9      	mov	r9, r5
 800436a:	46b2      	mov	sl, r6
 800436c:	eb19 0309 	adds.w	r3, r9, r9
 8004370:	eb4a 040a 	adc.w	r4, sl, sl
 8004374:	4699      	mov	r9, r3
 8004376:	46a2      	mov	sl, r4
 8004378:	eb19 0905 	adds.w	r9, r9, r5
 800437c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004380:	f04f 0100 	mov.w	r1, #0
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800438c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004390:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004394:	4689      	mov	r9, r1
 8004396:	4692      	mov	sl, r2
 8004398:	eb19 0005 	adds.w	r0, r9, r5
 800439c:	eb4a 0106 	adc.w	r1, sl, r6
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	461d      	mov	r5, r3
 80043a6:	f04f 0600 	mov.w	r6, #0
 80043aa:	196b      	adds	r3, r5, r5
 80043ac:	eb46 0406 	adc.w	r4, r6, r6
 80043b0:	461a      	mov	r2, r3
 80043b2:	4623      	mov	r3, r4
 80043b4:	f7fb ff84 	bl	80002c0 <__aeabi_uldivmod>
 80043b8:	4603      	mov	r3, r0
 80043ba:	460c      	mov	r4, r1
 80043bc:	461a      	mov	r2, r3
 80043be:	4b8b      	ldr	r3, [pc, #556]	; (80045ec <UART_SetConfig+0x384>)
 80043c0:	fba3 1302 	umull	r1, r3, r3, r2
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	2164      	movs	r1, #100	; 0x64
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	3332      	adds	r3, #50	; 0x32
 80043d2:	4a86      	ldr	r2, [pc, #536]	; (80045ec <UART_SetConfig+0x384>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043e0:	4498      	add	r8, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	461d      	mov	r5, r3
 80043e6:	f04f 0600 	mov.w	r6, #0
 80043ea:	46a9      	mov	r9, r5
 80043ec:	46b2      	mov	sl, r6
 80043ee:	eb19 0309 	adds.w	r3, r9, r9
 80043f2:	eb4a 040a 	adc.w	r4, sl, sl
 80043f6:	4699      	mov	r9, r3
 80043f8:	46a2      	mov	sl, r4
 80043fa:	eb19 0905 	adds.w	r9, r9, r5
 80043fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8004402:	f04f 0100 	mov.w	r1, #0
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800440e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004412:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004416:	4689      	mov	r9, r1
 8004418:	4692      	mov	sl, r2
 800441a:	eb19 0005 	adds.w	r0, r9, r5
 800441e:	eb4a 0106 	adc.w	r1, sl, r6
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	461d      	mov	r5, r3
 8004428:	f04f 0600 	mov.w	r6, #0
 800442c:	196b      	adds	r3, r5, r5
 800442e:	eb46 0406 	adc.w	r4, r6, r6
 8004432:	461a      	mov	r2, r3
 8004434:	4623      	mov	r3, r4
 8004436:	f7fb ff43 	bl	80002c0 <__aeabi_uldivmod>
 800443a:	4603      	mov	r3, r0
 800443c:	460c      	mov	r4, r1
 800443e:	461a      	mov	r2, r3
 8004440:	4b6a      	ldr	r3, [pc, #424]	; (80045ec <UART_SetConfig+0x384>)
 8004442:	fba3 1302 	umull	r1, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2164      	movs	r1, #100	; 0x64
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	3332      	adds	r3, #50	; 0x32
 8004454:	4a65      	ldr	r2, [pc, #404]	; (80045ec <UART_SetConfig+0x384>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	f003 0207 	and.w	r2, r3, #7
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4442      	add	r2, r8
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	e26f      	b.n	800494a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800446a:	f7fe facd 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 800446e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	461d      	mov	r5, r3
 8004474:	f04f 0600 	mov.w	r6, #0
 8004478:	46a8      	mov	r8, r5
 800447a:	46b1      	mov	r9, r6
 800447c:	eb18 0308 	adds.w	r3, r8, r8
 8004480:	eb49 0409 	adc.w	r4, r9, r9
 8004484:	4698      	mov	r8, r3
 8004486:	46a1      	mov	r9, r4
 8004488:	eb18 0805 	adds.w	r8, r8, r5
 800448c:	eb49 0906 	adc.w	r9, r9, r6
 8004490:	f04f 0100 	mov.w	r1, #0
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800449c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044a4:	4688      	mov	r8, r1
 80044a6:	4691      	mov	r9, r2
 80044a8:	eb18 0005 	adds.w	r0, r8, r5
 80044ac:	eb49 0106 	adc.w	r1, r9, r6
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	461d      	mov	r5, r3
 80044b6:	f04f 0600 	mov.w	r6, #0
 80044ba:	196b      	adds	r3, r5, r5
 80044bc:	eb46 0406 	adc.w	r4, r6, r6
 80044c0:	461a      	mov	r2, r3
 80044c2:	4623      	mov	r3, r4
 80044c4:	f7fb fefc 	bl	80002c0 <__aeabi_uldivmod>
 80044c8:	4603      	mov	r3, r0
 80044ca:	460c      	mov	r4, r1
 80044cc:	461a      	mov	r2, r3
 80044ce:	4b47      	ldr	r3, [pc, #284]	; (80045ec <UART_SetConfig+0x384>)
 80044d0:	fba3 2302 	umull	r2, r3, r3, r2
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	461d      	mov	r5, r3
 80044de:	f04f 0600 	mov.w	r6, #0
 80044e2:	46a9      	mov	r9, r5
 80044e4:	46b2      	mov	sl, r6
 80044e6:	eb19 0309 	adds.w	r3, r9, r9
 80044ea:	eb4a 040a 	adc.w	r4, sl, sl
 80044ee:	4699      	mov	r9, r3
 80044f0:	46a2      	mov	sl, r4
 80044f2:	eb19 0905 	adds.w	r9, r9, r5
 80044f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80044fa:	f04f 0100 	mov.w	r1, #0
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004506:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800450a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800450e:	4689      	mov	r9, r1
 8004510:	4692      	mov	sl, r2
 8004512:	eb19 0005 	adds.w	r0, r9, r5
 8004516:	eb4a 0106 	adc.w	r1, sl, r6
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	461d      	mov	r5, r3
 8004520:	f04f 0600 	mov.w	r6, #0
 8004524:	196b      	adds	r3, r5, r5
 8004526:	eb46 0406 	adc.w	r4, r6, r6
 800452a:	461a      	mov	r2, r3
 800452c:	4623      	mov	r3, r4
 800452e:	f7fb fec7 	bl	80002c0 <__aeabi_uldivmod>
 8004532:	4603      	mov	r3, r0
 8004534:	460c      	mov	r4, r1
 8004536:	461a      	mov	r2, r3
 8004538:	4b2c      	ldr	r3, [pc, #176]	; (80045ec <UART_SetConfig+0x384>)
 800453a:	fba3 1302 	umull	r1, r3, r3, r2
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2164      	movs	r1, #100	; 0x64
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	3332      	adds	r3, #50	; 0x32
 800454c:	4a27      	ldr	r2, [pc, #156]	; (80045ec <UART_SetConfig+0x384>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800455a:	4498      	add	r8, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	461d      	mov	r5, r3
 8004560:	f04f 0600 	mov.w	r6, #0
 8004564:	46a9      	mov	r9, r5
 8004566:	46b2      	mov	sl, r6
 8004568:	eb19 0309 	adds.w	r3, r9, r9
 800456c:	eb4a 040a 	adc.w	r4, sl, sl
 8004570:	4699      	mov	r9, r3
 8004572:	46a2      	mov	sl, r4
 8004574:	eb19 0905 	adds.w	r9, r9, r5
 8004578:	eb4a 0a06 	adc.w	sl, sl, r6
 800457c:	f04f 0100 	mov.w	r1, #0
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004588:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800458c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004590:	4689      	mov	r9, r1
 8004592:	4692      	mov	sl, r2
 8004594:	eb19 0005 	adds.w	r0, r9, r5
 8004598:	eb4a 0106 	adc.w	r1, sl, r6
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	461d      	mov	r5, r3
 80045a2:	f04f 0600 	mov.w	r6, #0
 80045a6:	196b      	adds	r3, r5, r5
 80045a8:	eb46 0406 	adc.w	r4, r6, r6
 80045ac:	461a      	mov	r2, r3
 80045ae:	4623      	mov	r3, r4
 80045b0:	f7fb fe86 	bl	80002c0 <__aeabi_uldivmod>
 80045b4:	4603      	mov	r3, r0
 80045b6:	460c      	mov	r4, r1
 80045b8:	461a      	mov	r2, r3
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <UART_SetConfig+0x384>)
 80045bc:	fba3 1302 	umull	r1, r3, r3, r2
 80045c0:	095b      	lsrs	r3, r3, #5
 80045c2:	2164      	movs	r1, #100	; 0x64
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	3332      	adds	r3, #50	; 0x32
 80045ce:	4a07      	ldr	r2, [pc, #28]	; (80045ec <UART_SetConfig+0x384>)
 80045d0:	fba2 2303 	umull	r2, r3, r2, r3
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	f003 0207 	and.w	r2, r3, #7
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4442      	add	r2, r8
 80045e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80045e2:	e1b2      	b.n	800494a <UART_SetConfig+0x6e2>
 80045e4:	40011000 	.word	0x40011000
 80045e8:	40011400 	.word	0x40011400
 80045ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4ad7      	ldr	r2, [pc, #860]	; (8004954 <UART_SetConfig+0x6ec>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d005      	beq.n	8004606 <UART_SetConfig+0x39e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4ad6      	ldr	r2, [pc, #856]	; (8004958 <UART_SetConfig+0x6f0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	f040 80d1 	bne.w	80047a8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004606:	f7fe fa13 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 800460a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	469a      	mov	sl, r3
 8004610:	f04f 0b00 	mov.w	fp, #0
 8004614:	46d0      	mov	r8, sl
 8004616:	46d9      	mov	r9, fp
 8004618:	eb18 0308 	adds.w	r3, r8, r8
 800461c:	eb49 0409 	adc.w	r4, r9, r9
 8004620:	4698      	mov	r8, r3
 8004622:	46a1      	mov	r9, r4
 8004624:	eb18 080a 	adds.w	r8, r8, sl
 8004628:	eb49 090b 	adc.w	r9, r9, fp
 800462c:	f04f 0100 	mov.w	r1, #0
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004638:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800463c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004640:	4688      	mov	r8, r1
 8004642:	4691      	mov	r9, r2
 8004644:	eb1a 0508 	adds.w	r5, sl, r8
 8004648:	eb4b 0609 	adc.w	r6, fp, r9
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4619      	mov	r1, r3
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	f04f 0400 	mov.w	r4, #0
 800465e:	0094      	lsls	r4, r2, #2
 8004660:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004664:	008b      	lsls	r3, r1, #2
 8004666:	461a      	mov	r2, r3
 8004668:	4623      	mov	r3, r4
 800466a:	4628      	mov	r0, r5
 800466c:	4631      	mov	r1, r6
 800466e:	f7fb fe27 	bl	80002c0 <__aeabi_uldivmod>
 8004672:	4603      	mov	r3, r0
 8004674:	460c      	mov	r4, r1
 8004676:	461a      	mov	r2, r3
 8004678:	4bb8      	ldr	r3, [pc, #736]	; (800495c <UART_SetConfig+0x6f4>)
 800467a:	fba3 2302 	umull	r2, r3, r3, r2
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	469b      	mov	fp, r3
 8004688:	f04f 0c00 	mov.w	ip, #0
 800468c:	46d9      	mov	r9, fp
 800468e:	46e2      	mov	sl, ip
 8004690:	eb19 0309 	adds.w	r3, r9, r9
 8004694:	eb4a 040a 	adc.w	r4, sl, sl
 8004698:	4699      	mov	r9, r3
 800469a:	46a2      	mov	sl, r4
 800469c:	eb19 090b 	adds.w	r9, r9, fp
 80046a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046b8:	4689      	mov	r9, r1
 80046ba:	4692      	mov	sl, r2
 80046bc:	eb1b 0509 	adds.w	r5, fp, r9
 80046c0:	eb4c 060a 	adc.w	r6, ip, sl
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4619      	mov	r1, r3
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	f04f 0400 	mov.w	r4, #0
 80046d6:	0094      	lsls	r4, r2, #2
 80046d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046dc:	008b      	lsls	r3, r1, #2
 80046de:	461a      	mov	r2, r3
 80046e0:	4623      	mov	r3, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	4631      	mov	r1, r6
 80046e6:	f7fb fdeb 	bl	80002c0 <__aeabi_uldivmod>
 80046ea:	4603      	mov	r3, r0
 80046ec:	460c      	mov	r4, r1
 80046ee:	461a      	mov	r2, r3
 80046f0:	4b9a      	ldr	r3, [pc, #616]	; (800495c <UART_SetConfig+0x6f4>)
 80046f2:	fba3 1302 	umull	r1, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2164      	movs	r1, #100	; 0x64
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	3332      	adds	r3, #50	; 0x32
 8004704:	4a95      	ldr	r2, [pc, #596]	; (800495c <UART_SetConfig+0x6f4>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004710:	4498      	add	r8, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	469b      	mov	fp, r3
 8004716:	f04f 0c00 	mov.w	ip, #0
 800471a:	46d9      	mov	r9, fp
 800471c:	46e2      	mov	sl, ip
 800471e:	eb19 0309 	adds.w	r3, r9, r9
 8004722:	eb4a 040a 	adc.w	r4, sl, sl
 8004726:	4699      	mov	r9, r3
 8004728:	46a2      	mov	sl, r4
 800472a:	eb19 090b 	adds.w	r9, r9, fp
 800472e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004732:	f04f 0100 	mov.w	r1, #0
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800473e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004742:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004746:	4689      	mov	r9, r1
 8004748:	4692      	mov	sl, r2
 800474a:	eb1b 0509 	adds.w	r5, fp, r9
 800474e:	eb4c 060a 	adc.w	r6, ip, sl
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4619      	mov	r1, r3
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	f04f 0400 	mov.w	r4, #0
 8004764:	0094      	lsls	r4, r2, #2
 8004766:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800476a:	008b      	lsls	r3, r1, #2
 800476c:	461a      	mov	r2, r3
 800476e:	4623      	mov	r3, r4
 8004770:	4628      	mov	r0, r5
 8004772:	4631      	mov	r1, r6
 8004774:	f7fb fda4 	bl	80002c0 <__aeabi_uldivmod>
 8004778:	4603      	mov	r3, r0
 800477a:	460c      	mov	r4, r1
 800477c:	461a      	mov	r2, r3
 800477e:	4b77      	ldr	r3, [pc, #476]	; (800495c <UART_SetConfig+0x6f4>)
 8004780:	fba3 1302 	umull	r1, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	2164      	movs	r1, #100	; 0x64
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	3332      	adds	r3, #50	; 0x32
 8004792:	4a72      	ldr	r2, [pc, #456]	; (800495c <UART_SetConfig+0x6f4>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 020f 	and.w	r2, r3, #15
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4442      	add	r2, r8
 80047a4:	609a      	str	r2, [r3, #8]
 80047a6:	e0d0      	b.n	800494a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80047a8:	f7fe f92e 	bl	8002a08 <HAL_RCC_GetPCLK1Freq>
 80047ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	469a      	mov	sl, r3
 80047b2:	f04f 0b00 	mov.w	fp, #0
 80047b6:	46d0      	mov	r8, sl
 80047b8:	46d9      	mov	r9, fp
 80047ba:	eb18 0308 	adds.w	r3, r8, r8
 80047be:	eb49 0409 	adc.w	r4, r9, r9
 80047c2:	4698      	mov	r8, r3
 80047c4:	46a1      	mov	r9, r4
 80047c6:	eb18 080a 	adds.w	r8, r8, sl
 80047ca:	eb49 090b 	adc.w	r9, r9, fp
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047e2:	4688      	mov	r8, r1
 80047e4:	4691      	mov	r9, r2
 80047e6:	eb1a 0508 	adds.w	r5, sl, r8
 80047ea:	eb4b 0609 	adc.w	r6, fp, r9
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4619      	mov	r1, r3
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	f04f 0400 	mov.w	r4, #0
 8004800:	0094      	lsls	r4, r2, #2
 8004802:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004806:	008b      	lsls	r3, r1, #2
 8004808:	461a      	mov	r2, r3
 800480a:	4623      	mov	r3, r4
 800480c:	4628      	mov	r0, r5
 800480e:	4631      	mov	r1, r6
 8004810:	f7fb fd56 	bl	80002c0 <__aeabi_uldivmod>
 8004814:	4603      	mov	r3, r0
 8004816:	460c      	mov	r4, r1
 8004818:	461a      	mov	r2, r3
 800481a:	4b50      	ldr	r3, [pc, #320]	; (800495c <UART_SetConfig+0x6f4>)
 800481c:	fba3 2302 	umull	r2, r3, r3, r2
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	469b      	mov	fp, r3
 800482a:	f04f 0c00 	mov.w	ip, #0
 800482e:	46d9      	mov	r9, fp
 8004830:	46e2      	mov	sl, ip
 8004832:	eb19 0309 	adds.w	r3, r9, r9
 8004836:	eb4a 040a 	adc.w	r4, sl, sl
 800483a:	4699      	mov	r9, r3
 800483c:	46a2      	mov	sl, r4
 800483e:	eb19 090b 	adds.w	r9, r9, fp
 8004842:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004846:	f04f 0100 	mov.w	r1, #0
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004852:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004856:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800485a:	4689      	mov	r9, r1
 800485c:	4692      	mov	sl, r2
 800485e:	eb1b 0509 	adds.w	r5, fp, r9
 8004862:	eb4c 060a 	adc.w	r6, ip, sl
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4619      	mov	r1, r3
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	f04f 0400 	mov.w	r4, #0
 8004878:	0094      	lsls	r4, r2, #2
 800487a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800487e:	008b      	lsls	r3, r1, #2
 8004880:	461a      	mov	r2, r3
 8004882:	4623      	mov	r3, r4
 8004884:	4628      	mov	r0, r5
 8004886:	4631      	mov	r1, r6
 8004888:	f7fb fd1a 	bl	80002c0 <__aeabi_uldivmod>
 800488c:	4603      	mov	r3, r0
 800488e:	460c      	mov	r4, r1
 8004890:	461a      	mov	r2, r3
 8004892:	4b32      	ldr	r3, [pc, #200]	; (800495c <UART_SetConfig+0x6f4>)
 8004894:	fba3 1302 	umull	r1, r3, r3, r2
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	2164      	movs	r1, #100	; 0x64
 800489c:	fb01 f303 	mul.w	r3, r1, r3
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	3332      	adds	r3, #50	; 0x32
 80048a6:	4a2d      	ldr	r2, [pc, #180]	; (800495c <UART_SetConfig+0x6f4>)
 80048a8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b2:	4498      	add	r8, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	469b      	mov	fp, r3
 80048b8:	f04f 0c00 	mov.w	ip, #0
 80048bc:	46d9      	mov	r9, fp
 80048be:	46e2      	mov	sl, ip
 80048c0:	eb19 0309 	adds.w	r3, r9, r9
 80048c4:	eb4a 040a 	adc.w	r4, sl, sl
 80048c8:	4699      	mov	r9, r3
 80048ca:	46a2      	mov	sl, r4
 80048cc:	eb19 090b 	adds.w	r9, r9, fp
 80048d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048d4:	f04f 0100 	mov.w	r1, #0
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048e8:	4689      	mov	r9, r1
 80048ea:	4692      	mov	sl, r2
 80048ec:	eb1b 0509 	adds.w	r5, fp, r9
 80048f0:	eb4c 060a 	adc.w	r6, ip, sl
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	4619      	mov	r1, r3
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	f04f 0400 	mov.w	r4, #0
 8004906:	0094      	lsls	r4, r2, #2
 8004908:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800490c:	008b      	lsls	r3, r1, #2
 800490e:	461a      	mov	r2, r3
 8004910:	4623      	mov	r3, r4
 8004912:	4628      	mov	r0, r5
 8004914:	4631      	mov	r1, r6
 8004916:	f7fb fcd3 	bl	80002c0 <__aeabi_uldivmod>
 800491a:	4603      	mov	r3, r0
 800491c:	460c      	mov	r4, r1
 800491e:	461a      	mov	r2, r3
 8004920:	4b0e      	ldr	r3, [pc, #56]	; (800495c <UART_SetConfig+0x6f4>)
 8004922:	fba3 1302 	umull	r1, r3, r3, r2
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	2164      	movs	r1, #100	; 0x64
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	3332      	adds	r3, #50	; 0x32
 8004934:	4a09      	ldr	r2, [pc, #36]	; (800495c <UART_SetConfig+0x6f4>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	f003 020f 	and.w	r2, r3, #15
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4442      	add	r2, r8
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	e7ff      	b.n	800494a <UART_SetConfig+0x6e2>
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004954:	40011000 	.word	0x40011000
 8004958:	40011400 	.word	0x40011400
 800495c:	51eb851f 	.word	0x51eb851f

08004960 <__errno>:
 8004960:	4b01      	ldr	r3, [pc, #4]	; (8004968 <__errno+0x8>)
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	2000000c 	.word	0x2000000c

0800496c <__libc_init_array>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	4e0d      	ldr	r6, [pc, #52]	; (80049a4 <__libc_init_array+0x38>)
 8004970:	4c0d      	ldr	r4, [pc, #52]	; (80049a8 <__libc_init_array+0x3c>)
 8004972:	1ba4      	subs	r4, r4, r6
 8004974:	10a4      	asrs	r4, r4, #2
 8004976:	2500      	movs	r5, #0
 8004978:	42a5      	cmp	r5, r4
 800497a:	d109      	bne.n	8004990 <__libc_init_array+0x24>
 800497c:	4e0b      	ldr	r6, [pc, #44]	; (80049ac <__libc_init_array+0x40>)
 800497e:	4c0c      	ldr	r4, [pc, #48]	; (80049b0 <__libc_init_array+0x44>)
 8004980:	f000 fc3a 	bl	80051f8 <_init>
 8004984:	1ba4      	subs	r4, r4, r6
 8004986:	10a4      	asrs	r4, r4, #2
 8004988:	2500      	movs	r5, #0
 800498a:	42a5      	cmp	r5, r4
 800498c:	d105      	bne.n	800499a <__libc_init_array+0x2e>
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004994:	4798      	blx	r3
 8004996:	3501      	adds	r5, #1
 8004998:	e7ee      	b.n	8004978 <__libc_init_array+0xc>
 800499a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800499e:	4798      	blx	r3
 80049a0:	3501      	adds	r5, #1
 80049a2:	e7f2      	b.n	800498a <__libc_init_array+0x1e>
 80049a4:	080052ac 	.word	0x080052ac
 80049a8:	080052ac 	.word	0x080052ac
 80049ac:	080052ac 	.word	0x080052ac
 80049b0:	080052b0 	.word	0x080052b0

080049b4 <memset>:
 80049b4:	4402      	add	r2, r0
 80049b6:	4603      	mov	r3, r0
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d100      	bne.n	80049be <memset+0xa>
 80049bc:	4770      	bx	lr
 80049be:	f803 1b01 	strb.w	r1, [r3], #1
 80049c2:	e7f9      	b.n	80049b8 <memset+0x4>

080049c4 <sniprintf>:
 80049c4:	b40c      	push	{r2, r3}
 80049c6:	b530      	push	{r4, r5, lr}
 80049c8:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <sniprintf+0x64>)
 80049ca:	1e0c      	subs	r4, r1, #0
 80049cc:	b09d      	sub	sp, #116	; 0x74
 80049ce:	681d      	ldr	r5, [r3, #0]
 80049d0:	da08      	bge.n	80049e4 <sniprintf+0x20>
 80049d2:	238b      	movs	r3, #139	; 0x8b
 80049d4:	602b      	str	r3, [r5, #0]
 80049d6:	f04f 30ff 	mov.w	r0, #4294967295
 80049da:	b01d      	add	sp, #116	; 0x74
 80049dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049e0:	b002      	add	sp, #8
 80049e2:	4770      	bx	lr
 80049e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80049e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80049ec:	bf14      	ite	ne
 80049ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80049f2:	4623      	moveq	r3, r4
 80049f4:	9304      	str	r3, [sp, #16]
 80049f6:	9307      	str	r3, [sp, #28]
 80049f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049fc:	9002      	str	r0, [sp, #8]
 80049fe:	9006      	str	r0, [sp, #24]
 8004a00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004a06:	ab21      	add	r3, sp, #132	; 0x84
 8004a08:	a902      	add	r1, sp, #8
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	f000 f867 	bl	8004ae0 <_svfiprintf_r>
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	bfbc      	itt	lt
 8004a16:	238b      	movlt	r3, #139	; 0x8b
 8004a18:	602b      	strlt	r3, [r5, #0]
 8004a1a:	2c00      	cmp	r4, #0
 8004a1c:	d0dd      	beq.n	80049da <sniprintf+0x16>
 8004a1e:	9b02      	ldr	r3, [sp, #8]
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e7d9      	b.n	80049da <sniprintf+0x16>
 8004a26:	bf00      	nop
 8004a28:	2000000c 	.word	0x2000000c

08004a2c <__ssputs_r>:
 8004a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a30:	688e      	ldr	r6, [r1, #8]
 8004a32:	429e      	cmp	r6, r3
 8004a34:	4682      	mov	sl, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	4690      	mov	r8, r2
 8004a3a:	4699      	mov	r9, r3
 8004a3c:	d837      	bhi.n	8004aae <__ssputs_r+0x82>
 8004a3e:	898a      	ldrh	r2, [r1, #12]
 8004a40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a44:	d031      	beq.n	8004aaa <__ssputs_r+0x7e>
 8004a46:	6825      	ldr	r5, [r4, #0]
 8004a48:	6909      	ldr	r1, [r1, #16]
 8004a4a:	1a6f      	subs	r7, r5, r1
 8004a4c:	6965      	ldr	r5, [r4, #20]
 8004a4e:	2302      	movs	r3, #2
 8004a50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a54:	fb95 f5f3 	sdiv	r5, r5, r3
 8004a58:	f109 0301 	add.w	r3, r9, #1
 8004a5c:	443b      	add	r3, r7
 8004a5e:	429d      	cmp	r5, r3
 8004a60:	bf38      	it	cc
 8004a62:	461d      	movcc	r5, r3
 8004a64:	0553      	lsls	r3, r2, #21
 8004a66:	d530      	bpl.n	8004aca <__ssputs_r+0x9e>
 8004a68:	4629      	mov	r1, r5
 8004a6a:	f000 fb2b 	bl	80050c4 <_malloc_r>
 8004a6e:	4606      	mov	r6, r0
 8004a70:	b950      	cbnz	r0, 8004a88 <__ssputs_r+0x5c>
 8004a72:	230c      	movs	r3, #12
 8004a74:	f8ca 3000 	str.w	r3, [sl]
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a7e:	81a3      	strh	r3, [r4, #12]
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a88:	463a      	mov	r2, r7
 8004a8a:	6921      	ldr	r1, [r4, #16]
 8004a8c:	f000 faa8 	bl	8004fe0 <memcpy>
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9a:	81a3      	strh	r3, [r4, #12]
 8004a9c:	6126      	str	r6, [r4, #16]
 8004a9e:	6165      	str	r5, [r4, #20]
 8004aa0:	443e      	add	r6, r7
 8004aa2:	1bed      	subs	r5, r5, r7
 8004aa4:	6026      	str	r6, [r4, #0]
 8004aa6:	60a5      	str	r5, [r4, #8]
 8004aa8:	464e      	mov	r6, r9
 8004aaa:	454e      	cmp	r6, r9
 8004aac:	d900      	bls.n	8004ab0 <__ssputs_r+0x84>
 8004aae:	464e      	mov	r6, r9
 8004ab0:	4632      	mov	r2, r6
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	6820      	ldr	r0, [r4, #0]
 8004ab6:	f000 fa9e 	bl	8004ff6 <memmove>
 8004aba:	68a3      	ldr	r3, [r4, #8]
 8004abc:	1b9b      	subs	r3, r3, r6
 8004abe:	60a3      	str	r3, [r4, #8]
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	441e      	add	r6, r3
 8004ac4:	6026      	str	r6, [r4, #0]
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	e7dc      	b.n	8004a84 <__ssputs_r+0x58>
 8004aca:	462a      	mov	r2, r5
 8004acc:	f000 fb54 	bl	8005178 <_realloc_r>
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d1e2      	bne.n	8004a9c <__ssputs_r+0x70>
 8004ad6:	6921      	ldr	r1, [r4, #16]
 8004ad8:	4650      	mov	r0, sl
 8004ada:	f000 faa5 	bl	8005028 <_free_r>
 8004ade:	e7c8      	b.n	8004a72 <__ssputs_r+0x46>

08004ae0 <_svfiprintf_r>:
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	461d      	mov	r5, r3
 8004ae6:	898b      	ldrh	r3, [r1, #12]
 8004ae8:	061f      	lsls	r7, r3, #24
 8004aea:	b09d      	sub	sp, #116	; 0x74
 8004aec:	4680      	mov	r8, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	4616      	mov	r6, r2
 8004af2:	d50f      	bpl.n	8004b14 <_svfiprintf_r+0x34>
 8004af4:	690b      	ldr	r3, [r1, #16]
 8004af6:	b96b      	cbnz	r3, 8004b14 <_svfiprintf_r+0x34>
 8004af8:	2140      	movs	r1, #64	; 0x40
 8004afa:	f000 fae3 	bl	80050c4 <_malloc_r>
 8004afe:	6020      	str	r0, [r4, #0]
 8004b00:	6120      	str	r0, [r4, #16]
 8004b02:	b928      	cbnz	r0, 8004b10 <_svfiprintf_r+0x30>
 8004b04:	230c      	movs	r3, #12
 8004b06:	f8c8 3000 	str.w	r3, [r8]
 8004b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0e:	e0c8      	b.n	8004ca2 <_svfiprintf_r+0x1c2>
 8004b10:	2340      	movs	r3, #64	; 0x40
 8004b12:	6163      	str	r3, [r4, #20]
 8004b14:	2300      	movs	r3, #0
 8004b16:	9309      	str	r3, [sp, #36]	; 0x24
 8004b18:	2320      	movs	r3, #32
 8004b1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b1e:	2330      	movs	r3, #48	; 0x30
 8004b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b24:	9503      	str	r5, [sp, #12]
 8004b26:	f04f 0b01 	mov.w	fp, #1
 8004b2a:	4637      	mov	r7, r6
 8004b2c:	463d      	mov	r5, r7
 8004b2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b32:	b10b      	cbz	r3, 8004b38 <_svfiprintf_r+0x58>
 8004b34:	2b25      	cmp	r3, #37	; 0x25
 8004b36:	d13e      	bne.n	8004bb6 <_svfiprintf_r+0xd6>
 8004b38:	ebb7 0a06 	subs.w	sl, r7, r6
 8004b3c:	d00b      	beq.n	8004b56 <_svfiprintf_r+0x76>
 8004b3e:	4653      	mov	r3, sl
 8004b40:	4632      	mov	r2, r6
 8004b42:	4621      	mov	r1, r4
 8004b44:	4640      	mov	r0, r8
 8004b46:	f7ff ff71 	bl	8004a2c <__ssputs_r>
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	f000 80a4 	beq.w	8004c98 <_svfiprintf_r+0x1b8>
 8004b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b52:	4453      	add	r3, sl
 8004b54:	9309      	str	r3, [sp, #36]	; 0x24
 8004b56:	783b      	ldrb	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 809d 	beq.w	8004c98 <_svfiprintf_r+0x1b8>
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295
 8004b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b68:	9304      	str	r3, [sp, #16]
 8004b6a:	9307      	str	r3, [sp, #28]
 8004b6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b70:	931a      	str	r3, [sp, #104]	; 0x68
 8004b72:	462f      	mov	r7, r5
 8004b74:	2205      	movs	r2, #5
 8004b76:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004b7a:	4850      	ldr	r0, [pc, #320]	; (8004cbc <_svfiprintf_r+0x1dc>)
 8004b7c:	f7fb fb50 	bl	8000220 <memchr>
 8004b80:	9b04      	ldr	r3, [sp, #16]
 8004b82:	b9d0      	cbnz	r0, 8004bba <_svfiprintf_r+0xda>
 8004b84:	06d9      	lsls	r1, r3, #27
 8004b86:	bf44      	itt	mi
 8004b88:	2220      	movmi	r2, #32
 8004b8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b8e:	071a      	lsls	r2, r3, #28
 8004b90:	bf44      	itt	mi
 8004b92:	222b      	movmi	r2, #43	; 0x2b
 8004b94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b98:	782a      	ldrb	r2, [r5, #0]
 8004b9a:	2a2a      	cmp	r2, #42	; 0x2a
 8004b9c:	d015      	beq.n	8004bca <_svfiprintf_r+0xea>
 8004b9e:	9a07      	ldr	r2, [sp, #28]
 8004ba0:	462f      	mov	r7, r5
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	250a      	movs	r5, #10
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bac:	3b30      	subs	r3, #48	; 0x30
 8004bae:	2b09      	cmp	r3, #9
 8004bb0:	d94d      	bls.n	8004c4e <_svfiprintf_r+0x16e>
 8004bb2:	b1b8      	cbz	r0, 8004be4 <_svfiprintf_r+0x104>
 8004bb4:	e00f      	b.n	8004bd6 <_svfiprintf_r+0xf6>
 8004bb6:	462f      	mov	r7, r5
 8004bb8:	e7b8      	b.n	8004b2c <_svfiprintf_r+0x4c>
 8004bba:	4a40      	ldr	r2, [pc, #256]	; (8004cbc <_svfiprintf_r+0x1dc>)
 8004bbc:	1a80      	subs	r0, r0, r2
 8004bbe:	fa0b f000 	lsl.w	r0, fp, r0
 8004bc2:	4318      	orrs	r0, r3
 8004bc4:	9004      	str	r0, [sp, #16]
 8004bc6:	463d      	mov	r5, r7
 8004bc8:	e7d3      	b.n	8004b72 <_svfiprintf_r+0x92>
 8004bca:	9a03      	ldr	r2, [sp, #12]
 8004bcc:	1d11      	adds	r1, r2, #4
 8004bce:	6812      	ldr	r2, [r2, #0]
 8004bd0:	9103      	str	r1, [sp, #12]
 8004bd2:	2a00      	cmp	r2, #0
 8004bd4:	db01      	blt.n	8004bda <_svfiprintf_r+0xfa>
 8004bd6:	9207      	str	r2, [sp, #28]
 8004bd8:	e004      	b.n	8004be4 <_svfiprintf_r+0x104>
 8004bda:	4252      	negs	r2, r2
 8004bdc:	f043 0302 	orr.w	r3, r3, #2
 8004be0:	9207      	str	r2, [sp, #28]
 8004be2:	9304      	str	r3, [sp, #16]
 8004be4:	783b      	ldrb	r3, [r7, #0]
 8004be6:	2b2e      	cmp	r3, #46	; 0x2e
 8004be8:	d10c      	bne.n	8004c04 <_svfiprintf_r+0x124>
 8004bea:	787b      	ldrb	r3, [r7, #1]
 8004bec:	2b2a      	cmp	r3, #42	; 0x2a
 8004bee:	d133      	bne.n	8004c58 <_svfiprintf_r+0x178>
 8004bf0:	9b03      	ldr	r3, [sp, #12]
 8004bf2:	1d1a      	adds	r2, r3, #4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	9203      	str	r2, [sp, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	bfb8      	it	lt
 8004bfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c00:	3702      	adds	r7, #2
 8004c02:	9305      	str	r3, [sp, #20]
 8004c04:	4d2e      	ldr	r5, [pc, #184]	; (8004cc0 <_svfiprintf_r+0x1e0>)
 8004c06:	7839      	ldrb	r1, [r7, #0]
 8004c08:	2203      	movs	r2, #3
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f7fb fb08 	bl	8000220 <memchr>
 8004c10:	b138      	cbz	r0, 8004c22 <_svfiprintf_r+0x142>
 8004c12:	2340      	movs	r3, #64	; 0x40
 8004c14:	1b40      	subs	r0, r0, r5
 8004c16:	fa03 f000 	lsl.w	r0, r3, r0
 8004c1a:	9b04      	ldr	r3, [sp, #16]
 8004c1c:	4303      	orrs	r3, r0
 8004c1e:	3701      	adds	r7, #1
 8004c20:	9304      	str	r3, [sp, #16]
 8004c22:	7839      	ldrb	r1, [r7, #0]
 8004c24:	4827      	ldr	r0, [pc, #156]	; (8004cc4 <_svfiprintf_r+0x1e4>)
 8004c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c2a:	2206      	movs	r2, #6
 8004c2c:	1c7e      	adds	r6, r7, #1
 8004c2e:	f7fb faf7 	bl	8000220 <memchr>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d038      	beq.n	8004ca8 <_svfiprintf_r+0x1c8>
 8004c36:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <_svfiprintf_r+0x1e8>)
 8004c38:	bb13      	cbnz	r3, 8004c80 <_svfiprintf_r+0x1a0>
 8004c3a:	9b03      	ldr	r3, [sp, #12]
 8004c3c:	3307      	adds	r3, #7
 8004c3e:	f023 0307 	bic.w	r3, r3, #7
 8004c42:	3308      	adds	r3, #8
 8004c44:	9303      	str	r3, [sp, #12]
 8004c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c48:	444b      	add	r3, r9
 8004c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c4c:	e76d      	b.n	8004b2a <_svfiprintf_r+0x4a>
 8004c4e:	fb05 3202 	mla	r2, r5, r2, r3
 8004c52:	2001      	movs	r0, #1
 8004c54:	460f      	mov	r7, r1
 8004c56:	e7a6      	b.n	8004ba6 <_svfiprintf_r+0xc6>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	3701      	adds	r7, #1
 8004c5c:	9305      	str	r3, [sp, #20]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	250a      	movs	r5, #10
 8004c62:	4638      	mov	r0, r7
 8004c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c68:	3a30      	subs	r2, #48	; 0x30
 8004c6a:	2a09      	cmp	r2, #9
 8004c6c:	d903      	bls.n	8004c76 <_svfiprintf_r+0x196>
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0c8      	beq.n	8004c04 <_svfiprintf_r+0x124>
 8004c72:	9105      	str	r1, [sp, #20]
 8004c74:	e7c6      	b.n	8004c04 <_svfiprintf_r+0x124>
 8004c76:	fb05 2101 	mla	r1, r5, r1, r2
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	e7f0      	b.n	8004c62 <_svfiprintf_r+0x182>
 8004c80:	ab03      	add	r3, sp, #12
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	4622      	mov	r2, r4
 8004c86:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <_svfiprintf_r+0x1ec>)
 8004c88:	a904      	add	r1, sp, #16
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	f3af 8000 	nop.w
 8004c90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c94:	4681      	mov	r9, r0
 8004c96:	d1d6      	bne.n	8004c46 <_svfiprintf_r+0x166>
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	065b      	lsls	r3, r3, #25
 8004c9c:	f53f af35 	bmi.w	8004b0a <_svfiprintf_r+0x2a>
 8004ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ca2:	b01d      	add	sp, #116	; 0x74
 8004ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca8:	ab03      	add	r3, sp, #12
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	4622      	mov	r2, r4
 8004cae:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <_svfiprintf_r+0x1ec>)
 8004cb0:	a904      	add	r1, sp, #16
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	f000 f882 	bl	8004dbc <_printf_i>
 8004cb8:	e7ea      	b.n	8004c90 <_svfiprintf_r+0x1b0>
 8004cba:	bf00      	nop
 8004cbc:	08005270 	.word	0x08005270
 8004cc0:	08005276 	.word	0x08005276
 8004cc4:	0800527a 	.word	0x0800527a
 8004cc8:	00000000 	.word	0x00000000
 8004ccc:	08004a2d 	.word	0x08004a2d

08004cd0 <_printf_common>:
 8004cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd4:	4691      	mov	r9, r2
 8004cd6:	461f      	mov	r7, r3
 8004cd8:	688a      	ldr	r2, [r1, #8]
 8004cda:	690b      	ldr	r3, [r1, #16]
 8004cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	bfb8      	it	lt
 8004ce4:	4613      	movlt	r3, r2
 8004ce6:	f8c9 3000 	str.w	r3, [r9]
 8004cea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cee:	4606      	mov	r6, r0
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	b112      	cbz	r2, 8004cfa <_printf_common+0x2a>
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	f8c9 3000 	str.w	r3, [r9]
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	0699      	lsls	r1, r3, #26
 8004cfe:	bf42      	ittt	mi
 8004d00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004d04:	3302      	addmi	r3, #2
 8004d06:	f8c9 3000 	strmi.w	r3, [r9]
 8004d0a:	6825      	ldr	r5, [r4, #0]
 8004d0c:	f015 0506 	ands.w	r5, r5, #6
 8004d10:	d107      	bne.n	8004d22 <_printf_common+0x52>
 8004d12:	f104 0a19 	add.w	sl, r4, #25
 8004d16:	68e3      	ldr	r3, [r4, #12]
 8004d18:	f8d9 2000 	ldr.w	r2, [r9]
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	42ab      	cmp	r3, r5
 8004d20:	dc28      	bgt.n	8004d74 <_printf_common+0xa4>
 8004d22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d26:	6822      	ldr	r2, [r4, #0]
 8004d28:	3300      	adds	r3, #0
 8004d2a:	bf18      	it	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	0692      	lsls	r2, r2, #26
 8004d30:	d42d      	bmi.n	8004d8e <_printf_common+0xbe>
 8004d32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d36:	4639      	mov	r1, r7
 8004d38:	4630      	mov	r0, r6
 8004d3a:	47c0      	blx	r8
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d020      	beq.n	8004d82 <_printf_common+0xb2>
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	68e5      	ldr	r5, [r4, #12]
 8004d44:	f8d9 2000 	ldr.w	r2, [r9]
 8004d48:	f003 0306 	and.w	r3, r3, #6
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	bf08      	it	eq
 8004d50:	1aad      	subeq	r5, r5, r2
 8004d52:	68a3      	ldr	r3, [r4, #8]
 8004d54:	6922      	ldr	r2, [r4, #16]
 8004d56:	bf0c      	ite	eq
 8004d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d5c:	2500      	movne	r5, #0
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	bfc4      	itt	gt
 8004d62:	1a9b      	subgt	r3, r3, r2
 8004d64:	18ed      	addgt	r5, r5, r3
 8004d66:	f04f 0900 	mov.w	r9, #0
 8004d6a:	341a      	adds	r4, #26
 8004d6c:	454d      	cmp	r5, r9
 8004d6e:	d11a      	bne.n	8004da6 <_printf_common+0xd6>
 8004d70:	2000      	movs	r0, #0
 8004d72:	e008      	b.n	8004d86 <_printf_common+0xb6>
 8004d74:	2301      	movs	r3, #1
 8004d76:	4652      	mov	r2, sl
 8004d78:	4639      	mov	r1, r7
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	47c0      	blx	r8
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d103      	bne.n	8004d8a <_printf_common+0xba>
 8004d82:	f04f 30ff 	mov.w	r0, #4294967295
 8004d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8a:	3501      	adds	r5, #1
 8004d8c:	e7c3      	b.n	8004d16 <_printf_common+0x46>
 8004d8e:	18e1      	adds	r1, r4, r3
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	2030      	movs	r0, #48	; 0x30
 8004d94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d98:	4422      	add	r2, r4
 8004d9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004da2:	3302      	adds	r3, #2
 8004da4:	e7c5      	b.n	8004d32 <_printf_common+0x62>
 8004da6:	2301      	movs	r3, #1
 8004da8:	4622      	mov	r2, r4
 8004daa:	4639      	mov	r1, r7
 8004dac:	4630      	mov	r0, r6
 8004dae:	47c0      	blx	r8
 8004db0:	3001      	adds	r0, #1
 8004db2:	d0e6      	beq.n	8004d82 <_printf_common+0xb2>
 8004db4:	f109 0901 	add.w	r9, r9, #1
 8004db8:	e7d8      	b.n	8004d6c <_printf_common+0x9c>
	...

08004dbc <_printf_i>:
 8004dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dc0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	7e09      	ldrb	r1, [r1, #24]
 8004dc8:	b085      	sub	sp, #20
 8004dca:	296e      	cmp	r1, #110	; 0x6e
 8004dcc:	4617      	mov	r7, r2
 8004dce:	4606      	mov	r6, r0
 8004dd0:	4698      	mov	r8, r3
 8004dd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dd4:	f000 80b3 	beq.w	8004f3e <_printf_i+0x182>
 8004dd8:	d822      	bhi.n	8004e20 <_printf_i+0x64>
 8004dda:	2963      	cmp	r1, #99	; 0x63
 8004ddc:	d036      	beq.n	8004e4c <_printf_i+0x90>
 8004dde:	d80a      	bhi.n	8004df6 <_printf_i+0x3a>
 8004de0:	2900      	cmp	r1, #0
 8004de2:	f000 80b9 	beq.w	8004f58 <_printf_i+0x19c>
 8004de6:	2958      	cmp	r1, #88	; 0x58
 8004de8:	f000 8083 	beq.w	8004ef2 <_printf_i+0x136>
 8004dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004df4:	e032      	b.n	8004e5c <_printf_i+0xa0>
 8004df6:	2964      	cmp	r1, #100	; 0x64
 8004df8:	d001      	beq.n	8004dfe <_printf_i+0x42>
 8004dfa:	2969      	cmp	r1, #105	; 0x69
 8004dfc:	d1f6      	bne.n	8004dec <_printf_i+0x30>
 8004dfe:	6820      	ldr	r0, [r4, #0]
 8004e00:	6813      	ldr	r3, [r2, #0]
 8004e02:	0605      	lsls	r5, r0, #24
 8004e04:	f103 0104 	add.w	r1, r3, #4
 8004e08:	d52a      	bpl.n	8004e60 <_printf_i+0xa4>
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	da03      	bge.n	8004e1a <_printf_i+0x5e>
 8004e12:	222d      	movs	r2, #45	; 0x2d
 8004e14:	425b      	negs	r3, r3
 8004e16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e1a:	486f      	ldr	r0, [pc, #444]	; (8004fd8 <_printf_i+0x21c>)
 8004e1c:	220a      	movs	r2, #10
 8004e1e:	e039      	b.n	8004e94 <_printf_i+0xd8>
 8004e20:	2973      	cmp	r1, #115	; 0x73
 8004e22:	f000 809d 	beq.w	8004f60 <_printf_i+0x1a4>
 8004e26:	d808      	bhi.n	8004e3a <_printf_i+0x7e>
 8004e28:	296f      	cmp	r1, #111	; 0x6f
 8004e2a:	d020      	beq.n	8004e6e <_printf_i+0xb2>
 8004e2c:	2970      	cmp	r1, #112	; 0x70
 8004e2e:	d1dd      	bne.n	8004dec <_printf_i+0x30>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	f043 0320 	orr.w	r3, r3, #32
 8004e36:	6023      	str	r3, [r4, #0]
 8004e38:	e003      	b.n	8004e42 <_printf_i+0x86>
 8004e3a:	2975      	cmp	r1, #117	; 0x75
 8004e3c:	d017      	beq.n	8004e6e <_printf_i+0xb2>
 8004e3e:	2978      	cmp	r1, #120	; 0x78
 8004e40:	d1d4      	bne.n	8004dec <_printf_i+0x30>
 8004e42:	2378      	movs	r3, #120	; 0x78
 8004e44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e48:	4864      	ldr	r0, [pc, #400]	; (8004fdc <_printf_i+0x220>)
 8004e4a:	e055      	b.n	8004ef8 <_printf_i+0x13c>
 8004e4c:	6813      	ldr	r3, [r2, #0]
 8004e4e:	1d19      	adds	r1, r3, #4
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6011      	str	r1, [r2, #0]
 8004e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e08c      	b.n	8004f7a <_printf_i+0x1be>
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6011      	str	r1, [r2, #0]
 8004e64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e68:	bf18      	it	ne
 8004e6a:	b21b      	sxthne	r3, r3
 8004e6c:	e7cf      	b.n	8004e0e <_printf_i+0x52>
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	6825      	ldr	r5, [r4, #0]
 8004e72:	1d18      	adds	r0, r3, #4
 8004e74:	6010      	str	r0, [r2, #0]
 8004e76:	0628      	lsls	r0, r5, #24
 8004e78:	d501      	bpl.n	8004e7e <_printf_i+0xc2>
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	e002      	b.n	8004e84 <_printf_i+0xc8>
 8004e7e:	0668      	lsls	r0, r5, #25
 8004e80:	d5fb      	bpl.n	8004e7a <_printf_i+0xbe>
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	4854      	ldr	r0, [pc, #336]	; (8004fd8 <_printf_i+0x21c>)
 8004e86:	296f      	cmp	r1, #111	; 0x6f
 8004e88:	bf14      	ite	ne
 8004e8a:	220a      	movne	r2, #10
 8004e8c:	2208      	moveq	r2, #8
 8004e8e:	2100      	movs	r1, #0
 8004e90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e94:	6865      	ldr	r5, [r4, #4]
 8004e96:	60a5      	str	r5, [r4, #8]
 8004e98:	2d00      	cmp	r5, #0
 8004e9a:	f2c0 8095 	blt.w	8004fc8 <_printf_i+0x20c>
 8004e9e:	6821      	ldr	r1, [r4, #0]
 8004ea0:	f021 0104 	bic.w	r1, r1, #4
 8004ea4:	6021      	str	r1, [r4, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d13d      	bne.n	8004f26 <_printf_i+0x16a>
 8004eaa:	2d00      	cmp	r5, #0
 8004eac:	f040 808e 	bne.w	8004fcc <_printf_i+0x210>
 8004eb0:	4665      	mov	r5, ip
 8004eb2:	2a08      	cmp	r2, #8
 8004eb4:	d10b      	bne.n	8004ece <_printf_i+0x112>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	07db      	lsls	r3, r3, #31
 8004eba:	d508      	bpl.n	8004ece <_printf_i+0x112>
 8004ebc:	6923      	ldr	r3, [r4, #16]
 8004ebe:	6862      	ldr	r2, [r4, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	bfde      	ittt	le
 8004ec4:	2330      	movle	r3, #48	; 0x30
 8004ec6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ece:	ebac 0305 	sub.w	r3, ip, r5
 8004ed2:	6123      	str	r3, [r4, #16]
 8004ed4:	f8cd 8000 	str.w	r8, [sp]
 8004ed8:	463b      	mov	r3, r7
 8004eda:	aa03      	add	r2, sp, #12
 8004edc:	4621      	mov	r1, r4
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f7ff fef6 	bl	8004cd0 <_printf_common>
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d14d      	bne.n	8004f84 <_printf_i+0x1c8>
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	b005      	add	sp, #20
 8004eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ef2:	4839      	ldr	r0, [pc, #228]	; (8004fd8 <_printf_i+0x21c>)
 8004ef4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ef8:	6813      	ldr	r3, [r2, #0]
 8004efa:	6821      	ldr	r1, [r4, #0]
 8004efc:	1d1d      	adds	r5, r3, #4
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6015      	str	r5, [r2, #0]
 8004f02:	060a      	lsls	r2, r1, #24
 8004f04:	d50b      	bpl.n	8004f1e <_printf_i+0x162>
 8004f06:	07ca      	lsls	r2, r1, #31
 8004f08:	bf44      	itt	mi
 8004f0a:	f041 0120 	orrmi.w	r1, r1, #32
 8004f0e:	6021      	strmi	r1, [r4, #0]
 8004f10:	b91b      	cbnz	r3, 8004f1a <_printf_i+0x15e>
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	f022 0220 	bic.w	r2, r2, #32
 8004f18:	6022      	str	r2, [r4, #0]
 8004f1a:	2210      	movs	r2, #16
 8004f1c:	e7b7      	b.n	8004e8e <_printf_i+0xd2>
 8004f1e:	064d      	lsls	r5, r1, #25
 8004f20:	bf48      	it	mi
 8004f22:	b29b      	uxthmi	r3, r3
 8004f24:	e7ef      	b.n	8004f06 <_printf_i+0x14a>
 8004f26:	4665      	mov	r5, ip
 8004f28:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f2c:	fb02 3311 	mls	r3, r2, r1, r3
 8004f30:	5cc3      	ldrb	r3, [r0, r3]
 8004f32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f36:	460b      	mov	r3, r1
 8004f38:	2900      	cmp	r1, #0
 8004f3a:	d1f5      	bne.n	8004f28 <_printf_i+0x16c>
 8004f3c:	e7b9      	b.n	8004eb2 <_printf_i+0xf6>
 8004f3e:	6813      	ldr	r3, [r2, #0]
 8004f40:	6825      	ldr	r5, [r4, #0]
 8004f42:	6961      	ldr	r1, [r4, #20]
 8004f44:	1d18      	adds	r0, r3, #4
 8004f46:	6010      	str	r0, [r2, #0]
 8004f48:	0628      	lsls	r0, r5, #24
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	d501      	bpl.n	8004f52 <_printf_i+0x196>
 8004f4e:	6019      	str	r1, [r3, #0]
 8004f50:	e002      	b.n	8004f58 <_printf_i+0x19c>
 8004f52:	066a      	lsls	r2, r5, #25
 8004f54:	d5fb      	bpl.n	8004f4e <_printf_i+0x192>
 8004f56:	8019      	strh	r1, [r3, #0]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	4665      	mov	r5, ip
 8004f5e:	e7b9      	b.n	8004ed4 <_printf_i+0x118>
 8004f60:	6813      	ldr	r3, [r2, #0]
 8004f62:	1d19      	adds	r1, r3, #4
 8004f64:	6011      	str	r1, [r2, #0]
 8004f66:	681d      	ldr	r5, [r3, #0]
 8004f68:	6862      	ldr	r2, [r4, #4]
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f7fb f957 	bl	8000220 <memchr>
 8004f72:	b108      	cbz	r0, 8004f78 <_printf_i+0x1bc>
 8004f74:	1b40      	subs	r0, r0, r5
 8004f76:	6060      	str	r0, [r4, #4]
 8004f78:	6863      	ldr	r3, [r4, #4]
 8004f7a:	6123      	str	r3, [r4, #16]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f82:	e7a7      	b.n	8004ed4 <_printf_i+0x118>
 8004f84:	6923      	ldr	r3, [r4, #16]
 8004f86:	462a      	mov	r2, r5
 8004f88:	4639      	mov	r1, r7
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	47c0      	blx	r8
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d0aa      	beq.n	8004ee8 <_printf_i+0x12c>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	079b      	lsls	r3, r3, #30
 8004f96:	d413      	bmi.n	8004fc0 <_printf_i+0x204>
 8004f98:	68e0      	ldr	r0, [r4, #12]
 8004f9a:	9b03      	ldr	r3, [sp, #12]
 8004f9c:	4298      	cmp	r0, r3
 8004f9e:	bfb8      	it	lt
 8004fa0:	4618      	movlt	r0, r3
 8004fa2:	e7a3      	b.n	8004eec <_printf_i+0x130>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	464a      	mov	r2, r9
 8004fa8:	4639      	mov	r1, r7
 8004faa:	4630      	mov	r0, r6
 8004fac:	47c0      	blx	r8
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d09a      	beq.n	8004ee8 <_printf_i+0x12c>
 8004fb2:	3501      	adds	r5, #1
 8004fb4:	68e3      	ldr	r3, [r4, #12]
 8004fb6:	9a03      	ldr	r2, [sp, #12]
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	42ab      	cmp	r3, r5
 8004fbc:	dcf2      	bgt.n	8004fa4 <_printf_i+0x1e8>
 8004fbe:	e7eb      	b.n	8004f98 <_printf_i+0x1dc>
 8004fc0:	2500      	movs	r5, #0
 8004fc2:	f104 0919 	add.w	r9, r4, #25
 8004fc6:	e7f5      	b.n	8004fb4 <_printf_i+0x1f8>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1ac      	bne.n	8004f26 <_printf_i+0x16a>
 8004fcc:	7803      	ldrb	r3, [r0, #0]
 8004fce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fd6:	e76c      	b.n	8004eb2 <_printf_i+0xf6>
 8004fd8:	08005281 	.word	0x08005281
 8004fdc:	08005292 	.word	0x08005292

08004fe0 <memcpy>:
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	1e43      	subs	r3, r0, #1
 8004fe4:	440a      	add	r2, r1
 8004fe6:	4291      	cmp	r1, r2
 8004fe8:	d100      	bne.n	8004fec <memcpy+0xc>
 8004fea:	bd10      	pop	{r4, pc}
 8004fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ff4:	e7f7      	b.n	8004fe6 <memcpy+0x6>

08004ff6 <memmove>:
 8004ff6:	4288      	cmp	r0, r1
 8004ff8:	b510      	push	{r4, lr}
 8004ffa:	eb01 0302 	add.w	r3, r1, r2
 8004ffe:	d807      	bhi.n	8005010 <memmove+0x1a>
 8005000:	1e42      	subs	r2, r0, #1
 8005002:	4299      	cmp	r1, r3
 8005004:	d00a      	beq.n	800501c <memmove+0x26>
 8005006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800500a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800500e:	e7f8      	b.n	8005002 <memmove+0xc>
 8005010:	4283      	cmp	r3, r0
 8005012:	d9f5      	bls.n	8005000 <memmove+0xa>
 8005014:	1881      	adds	r1, r0, r2
 8005016:	1ad2      	subs	r2, r2, r3
 8005018:	42d3      	cmn	r3, r2
 800501a:	d100      	bne.n	800501e <memmove+0x28>
 800501c:	bd10      	pop	{r4, pc}
 800501e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005022:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005026:	e7f7      	b.n	8005018 <memmove+0x22>

08005028 <_free_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4605      	mov	r5, r0
 800502c:	2900      	cmp	r1, #0
 800502e:	d045      	beq.n	80050bc <_free_r+0x94>
 8005030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005034:	1f0c      	subs	r4, r1, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	bfb8      	it	lt
 800503a:	18e4      	addlt	r4, r4, r3
 800503c:	f000 f8d2 	bl	80051e4 <__malloc_lock>
 8005040:	4a1f      	ldr	r2, [pc, #124]	; (80050c0 <_free_r+0x98>)
 8005042:	6813      	ldr	r3, [r2, #0]
 8005044:	4610      	mov	r0, r2
 8005046:	b933      	cbnz	r3, 8005056 <_free_r+0x2e>
 8005048:	6063      	str	r3, [r4, #4]
 800504a:	6014      	str	r4, [r2, #0]
 800504c:	4628      	mov	r0, r5
 800504e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005052:	f000 b8c8 	b.w	80051e6 <__malloc_unlock>
 8005056:	42a3      	cmp	r3, r4
 8005058:	d90c      	bls.n	8005074 <_free_r+0x4c>
 800505a:	6821      	ldr	r1, [r4, #0]
 800505c:	1862      	adds	r2, r4, r1
 800505e:	4293      	cmp	r3, r2
 8005060:	bf04      	itt	eq
 8005062:	681a      	ldreq	r2, [r3, #0]
 8005064:	685b      	ldreq	r3, [r3, #4]
 8005066:	6063      	str	r3, [r4, #4]
 8005068:	bf04      	itt	eq
 800506a:	1852      	addeq	r2, r2, r1
 800506c:	6022      	streq	r2, [r4, #0]
 800506e:	6004      	str	r4, [r0, #0]
 8005070:	e7ec      	b.n	800504c <_free_r+0x24>
 8005072:	4613      	mov	r3, r2
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	b10a      	cbz	r2, 800507c <_free_r+0x54>
 8005078:	42a2      	cmp	r2, r4
 800507a:	d9fa      	bls.n	8005072 <_free_r+0x4a>
 800507c:	6819      	ldr	r1, [r3, #0]
 800507e:	1858      	adds	r0, r3, r1
 8005080:	42a0      	cmp	r0, r4
 8005082:	d10b      	bne.n	800509c <_free_r+0x74>
 8005084:	6820      	ldr	r0, [r4, #0]
 8005086:	4401      	add	r1, r0
 8005088:	1858      	adds	r0, r3, r1
 800508a:	4282      	cmp	r2, r0
 800508c:	6019      	str	r1, [r3, #0]
 800508e:	d1dd      	bne.n	800504c <_free_r+0x24>
 8005090:	6810      	ldr	r0, [r2, #0]
 8005092:	6852      	ldr	r2, [r2, #4]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	4401      	add	r1, r0
 8005098:	6019      	str	r1, [r3, #0]
 800509a:	e7d7      	b.n	800504c <_free_r+0x24>
 800509c:	d902      	bls.n	80050a4 <_free_r+0x7c>
 800509e:	230c      	movs	r3, #12
 80050a0:	602b      	str	r3, [r5, #0]
 80050a2:	e7d3      	b.n	800504c <_free_r+0x24>
 80050a4:	6820      	ldr	r0, [r4, #0]
 80050a6:	1821      	adds	r1, r4, r0
 80050a8:	428a      	cmp	r2, r1
 80050aa:	bf04      	itt	eq
 80050ac:	6811      	ldreq	r1, [r2, #0]
 80050ae:	6852      	ldreq	r2, [r2, #4]
 80050b0:	6062      	str	r2, [r4, #4]
 80050b2:	bf04      	itt	eq
 80050b4:	1809      	addeq	r1, r1, r0
 80050b6:	6021      	streq	r1, [r4, #0]
 80050b8:	605c      	str	r4, [r3, #4]
 80050ba:	e7c7      	b.n	800504c <_free_r+0x24>
 80050bc:	bd38      	pop	{r3, r4, r5, pc}
 80050be:	bf00      	nop
 80050c0:	20000090 	.word	0x20000090

080050c4 <_malloc_r>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	1ccd      	adds	r5, r1, #3
 80050c8:	f025 0503 	bic.w	r5, r5, #3
 80050cc:	3508      	adds	r5, #8
 80050ce:	2d0c      	cmp	r5, #12
 80050d0:	bf38      	it	cc
 80050d2:	250c      	movcc	r5, #12
 80050d4:	2d00      	cmp	r5, #0
 80050d6:	4606      	mov	r6, r0
 80050d8:	db01      	blt.n	80050de <_malloc_r+0x1a>
 80050da:	42a9      	cmp	r1, r5
 80050dc:	d903      	bls.n	80050e6 <_malloc_r+0x22>
 80050de:	230c      	movs	r3, #12
 80050e0:	6033      	str	r3, [r6, #0]
 80050e2:	2000      	movs	r0, #0
 80050e4:	bd70      	pop	{r4, r5, r6, pc}
 80050e6:	f000 f87d 	bl	80051e4 <__malloc_lock>
 80050ea:	4a21      	ldr	r2, [pc, #132]	; (8005170 <_malloc_r+0xac>)
 80050ec:	6814      	ldr	r4, [r2, #0]
 80050ee:	4621      	mov	r1, r4
 80050f0:	b991      	cbnz	r1, 8005118 <_malloc_r+0x54>
 80050f2:	4c20      	ldr	r4, [pc, #128]	; (8005174 <_malloc_r+0xb0>)
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	b91b      	cbnz	r3, 8005100 <_malloc_r+0x3c>
 80050f8:	4630      	mov	r0, r6
 80050fa:	f000 f863 	bl	80051c4 <_sbrk_r>
 80050fe:	6020      	str	r0, [r4, #0]
 8005100:	4629      	mov	r1, r5
 8005102:	4630      	mov	r0, r6
 8005104:	f000 f85e 	bl	80051c4 <_sbrk_r>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d124      	bne.n	8005156 <_malloc_r+0x92>
 800510c:	230c      	movs	r3, #12
 800510e:	6033      	str	r3, [r6, #0]
 8005110:	4630      	mov	r0, r6
 8005112:	f000 f868 	bl	80051e6 <__malloc_unlock>
 8005116:	e7e4      	b.n	80050e2 <_malloc_r+0x1e>
 8005118:	680b      	ldr	r3, [r1, #0]
 800511a:	1b5b      	subs	r3, r3, r5
 800511c:	d418      	bmi.n	8005150 <_malloc_r+0x8c>
 800511e:	2b0b      	cmp	r3, #11
 8005120:	d90f      	bls.n	8005142 <_malloc_r+0x7e>
 8005122:	600b      	str	r3, [r1, #0]
 8005124:	50cd      	str	r5, [r1, r3]
 8005126:	18cc      	adds	r4, r1, r3
 8005128:	4630      	mov	r0, r6
 800512a:	f000 f85c 	bl	80051e6 <__malloc_unlock>
 800512e:	f104 000b 	add.w	r0, r4, #11
 8005132:	1d23      	adds	r3, r4, #4
 8005134:	f020 0007 	bic.w	r0, r0, #7
 8005138:	1ac3      	subs	r3, r0, r3
 800513a:	d0d3      	beq.n	80050e4 <_malloc_r+0x20>
 800513c:	425a      	negs	r2, r3
 800513e:	50e2      	str	r2, [r4, r3]
 8005140:	e7d0      	b.n	80050e4 <_malloc_r+0x20>
 8005142:	428c      	cmp	r4, r1
 8005144:	684b      	ldr	r3, [r1, #4]
 8005146:	bf16      	itet	ne
 8005148:	6063      	strne	r3, [r4, #4]
 800514a:	6013      	streq	r3, [r2, #0]
 800514c:	460c      	movne	r4, r1
 800514e:	e7eb      	b.n	8005128 <_malloc_r+0x64>
 8005150:	460c      	mov	r4, r1
 8005152:	6849      	ldr	r1, [r1, #4]
 8005154:	e7cc      	b.n	80050f0 <_malloc_r+0x2c>
 8005156:	1cc4      	adds	r4, r0, #3
 8005158:	f024 0403 	bic.w	r4, r4, #3
 800515c:	42a0      	cmp	r0, r4
 800515e:	d005      	beq.n	800516c <_malloc_r+0xa8>
 8005160:	1a21      	subs	r1, r4, r0
 8005162:	4630      	mov	r0, r6
 8005164:	f000 f82e 	bl	80051c4 <_sbrk_r>
 8005168:	3001      	adds	r0, #1
 800516a:	d0cf      	beq.n	800510c <_malloc_r+0x48>
 800516c:	6025      	str	r5, [r4, #0]
 800516e:	e7db      	b.n	8005128 <_malloc_r+0x64>
 8005170:	20000090 	.word	0x20000090
 8005174:	20000094 	.word	0x20000094

08005178 <_realloc_r>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	4607      	mov	r7, r0
 800517c:	4614      	mov	r4, r2
 800517e:	460e      	mov	r6, r1
 8005180:	b921      	cbnz	r1, 800518c <_realloc_r+0x14>
 8005182:	4611      	mov	r1, r2
 8005184:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005188:	f7ff bf9c 	b.w	80050c4 <_malloc_r>
 800518c:	b922      	cbnz	r2, 8005198 <_realloc_r+0x20>
 800518e:	f7ff ff4b 	bl	8005028 <_free_r>
 8005192:	4625      	mov	r5, r4
 8005194:	4628      	mov	r0, r5
 8005196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005198:	f000 f826 	bl	80051e8 <_malloc_usable_size_r>
 800519c:	42a0      	cmp	r0, r4
 800519e:	d20f      	bcs.n	80051c0 <_realloc_r+0x48>
 80051a0:	4621      	mov	r1, r4
 80051a2:	4638      	mov	r0, r7
 80051a4:	f7ff ff8e 	bl	80050c4 <_malloc_r>
 80051a8:	4605      	mov	r5, r0
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d0f2      	beq.n	8005194 <_realloc_r+0x1c>
 80051ae:	4631      	mov	r1, r6
 80051b0:	4622      	mov	r2, r4
 80051b2:	f7ff ff15 	bl	8004fe0 <memcpy>
 80051b6:	4631      	mov	r1, r6
 80051b8:	4638      	mov	r0, r7
 80051ba:	f7ff ff35 	bl	8005028 <_free_r>
 80051be:	e7e9      	b.n	8005194 <_realloc_r+0x1c>
 80051c0:	4635      	mov	r5, r6
 80051c2:	e7e7      	b.n	8005194 <_realloc_r+0x1c>

080051c4 <_sbrk_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4c06      	ldr	r4, [pc, #24]	; (80051e0 <_sbrk_r+0x1c>)
 80051c8:	2300      	movs	r3, #0
 80051ca:	4605      	mov	r5, r0
 80051cc:	4608      	mov	r0, r1
 80051ce:	6023      	str	r3, [r4, #0]
 80051d0:	f7fb fcc2 	bl	8000b58 <_sbrk>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	d102      	bne.n	80051de <_sbrk_r+0x1a>
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	b103      	cbz	r3, 80051de <_sbrk_r+0x1a>
 80051dc:	602b      	str	r3, [r5, #0]
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	2000049c 	.word	0x2000049c

080051e4 <__malloc_lock>:
 80051e4:	4770      	bx	lr

080051e6 <__malloc_unlock>:
 80051e6:	4770      	bx	lr

080051e8 <_malloc_usable_size_r>:
 80051e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ec:	1f18      	subs	r0, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	bfbc      	itt	lt
 80051f2:	580b      	ldrlt	r3, [r1, r0]
 80051f4:	18c0      	addlt	r0, r0, r3
 80051f6:	4770      	bx	lr

080051f8 <_init>:
 80051f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fa:	bf00      	nop
 80051fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fe:	bc08      	pop	{r3}
 8005200:	469e      	mov	lr, r3
 8005202:	4770      	bx	lr

08005204 <_fini>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	bf00      	nop
 8005208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800520a:	bc08      	pop	{r3}
 800520c:	469e      	mov	lr, r3
 800520e:	4770      	bx	lr
